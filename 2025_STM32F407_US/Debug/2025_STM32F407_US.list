
2025_STM32F407_US.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b8c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08006d20  08006d20  00007d20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070d4  080070d4  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080070d4  080070d4  000080d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070dc  080070dc  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070dc  080070dc  000080dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070e0  080070e0  000080e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080070e4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          00000254  200001d4  200001d4  000091d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000428  20000428  000091d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c9f4  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bf5  00000000  00000000  00015bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  000177f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b3  00000000  00000000  00018458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021aec  00000000  00000000  00018e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d9de  00000000  00000000  0003a8f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccd68  00000000  00000000  000482d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011503d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004480  00000000  00000000  00115080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00119500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d04 	.word	0x08006d04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08006d04 	.word	0x08006d04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000edc:	1d39      	adds	r1, r7, #4
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4803      	ldr	r0, [pc, #12]	@ (8000ef4 <__io_putchar+0x20>)
 8000ee6:	f002 febb 	bl	8003c60 <HAL_UART_Transmit>
    return ch;
 8000eea:	687b      	ldr	r3, [r7, #4]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000280 	.word	0x20000280

08000ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efe:	f000 fc95 	bl	800182c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f02:	f000 f87b 	bl	8000ffc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f06:	f000 f9ed 	bl	80012e4 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000f0a:	f000 f8e1 	bl	80010d0 <MX_TIM8_Init>
  MX_TIM11_Init();
 8000f0e:	f000 f971 	bl	80011f4 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8000f12:	f000 f9bd 	bl	8001290 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim8);
 8000f16:	4831      	ldr	r0, [pc, #196]	@ (8000fdc <main+0xe4>)
 8000f18:	f001 fcba 	bl	8002890 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim11);
 8000f1c:	4830      	ldr	r0, [pc, #192]	@ (8000fe0 <main+0xe8>)
 8000f1e:	f001 fcb7 	bl	8002890 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8000f22:	2100      	movs	r1, #0
 8000f24:	482e      	ldr	r0, [pc, #184]	@ (8000fe0 <main+0xe8>)
 8000f26:	f001 fd75 	bl	8002a14 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_1);
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	482b      	ldr	r0, [pc, #172]	@ (8000fdc <main+0xe4>)
 8000f2e:	f001 fe93 	bl	8002c58 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 8000f32:	2104      	movs	r1, #4
 8000f34:	4829      	ldr	r0, [pc, #164]	@ (8000fdc <main+0xe4>)
 8000f36:	f001 fe8f 	bl	8002c58 <HAL_TIM_IC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Trigger_Ultrasonic();
 8000f3a:	f000 fa23 	bl	8001384 <Trigger_Ultrasonic>

	  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_RESET); // wait for rising
 8000f3e:	bf00      	nop
 8000f40:	2140      	movs	r1, #64	@ 0x40
 8000f42:	4828      	ldr	r0, [pc, #160]	@ (8000fe4 <main+0xec>)
 8000f44:	f000 ff8a 	bl	8001e5c <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0f8      	beq.n	8000f40 <main+0x48>
	  echo_start = __HAL_TIM_GET_COUNTER(&htim8);
 8000f4e:	4b23      	ldr	r3, [pc, #140]	@ (8000fdc <main+0xe4>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f54:	4a24      	ldr	r2, [pc, #144]	@ (8000fe8 <main+0xf0>)
 8000f56:	6013      	str	r3, [r2, #0]

	  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_SET); // wait for falling
 8000f58:	bf00      	nop
 8000f5a:	2140      	movs	r1, #64	@ 0x40
 8000f5c:	4821      	ldr	r0, [pc, #132]	@ (8000fe4 <main+0xec>)
 8000f5e:	f000 ff7d 	bl	8001e5c <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d0f8      	beq.n	8000f5a <main+0x62>
	  echo_end = __HAL_TIM_GET_COUNTER(&htim8);
 8000f68:	4b1c      	ldr	r3, [pc, #112]	@ (8000fdc <main+0xe4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f6e:	4a1f      	ldr	r2, [pc, #124]	@ (8000fec <main+0xf4>)
 8000f70:	6013      	str	r3, [r2, #0]

	  uint32_t pulse = (echo_end >= echo_start) ? (echo_end - echo_start) : (0xFFFF - echo_start + echo_end);
 8000f72:	4b1e      	ldr	r3, [pc, #120]	@ (8000fec <main+0xf4>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe8 <main+0xf0>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d305      	bcc.n	8000f8a <main+0x92>
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fec <main+0xf4>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4b19      	ldr	r3, [pc, #100]	@ (8000fe8 <main+0xf0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	e007      	b.n	8000f9a <main+0xa2>
 8000f8a:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <main+0xf4>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4b16      	ldr	r3, [pc, #88]	@ (8000fe8 <main+0xf0>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000f98:	33ff      	adds	r3, #255	@ 0xff
 8000f9a:	607b      	str	r3, [r7, #4]
	  distance_cm = pulse * 0.0343f / 2;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	ee07 3a90 	vmov	s15, r3
 8000fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fa6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000ff0 <main+0xf8>
 8000faa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fae:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000fb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <main+0xfc>)
 8000fb8:	edc3 7a00 	vstr	s15, [r3]

	  printf("Pulse: %lu us, Distance: %.2f cm \n", pulse, distance_cm);
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff4 <main+0xfc>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fac1 	bl	8000548 <__aeabi_f2d>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	480a      	ldr	r0, [pc, #40]	@ (8000ff8 <main+0x100>)
 8000fce:	f003 ff1b 	bl	8004e08 <iprintf>
	  HAL_Delay(100);
 8000fd2:	2064      	movs	r0, #100	@ 0x64
 8000fd4:	f000 fc9c 	bl	8001910 <HAL_Delay>
  {
 8000fd8:	e7af      	b.n	8000f3a <main+0x42>
 8000fda:	bf00      	nop
 8000fdc:	200001f0 	.word	0x200001f0
 8000fe0:	20000238 	.word	0x20000238
 8000fe4:	40020800 	.word	0x40020800
 8000fe8:	200002c8 	.word	0x200002c8
 8000fec:	200002cc 	.word	0x200002cc
 8000ff0:	3d0c7e28 	.word	0x3d0c7e28
 8000ff4:	200002d0 	.word	0x200002d0
 8000ff8:	08006d20 	.word	0x08006d20

08000ffc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b094      	sub	sp, #80	@ 0x50
 8001000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001002:	f107 0320 	add.w	r3, r7, #32
 8001006:	2230      	movs	r2, #48	@ 0x30
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f003 ff51 	bl	8004eb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	4b28      	ldr	r3, [pc, #160]	@ (80010c8 <SystemClock_Config+0xcc>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001028:	4a27      	ldr	r2, [pc, #156]	@ (80010c8 <SystemClock_Config+0xcc>)
 800102a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800102e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001030:	4b25      	ldr	r3, [pc, #148]	@ (80010c8 <SystemClock_Config+0xcc>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001034:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800103c:	2300      	movs	r3, #0
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	4b22      	ldr	r3, [pc, #136]	@ (80010cc <SystemClock_Config+0xd0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a21      	ldr	r2, [pc, #132]	@ (80010cc <SystemClock_Config+0xd0>)
 8001046:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	4b1f      	ldr	r3, [pc, #124]	@ (80010cc <SystemClock_Config+0xd0>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001058:	2302      	movs	r3, #2
 800105a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800105c:	2301      	movs	r3, #1
 800105e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001060:	2310      	movs	r3, #16
 8001062:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001064:	2302      	movs	r3, #2
 8001066:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001068:	2300      	movs	r3, #0
 800106a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800106c:	2308      	movs	r3, #8
 800106e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001070:	23a0      	movs	r3, #160	@ 0xa0
 8001072:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001074:	2302      	movs	r3, #2
 8001076:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001078:	2307      	movs	r3, #7
 800107a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107c:	f107 0320 	add.w	r3, r7, #32
 8001080:	4618      	mov	r0, r3
 8001082:	f000 ff1d 	bl	8001ec0 <HAL_RCC_OscConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800108c:	f000 f98e 	bl	80013ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001090:	230f      	movs	r3, #15
 8001092:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001094:	2302      	movs	r3, #2
 8001096:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800109c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80010a2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	2105      	movs	r1, #5
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 f97e 	bl	80023b0 <HAL_RCC_ClockConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010ba:	f000 f977 	bl	80013ac <Error_Handler>
  }
}
 80010be:	bf00      	nop
 80010c0:	3750      	adds	r7, #80	@ 0x50
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40007000 	.word	0x40007000

080010d0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08c      	sub	sp, #48	@ 0x30
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80010fc:	230a      	movs	r3, #10
 80010fe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001100:	2301      	movs	r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	613b      	str	r3, [r7, #16]
  HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1);
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2200      	movs	r2, #0
 8001110:	4619      	mov	r1, r3
 8001112:	4836      	ldr	r0, [pc, #216]	@ (80011ec <MX_TIM8_Init+0x11c>)
 8001114:	f001 fe7c 	bl	8002e10 <HAL_TIM_IC_ConfigChannel>

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001118:	4b34      	ldr	r3, [pc, #208]	@ (80011ec <MX_TIM8_Init+0x11c>)
 800111a:	4a35      	ldr	r2, [pc, #212]	@ (80011f0 <MX_TIM8_Init+0x120>)
 800111c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 800111e:	4b33      	ldr	r3, [pc, #204]	@ (80011ec <MX_TIM8_Init+0x11c>)
 8001120:	224f      	movs	r2, #79	@ 0x4f
 8001122:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001124:	4b31      	ldr	r3, [pc, #196]	@ (80011ec <MX_TIM8_Init+0x11c>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800112a:	4b30      	ldr	r3, [pc, #192]	@ (80011ec <MX_TIM8_Init+0x11c>)
 800112c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001130:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001132:	4b2e      	ldr	r3, [pc, #184]	@ (80011ec <MX_TIM8_Init+0x11c>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001138:	4b2c      	ldr	r3, [pc, #176]	@ (80011ec <MX_TIM8_Init+0x11c>)
 800113a:	2200      	movs	r2, #0
 800113c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b2b      	ldr	r3, [pc, #172]	@ (80011ec <MX_TIM8_Init+0x11c>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001144:	4829      	ldr	r0, [pc, #164]	@ (80011ec <MX_TIM8_Init+0x11c>)
 8001146:	f001 fb53 	bl	80027f0 <HAL_TIM_Base_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001150:	f000 f92c 	bl	80013ac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001154:	4825      	ldr	r0, [pc, #148]	@ (80011ec <MX_TIM8_Init+0x11c>)
 8001156:	f001 fd25 	bl	8002ba4 <HAL_TIM_IC_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001160:	f000 f924 	bl	80013ac <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001164:	2304      	movs	r3, #4
 8001166:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001168:	2360      	movs	r3, #96	@ 0x60
 800116a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	481c      	ldr	r0, [pc, #112]	@ (80011ec <MX_TIM8_Init+0x11c>)
 800117c:	f001 ffa6 	bl	80030cc <HAL_TIM_SlaveConfigSynchro>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM8_Init+0xba>
  {
    Error_Handler();
 8001186:	f000 f911 	bl	80013ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4619      	mov	r1, r3
 8001198:	4814      	ldr	r0, [pc, #80]	@ (80011ec <MX_TIM8_Init+0x11c>)
 800119a:	f002 fc95 	bl	8003ac8 <HAL_TIMEx_MasterConfigSynchronization>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM8_Init+0xd8>
  {
    Error_Handler();
 80011a4:	f000 f902 	bl	80013ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011ac:	2301      	movs	r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2200      	movs	r2, #0
 80011bc:	4619      	mov	r1, r3
 80011be:	480b      	ldr	r0, [pc, #44]	@ (80011ec <MX_TIM8_Init+0x11c>)
 80011c0:	f001 fe26 	bl	8002e10 <HAL_TIM_IC_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80011ca:	f000 f8ef 	bl	80013ac <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2204      	movs	r2, #4
 80011d2:	4619      	mov	r1, r3
 80011d4:	4805      	ldr	r0, [pc, #20]	@ (80011ec <MX_TIM8_Init+0x11c>)
 80011d6:	f001 fe1b 	bl	8002e10 <HAL_TIM_IC_ConfigChannel>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 80011e0:	f000 f8e4 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	3730      	adds	r7, #48	@ 0x30
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200001f0 	.word	0x200001f0
 80011f0:	40010400 	.word	0x40010400

080011f4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
 8001208:	615a      	str	r2, [r3, #20]
 800120a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800120c:	4b1e      	ldr	r3, [pc, #120]	@ (8001288 <MX_TIM11_Init+0x94>)
 800120e:	4a1f      	ldr	r2, [pc, #124]	@ (800128c <MX_TIM11_Init+0x98>)
 8001210:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 199;
 8001212:	4b1d      	ldr	r3, [pc, #116]	@ (8001288 <MX_TIM11_Init+0x94>)
 8001214:	22c7      	movs	r2, #199	@ 0xc7
 8001216:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001218:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <MX_TIM11_Init+0x94>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 39999;
 800121e:	4b1a      	ldr	r3, [pc, #104]	@ (8001288 <MX_TIM11_Init+0x94>)
 8001220:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8001224:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001226:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <MX_TIM11_Init+0x94>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122c:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <MX_TIM11_Init+0x94>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001232:	4815      	ldr	r0, [pc, #84]	@ (8001288 <MX_TIM11_Init+0x94>)
 8001234:	f001 fadc 	bl	80027f0 <HAL_TIM_Base_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800123e:	f000 f8b5 	bl	80013ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001242:	4811      	ldr	r0, [pc, #68]	@ (8001288 <MX_TIM11_Init+0x94>)
 8001244:	f001 fb8c 	bl	8002960 <HAL_TIM_PWM_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800124e:	f000 f8ad 	bl	80013ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001252:	2360      	movs	r3, #96	@ 0x60
 8001254:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2200      	movs	r2, #0
 8001266:	4619      	mov	r1, r3
 8001268:	4807      	ldr	r0, [pc, #28]	@ (8001288 <MX_TIM11_Init+0x94>)
 800126a:	f001 fe6d 	bl	8002f48 <HAL_TIM_PWM_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001274:	f000 f89a 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001278:	4803      	ldr	r0, [pc, #12]	@ (8001288 <MX_TIM11_Init+0x94>)
 800127a:	f000 f923 	bl	80014c4 <HAL_TIM_MspPostInit>

}
 800127e:	bf00      	nop
 8001280:	3720      	adds	r7, #32
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000238 	.word	0x20000238
 800128c:	40014800 	.word	0x40014800

08001290 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001294:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <MX_USART2_UART_Init+0x4c>)
 8001296:	4a12      	ldr	r2, [pc, #72]	@ (80012e0 <MX_USART2_UART_Init+0x50>)
 8001298:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800129a:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <MX_USART2_UART_Init+0x4c>)
 800129c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <MX_USART2_UART_Init+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <MX_USART2_UART_Init+0x4c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <MX_USART2_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012b4:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <MX_USART2_UART_Init+0x4c>)
 80012b6:	220c      	movs	r2, #12
 80012b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ba:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <MX_USART2_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <MX_USART2_UART_Init+0x4c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	@ (80012dc <MX_USART2_UART_Init+0x4c>)
 80012c8:	f002 fc7a 	bl	8003bc0 <HAL_UART_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012d2:	f000 f86b 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000280 	.word	0x20000280
 80012e0:	40004400 	.word	0x40004400

080012e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	4b1f      	ldr	r3, [pc, #124]	@ (800137c <MX_GPIO_Init+0x98>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a1e      	ldr	r2, [pc, #120]	@ (800137c <MX_GPIO_Init+0x98>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b1c      	ldr	r3, [pc, #112]	@ (800137c <MX_GPIO_Init+0x98>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b18      	ldr	r3, [pc, #96]	@ (800137c <MX_GPIO_Init+0x98>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	4a17      	ldr	r2, [pc, #92]	@ (800137c <MX_GPIO_Init+0x98>)
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	6313      	str	r3, [r2, #48]	@ 0x30
 8001326:	4b15      	ldr	r3, [pc, #84]	@ (800137c <MX_GPIO_Init+0x98>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	4b11      	ldr	r3, [pc, #68]	@ (800137c <MX_GPIO_Init+0x98>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	4a10      	ldr	r2, [pc, #64]	@ (800137c <MX_GPIO_Init+0x98>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	6313      	str	r3, [r2, #48]	@ 0x30
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <MX_GPIO_Init+0x98>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	2120      	movs	r1, #32
 8001352:	480b      	ldr	r0, [pc, #44]	@ (8001380 <MX_GPIO_Init+0x9c>)
 8001354:	f000 fd9a 	bl	8001e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001358:	2320      	movs	r3, #32
 800135a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	4619      	mov	r1, r3
 800136e:	4804      	ldr	r0, [pc, #16]	@ (8001380 <MX_GPIO_Init+0x9c>)
 8001370:	f000 fbd8 	bl	8001b24 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001374:	bf00      	nop
 8001376:	3720      	adds	r7, #32
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40023800 	.word	0x40023800
 8001380:	40020000 	.word	0x40020000

08001384 <Trigger_Ultrasonic>:

/* USER CODE BEGIN 4 */
/* Trigger pulse */
void Trigger_Ultrasonic(void) {
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001388:	2201      	movs	r2, #1
 800138a:	2120      	movs	r1, #32
 800138c:	4806      	ldr	r0, [pc, #24]	@ (80013a8 <Trigger_Ultrasonic+0x24>)
 800138e:	f000 fd7d 	bl	8001e8c <HAL_GPIO_WritePin>
	HAL_Delay(0.01); // ~10 us
 8001392:	2000      	movs	r0, #0
 8001394:	f000 fabc 	bl	8001910 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001398:	2200      	movs	r2, #0
 800139a:	2120      	movs	r1, #32
 800139c:	4802      	ldr	r0, [pc, #8]	@ (80013a8 <Trigger_Ultrasonic+0x24>)
 800139e:	f000 fd75 	bl	8001e8c <HAL_GPIO_WritePin>
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40020000 	.word	0x40020000

080013ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b0:	b672      	cpsid	i
}
 80013b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <Error_Handler+0x8>

080013b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <HAL_MspInit+0x4c>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001404 <HAL_MspInit+0x4c>)
 80013c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001404 <HAL_MspInit+0x4c>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	603b      	str	r3, [r7, #0]
 80013de:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <HAL_MspInit+0x4c>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e2:	4a08      	ldr	r2, [pc, #32]	@ (8001404 <HAL_MspInit+0x4c>)
 80013e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ea:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <HAL_MspInit+0x4c>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013f6:	2007      	movs	r0, #7
 80013f8:	f000 fb60 	bl	8001abc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40023800 	.word	0x40023800

08001408 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	@ 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM8)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a23      	ldr	r2, [pc, #140]	@ (80014b4 <HAL_TIM_Base_MspInit+0xac>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d12c      	bne.n	8001484 <HAL_TIM_Base_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b22      	ldr	r3, [pc, #136]	@ (80014b8 <HAL_TIM_Base_MspInit+0xb0>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001432:	4a21      	ldr	r2, [pc, #132]	@ (80014b8 <HAL_TIM_Base_MspInit+0xb0>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	6453      	str	r3, [r2, #68]	@ 0x44
 800143a:	4b1f      	ldr	r3, [pc, #124]	@ (80014b8 <HAL_TIM_Base_MspInit+0xb0>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b1b      	ldr	r3, [pc, #108]	@ (80014b8 <HAL_TIM_Base_MspInit+0xb0>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	4a1a      	ldr	r2, [pc, #104]	@ (80014b8 <HAL_TIM_Base_MspInit+0xb0>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6313      	str	r3, [r2, #48]	@ 0x30
 8001456:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <HAL_TIM_Base_MspInit+0xb0>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001462:	23c0      	movs	r3, #192	@ 0xc0
 8001464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001472:	2303      	movs	r3, #3
 8001474:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	480f      	ldr	r0, [pc, #60]	@ (80014bc <HAL_TIM_Base_MspInit+0xb4>)
 800147e:	f000 fb51 	bl	8001b24 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001482:	e012      	b.n	80014aa <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM11)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0d      	ldr	r2, [pc, #52]	@ (80014c0 <HAL_TIM_Base_MspInit+0xb8>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d10d      	bne.n	80014aa <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <HAL_TIM_Base_MspInit+0xb0>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001496:	4a08      	ldr	r2, [pc, #32]	@ (80014b8 <HAL_TIM_Base_MspInit+0xb0>)
 8001498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800149c:	6453      	str	r3, [r2, #68]	@ 0x44
 800149e:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_TIM_Base_MspInit+0xb0>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
}
 80014aa:	bf00      	nop
 80014ac:	3728      	adds	r7, #40	@ 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40010400 	.word	0x40010400
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020800 	.word	0x40020800
 80014c0:	40014800 	.word	0x40014800

080014c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM11)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a12      	ldr	r2, [pc, #72]	@ (800152c <HAL_TIM_MspPostInit+0x68>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d11e      	bne.n	8001524 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM11_MspPostInit 0 */

    /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <HAL_TIM_MspPostInit+0x6c>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a10      	ldr	r2, [pc, #64]	@ (8001530 <HAL_TIM_MspPostInit+0x6c>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <HAL_TIM_MspPostInit+0x6c>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration
    PB9     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001502:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001506:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001514:	2303      	movs	r3, #3
 8001516:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	4619      	mov	r1, r3
 800151e:	4805      	ldr	r0, [pc, #20]	@ (8001534 <HAL_TIM_MspPostInit+0x70>)
 8001520:	f000 fb00 	bl	8001b24 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM11_MspPostInit 1 */

    /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8001524:	bf00      	nop
 8001526:	3720      	adds	r7, #32
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40014800 	.word	0x40014800
 8001530:	40023800 	.word	0x40023800
 8001534:	40020400 	.word	0x40020400

08001538 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	@ 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a19      	ldr	r2, [pc, #100]	@ (80015bc <HAL_UART_MspInit+0x84>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d12b      	bne.n	80015b2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	4b18      	ldr	r3, [pc, #96]	@ (80015c0 <HAL_UART_MspInit+0x88>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	4a17      	ldr	r2, [pc, #92]	@ (80015c0 <HAL_UART_MspInit+0x88>)
 8001564:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001568:	6413      	str	r3, [r2, #64]	@ 0x40
 800156a:	4b15      	ldr	r3, [pc, #84]	@ (80015c0 <HAL_UART_MspInit+0x88>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <HAL_UART_MspInit+0x88>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	4a10      	ldr	r2, [pc, #64]	@ (80015c0 <HAL_UART_MspInit+0x88>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6313      	str	r3, [r2, #48]	@ 0x30
 8001586:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <HAL_UART_MspInit+0x88>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001592:	230c      	movs	r3, #12
 8001594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015a2:	2307      	movs	r3, #7
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	4805      	ldr	r0, [pc, #20]	@ (80015c4 <HAL_UART_MspInit+0x8c>)
 80015ae:	f000 fab9 	bl	8001b24 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80015b2:	bf00      	nop
 80015b4:	3728      	adds	r7, #40	@ 0x28
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40004400 	.word	0x40004400
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020000 	.word	0x40020000

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <NMI_Handler+0x4>

080015d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <HardFault_Handler+0x4>

080015d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <MemManage_Handler+0x4>

080015e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <UsageFault_Handler+0x4>

080015f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161e:	f000 f957 	bl	80018d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}

08001626 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  return 1;
 800162a:	2301      	movs	r3, #1
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <_kill>:

int _kill(int pid, int sig)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001640:	f003 fc8a 	bl	8004f58 <__errno>
 8001644:	4603      	mov	r3, r0
 8001646:	2216      	movs	r2, #22
 8001648:	601a      	str	r2, [r3, #0]
  return -1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_exit>:

void _exit (int status)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800165e:	f04f 31ff 	mov.w	r1, #4294967295
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffe7 	bl	8001636 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <_exit+0x12>

0800166c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	e00a      	b.n	8001694 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800167e:	f3af 8000 	nop.w
 8001682:	4601      	mov	r1, r0
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	60ba      	str	r2, [r7, #8]
 800168a:	b2ca      	uxtb	r2, r1
 800168c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	3301      	adds	r3, #1
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	429a      	cmp	r2, r3
 800169a:	dbf0      	blt.n	800167e <_read+0x12>
  }

  return len;
 800169c:	687b      	ldr	r3, [r7, #4]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	e009      	b.n	80016cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	60ba      	str	r2, [r7, #8]
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fc07 	bl	8000ed4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	3301      	adds	r3, #1
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	dbf1      	blt.n	80016b8 <_write+0x12>
  }
  return len;
 80016d4:	687b      	ldr	r3, [r7, #4]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <_close>:

int _close(int file)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001706:	605a      	str	r2, [r3, #4]
  return 0;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <_isatty>:

int _isatty(int file)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001750:	4a14      	ldr	r2, [pc, #80]	@ (80017a4 <_sbrk+0x5c>)
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <_sbrk+0x60>)
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800175c:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d102      	bne.n	800176a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001764:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <_sbrk+0x64>)
 8001766:	4a12      	ldr	r2, [pc, #72]	@ (80017b0 <_sbrk+0x68>)
 8001768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176a:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	429a      	cmp	r2, r3
 8001776:	d207      	bcs.n	8001788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001778:	f003 fbee 	bl	8004f58 <__errno>
 800177c:	4603      	mov	r3, r0
 800177e:	220c      	movs	r2, #12
 8001780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	e009      	b.n	800179c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001788:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <_sbrk+0x64>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800178e:	4b07      	ldr	r3, [pc, #28]	@ (80017ac <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	4a05      	ldr	r2, [pc, #20]	@ (80017ac <_sbrk+0x64>)
 8001798:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179a:	68fb      	ldr	r3, [r7, #12]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20020000 	.word	0x20020000
 80017a8:	00000400 	.word	0x00000400
 80017ac:	200002d4 	.word	0x200002d4
 80017b0:	20000428 	.word	0x20000428

080017b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b8:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <SystemInit+0x20>)
 80017ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017be:	4a05      	ldr	r2, [pc, #20]	@ (80017d4 <SystemInit+0x20>)
 80017c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001810 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017dc:	f7ff ffea 	bl	80017b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e0:	480c      	ldr	r0, [pc, #48]	@ (8001814 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017e2:	490d      	ldr	r1, [pc, #52]	@ (8001818 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017e4:	4a0d      	ldr	r2, [pc, #52]	@ (800181c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e8:	e002      	b.n	80017f0 <LoopCopyDataInit>

080017ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ee:	3304      	adds	r3, #4

080017f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f4:	d3f9      	bcc.n	80017ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001824 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017fc:	e001      	b.n	8001802 <LoopFillZerobss>

080017fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001800:	3204      	adds	r2, #4

08001802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001804:	d3fb      	bcc.n	80017fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001806:	f003 fbad 	bl	8004f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800180a:	f7ff fb75 	bl	8000ef8 <main>
  bx  lr    
 800180e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001810:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001818:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800181c:	080070e4 	.word	0x080070e4
  ldr r2, =_sbss
 8001820:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001824:	20000428 	.word	0x20000428

08001828 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001828:	e7fe      	b.n	8001828 <ADC_IRQHandler>
	...

0800182c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001830:	4b0e      	ldr	r3, [pc, #56]	@ (800186c <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0d      	ldr	r2, [pc, #52]	@ (800186c <HAL_Init+0x40>)
 8001836:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800183a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800183c:	4b0b      	ldr	r3, [pc, #44]	@ (800186c <HAL_Init+0x40>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0a      	ldr	r2, [pc, #40]	@ (800186c <HAL_Init+0x40>)
 8001842:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001846:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001848:	4b08      	ldr	r3, [pc, #32]	@ (800186c <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a07      	ldr	r2, [pc, #28]	@ (800186c <HAL_Init+0x40>)
 800184e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001852:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001854:	2003      	movs	r0, #3
 8001856:	f000 f931 	bl	8001abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185a:	2000      	movs	r0, #0
 800185c:	f000 f808 	bl	8001870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001860:	f7ff fdaa 	bl	80013b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023c00 	.word	0x40023c00

08001870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001878:	4b12      	ldr	r3, [pc, #72]	@ (80018c4 <HAL_InitTick+0x54>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <HAL_InitTick+0x58>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4619      	mov	r1, r3
 8001882:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001886:	fbb3 f3f1 	udiv	r3, r3, r1
 800188a:	fbb2 f3f3 	udiv	r3, r2, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f93b 	bl	8001b0a <HAL_SYSTICK_Config>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e00e      	b.n	80018bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b0f      	cmp	r3, #15
 80018a2:	d80a      	bhi.n	80018ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a4:	2200      	movs	r2, #0
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	f000 f911 	bl	8001ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b0:	4a06      	ldr	r2, [pc, #24]	@ (80018cc <HAL_InitTick+0x5c>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e000      	b.n	80018bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000000 	.word	0x20000000
 80018c8:	20000008 	.word	0x20000008
 80018cc:	20000004 	.word	0x20000004

080018d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <HAL_IncTick+0x20>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <HAL_IncTick+0x24>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	4a04      	ldr	r2, [pc, #16]	@ (80018f4 <HAL_IncTick+0x24>)
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000008 	.word	0x20000008
 80018f4:	200002d8 	.word	0x200002d8

080018f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return uwTick;
 80018fc:	4b03      	ldr	r3, [pc, #12]	@ (800190c <HAL_GetTick+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	200002d8 	.word	0x200002d8

08001910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001918:	f7ff ffee 	bl	80018f8 <HAL_GetTick>
 800191c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001928:	d005      	beq.n	8001936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800192a:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <HAL_Delay+0x44>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4413      	add	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001936:	bf00      	nop
 8001938:	f7ff ffde 	bl	80018f8 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	429a      	cmp	r2, r3
 8001946:	d8f7      	bhi.n	8001938 <HAL_Delay+0x28>
  {
  }
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000008 	.word	0x20000008

08001958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001968:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001974:	4013      	ands	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001980:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198a:	4a04      	ldr	r2, [pc, #16]	@ (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	60d3      	str	r3, [r2, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a4:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <__NVIC_GetPriorityGrouping+0x18>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	f003 0307 	and.w	r3, r3, #7
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	db0a      	blt.n	80019e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	490c      	ldr	r1, [pc, #48]	@ (8001a08 <__NVIC_SetPriority+0x4c>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	0112      	lsls	r2, r2, #4
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	440b      	add	r3, r1
 80019e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e4:	e00a      	b.n	80019fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4908      	ldr	r1, [pc, #32]	@ (8001a0c <__NVIC_SetPriority+0x50>)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	3b04      	subs	r3, #4
 80019f4:	0112      	lsls	r2, r2, #4
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	440b      	add	r3, r1
 80019fa:	761a      	strb	r2, [r3, #24]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000e100 	.word	0xe000e100
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	@ 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f1c3 0307 	rsb	r3, r3, #7
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	bf28      	it	cs
 8001a2e:	2304      	movcs	r3, #4
 8001a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3304      	adds	r3, #4
 8001a36:	2b06      	cmp	r3, #6
 8001a38:	d902      	bls.n	8001a40 <NVIC_EncodePriority+0x30>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3b03      	subs	r3, #3
 8001a3e:	e000      	b.n	8001a42 <NVIC_EncodePriority+0x32>
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	f04f 32ff 	mov.w	r2, #4294967295
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	401a      	ands	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	43d9      	mvns	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	4313      	orrs	r3, r2
         );
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3724      	adds	r7, #36	@ 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a88:	d301      	bcc.n	8001a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00f      	b.n	8001aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab8 <SysTick_Config+0x40>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a96:	210f      	movs	r1, #15
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f7ff ff8e 	bl	80019bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa0:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <SysTick_Config+0x40>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa6:	4b04      	ldr	r3, [pc, #16]	@ (8001ab8 <SysTick_Config+0x40>)
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	e000e010 	.word	0xe000e010

08001abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ff47 	bl	8001958 <__NVIC_SetPriorityGrouping>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae4:	f7ff ff5c 	bl	80019a0 <__NVIC_GetPriorityGrouping>
 8001ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	6978      	ldr	r0, [r7, #20]
 8001af0:	f7ff ff8e 	bl	8001a10 <NVIC_EncodePriority>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff5d 	bl	80019bc <__NVIC_SetPriority>
}
 8001b02:	bf00      	nop
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffb0 	bl	8001a78 <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	@ 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
 8001b3e:	e16b      	b.n	8001e18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b40:	2201      	movs	r2, #1
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	f040 815a 	bne.w	8001e12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d005      	beq.n	8001b76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d130      	bne.n	8001bd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	2203      	movs	r2, #3
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bac:	2201      	movs	r2, #1
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f003 0201 	and.w	r2, r3, #1
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d017      	beq.n	8001c14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d123      	bne.n	8001c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	08da      	lsrs	r2, r3, #3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3208      	adds	r2, #8
 8001c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	220f      	movs	r2, #15
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	08da      	lsrs	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3208      	adds	r2, #8
 8001c62:	69b9      	ldr	r1, [r7, #24]
 8001c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	2203      	movs	r2, #3
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0203 	and.w	r2, r3, #3
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80b4 	beq.w	8001e12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b60      	ldr	r3, [pc, #384]	@ (8001e30 <HAL_GPIO_Init+0x30c>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	4a5f      	ldr	r2, [pc, #380]	@ (8001e30 <HAL_GPIO_Init+0x30c>)
 8001cb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cba:	4b5d      	ldr	r3, [pc, #372]	@ (8001e30 <HAL_GPIO_Init+0x30c>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cc6:	4a5b      	ldr	r2, [pc, #364]	@ (8001e34 <HAL_GPIO_Init+0x310>)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	3302      	adds	r3, #2
 8001cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	220f      	movs	r2, #15
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a52      	ldr	r2, [pc, #328]	@ (8001e38 <HAL_GPIO_Init+0x314>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d02b      	beq.n	8001d4a <HAL_GPIO_Init+0x226>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a51      	ldr	r2, [pc, #324]	@ (8001e3c <HAL_GPIO_Init+0x318>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d025      	beq.n	8001d46 <HAL_GPIO_Init+0x222>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a50      	ldr	r2, [pc, #320]	@ (8001e40 <HAL_GPIO_Init+0x31c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d01f      	beq.n	8001d42 <HAL_GPIO_Init+0x21e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4f      	ldr	r2, [pc, #316]	@ (8001e44 <HAL_GPIO_Init+0x320>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d019      	beq.n	8001d3e <HAL_GPIO_Init+0x21a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4e      	ldr	r2, [pc, #312]	@ (8001e48 <HAL_GPIO_Init+0x324>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <HAL_GPIO_Init+0x216>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4d      	ldr	r2, [pc, #308]	@ (8001e4c <HAL_GPIO_Init+0x328>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00d      	beq.n	8001d36 <HAL_GPIO_Init+0x212>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4c      	ldr	r2, [pc, #304]	@ (8001e50 <HAL_GPIO_Init+0x32c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d007      	beq.n	8001d32 <HAL_GPIO_Init+0x20e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4b      	ldr	r2, [pc, #300]	@ (8001e54 <HAL_GPIO_Init+0x330>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d101      	bne.n	8001d2e <HAL_GPIO_Init+0x20a>
 8001d2a:	2307      	movs	r3, #7
 8001d2c:	e00e      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d2e:	2308      	movs	r3, #8
 8001d30:	e00c      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d32:	2306      	movs	r3, #6
 8001d34:	e00a      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d36:	2305      	movs	r3, #5
 8001d38:	e008      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	e006      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e004      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e002      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	f002 0203 	and.w	r2, r2, #3
 8001d52:	0092      	lsls	r2, r2, #2
 8001d54:	4093      	lsls	r3, r2
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d5c:	4935      	ldr	r1, [pc, #212]	@ (8001e34 <HAL_GPIO_Init+0x310>)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	089b      	lsrs	r3, r3, #2
 8001d62:	3302      	adds	r3, #2
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e58 <HAL_GPIO_Init+0x334>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d8e:	4a32      	ldr	r2, [pc, #200]	@ (8001e58 <HAL_GPIO_Init+0x334>)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d94:	4b30      	ldr	r3, [pc, #192]	@ (8001e58 <HAL_GPIO_Init+0x334>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001db8:	4a27      	ldr	r2, [pc, #156]	@ (8001e58 <HAL_GPIO_Init+0x334>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dbe:	4b26      	ldr	r3, [pc, #152]	@ (8001e58 <HAL_GPIO_Init+0x334>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001de2:	4a1d      	ldr	r2, [pc, #116]	@ (8001e58 <HAL_GPIO_Init+0x334>)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001de8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e58 <HAL_GPIO_Init+0x334>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e0c:	4a12      	ldr	r2, [pc, #72]	@ (8001e58 <HAL_GPIO_Init+0x334>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3301      	adds	r3, #1
 8001e16:	61fb      	str	r3, [r7, #28]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	2b0f      	cmp	r3, #15
 8001e1c:	f67f ae90 	bls.w	8001b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
 8001e24:	3724      	adds	r7, #36	@ 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40013800 	.word	0x40013800
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	40020800 	.word	0x40020800
 8001e44:	40020c00 	.word	0x40020c00
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40021400 	.word	0x40021400
 8001e50:	40021800 	.word	0x40021800
 8001e54:	40021c00 	.word	0x40021c00
 8001e58:	40013c00 	.word	0x40013c00

08001e5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	887b      	ldrh	r3, [r7, #2]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d002      	beq.n	8001e7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e74:	2301      	movs	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
 8001e78:	e001      	b.n	8001e7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	807b      	strh	r3, [r7, #2]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e9c:	787b      	ldrb	r3, [r7, #1]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ea2:	887a      	ldrh	r2, [r7, #2]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ea8:	e003      	b.n	8001eb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eaa:	887b      	ldrh	r3, [r7, #2]
 8001eac:	041a      	lsls	r2, r3, #16
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	619a      	str	r2, [r3, #24]
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e267      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d075      	beq.n	8001fca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ede:	4b88      	ldr	r3, [pc, #544]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d00c      	beq.n	8001f04 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eea:	4b85      	ldr	r3, [pc, #532]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d112      	bne.n	8001f1c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ef6:	4b82      	ldr	r3, [pc, #520]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001efe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f02:	d10b      	bne.n	8001f1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f04:	4b7e      	ldr	r3, [pc, #504]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d05b      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x108>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d157      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e242      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f24:	d106      	bne.n	8001f34 <HAL_RCC_OscConfig+0x74>
 8001f26:	4b76      	ldr	r3, [pc, #472]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a75      	ldr	r2, [pc, #468]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e01d      	b.n	8001f70 <HAL_RCC_OscConfig+0xb0>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f3c:	d10c      	bne.n	8001f58 <HAL_RCC_OscConfig+0x98>
 8001f3e:	4b70      	ldr	r3, [pc, #448]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a6f      	ldr	r2, [pc, #444]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	4b6d      	ldr	r3, [pc, #436]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a6c      	ldr	r2, [pc, #432]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e00b      	b.n	8001f70 <HAL_RCC_OscConfig+0xb0>
 8001f58:	4b69      	ldr	r3, [pc, #420]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a68      	ldr	r2, [pc, #416]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	4b66      	ldr	r3, [pc, #408]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a65      	ldr	r2, [pc, #404]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d013      	beq.n	8001fa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7ff fcbe 	bl	80018f8 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f80:	f7ff fcba 	bl	80018f8 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	@ 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e207      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f92:	4b5b      	ldr	r3, [pc, #364]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0xc0>
 8001f9e:	e014      	b.n	8001fca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa0:	f7ff fcaa 	bl	80018f8 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa8:	f7ff fca6 	bl	80018f8 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	@ 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e1f3      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fba:	4b51      	ldr	r3, [pc, #324]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0xe8>
 8001fc6:	e000      	b.n	8001fca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d063      	beq.n	800209e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001fd6:	4b4a      	ldr	r3, [pc, #296]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00b      	beq.n	8001ffa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fe2:	4b47      	ldr	r3, [pc, #284]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d11c      	bne.n	8002028 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fee:	4b44      	ldr	r3, [pc, #272]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d116      	bne.n	8002028 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffa:	4b41      	ldr	r3, [pc, #260]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <HAL_RCC_OscConfig+0x152>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d001      	beq.n	8002012 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e1c7      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002012:	4b3b      	ldr	r3, [pc, #236]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4937      	ldr	r1, [pc, #220]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002026:	e03a      	b.n	800209e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d020      	beq.n	8002072 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002030:	4b34      	ldr	r3, [pc, #208]	@ (8002104 <HAL_RCC_OscConfig+0x244>)
 8002032:	2201      	movs	r2, #1
 8002034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002036:	f7ff fc5f 	bl	80018f8 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203e:	f7ff fc5b 	bl	80018f8 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e1a8      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002050:	4b2b      	ldr	r3, [pc, #172]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205c:	4b28      	ldr	r3, [pc, #160]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4925      	ldr	r1, [pc, #148]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]
 8002070:	e015      	b.n	800209e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002072:	4b24      	ldr	r3, [pc, #144]	@ (8002104 <HAL_RCC_OscConfig+0x244>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7ff fc3e 	bl	80018f8 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002080:	f7ff fc3a 	bl	80018f8 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e187      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002092:	4b1b      	ldr	r3, [pc, #108]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d036      	beq.n	8002118 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d016      	beq.n	80020e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b2:	4b15      	ldr	r3, [pc, #84]	@ (8002108 <HAL_RCC_OscConfig+0x248>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b8:	f7ff fc1e 	bl	80018f8 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c0:	f7ff fc1a 	bl	80018f8 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e167      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 80020d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x200>
 80020de:	e01b      	b.n	8002118 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e0:	4b09      	ldr	r3, [pc, #36]	@ (8002108 <HAL_RCC_OscConfig+0x248>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e6:	f7ff fc07 	bl	80018f8 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ec:	e00e      	b.n	800210c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ee:	f7ff fc03 	bl	80018f8 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d907      	bls.n	800210c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e150      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
 8002100:	40023800 	.word	0x40023800
 8002104:	42470000 	.word	0x42470000
 8002108:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210c:	4b88      	ldr	r3, [pc, #544]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 800210e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1ea      	bne.n	80020ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 8097 	beq.w	8002254 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212a:	4b81      	ldr	r3, [pc, #516]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10f      	bne.n	8002156 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	4b7d      	ldr	r3, [pc, #500]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213e:	4a7c      	ldr	r2, [pc, #496]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 8002140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002144:	6413      	str	r3, [r2, #64]	@ 0x40
 8002146:	4b7a      	ldr	r3, [pc, #488]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002152:	2301      	movs	r3, #1
 8002154:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002156:	4b77      	ldr	r3, [pc, #476]	@ (8002334 <HAL_RCC_OscConfig+0x474>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d118      	bne.n	8002194 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002162:	4b74      	ldr	r3, [pc, #464]	@ (8002334 <HAL_RCC_OscConfig+0x474>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a73      	ldr	r2, [pc, #460]	@ (8002334 <HAL_RCC_OscConfig+0x474>)
 8002168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800216c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216e:	f7ff fbc3 	bl	80018f8 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002176:	f7ff fbbf 	bl	80018f8 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e10c      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002188:	4b6a      	ldr	r3, [pc, #424]	@ (8002334 <HAL_RCC_OscConfig+0x474>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0f0      	beq.n	8002176 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d106      	bne.n	80021aa <HAL_RCC_OscConfig+0x2ea>
 800219c:	4b64      	ldr	r3, [pc, #400]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a0:	4a63      	ldr	r2, [pc, #396]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80021a8:	e01c      	b.n	80021e4 <HAL_RCC_OscConfig+0x324>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b05      	cmp	r3, #5
 80021b0:	d10c      	bne.n	80021cc <HAL_RCC_OscConfig+0x30c>
 80021b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b6:	4a5e      	ldr	r2, [pc, #376]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 80021b8:	f043 0304 	orr.w	r3, r3, #4
 80021bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80021be:	4b5c      	ldr	r3, [pc, #368]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c2:	4a5b      	ldr	r2, [pc, #364]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80021ca:	e00b      	b.n	80021e4 <HAL_RCC_OscConfig+0x324>
 80021cc:	4b58      	ldr	r3, [pc, #352]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 80021ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d0:	4a57      	ldr	r2, [pc, #348]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 80021d2:	f023 0301 	bic.w	r3, r3, #1
 80021d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80021d8:	4b55      	ldr	r3, [pc, #340]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 80021da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021dc:	4a54      	ldr	r2, [pc, #336]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 80021de:	f023 0304 	bic.w	r3, r3, #4
 80021e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d015      	beq.n	8002218 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ec:	f7ff fb84 	bl	80018f8 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f2:	e00a      	b.n	800220a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f4:	f7ff fb80 	bl	80018f8 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e0cb      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220a:	4b49      	ldr	r3, [pc, #292]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 800220c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0ee      	beq.n	80021f4 <HAL_RCC_OscConfig+0x334>
 8002216:	e014      	b.n	8002242 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002218:	f7ff fb6e 	bl	80018f8 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221e:	e00a      	b.n	8002236 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002220:	f7ff fb6a 	bl	80018f8 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e0b5      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002236:	4b3e      	ldr	r3, [pc, #248]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 8002238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1ee      	bne.n	8002220 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002242:	7dfb      	ldrb	r3, [r7, #23]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d105      	bne.n	8002254 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002248:	4b39      	ldr	r3, [pc, #228]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 800224a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224c:	4a38      	ldr	r2, [pc, #224]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 800224e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002252:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80a1 	beq.w	80023a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800225e:	4b34      	ldr	r3, [pc, #208]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b08      	cmp	r3, #8
 8002268:	d05c      	beq.n	8002324 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d141      	bne.n	80022f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002272:	4b31      	ldr	r3, [pc, #196]	@ (8002338 <HAL_RCC_OscConfig+0x478>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7ff fb3e 	bl	80018f8 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002280:	f7ff fb3a 	bl	80018f8 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e087      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002292:	4b27      	ldr	r3, [pc, #156]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69da      	ldr	r2, [r3, #28]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ac:	019b      	lsls	r3, r3, #6
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b4:	085b      	lsrs	r3, r3, #1
 80022b6:	3b01      	subs	r3, #1
 80022b8:	041b      	lsls	r3, r3, #16
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c0:	061b      	lsls	r3, r3, #24
 80022c2:	491b      	ldr	r1, [pc, #108]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002338 <HAL_RCC_OscConfig+0x478>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ce:	f7ff fb13 	bl	80018f8 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d6:	f7ff fb0f 	bl	80018f8 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e05c      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e8:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x416>
 80022f4:	e054      	b.n	80023a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f6:	4b10      	ldr	r3, [pc, #64]	@ (8002338 <HAL_RCC_OscConfig+0x478>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7ff fafc 	bl	80018f8 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002304:	f7ff faf8 	bl	80018f8 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e045      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002316:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x444>
 8002322:	e03d      	b.n	80023a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d107      	bne.n	800233c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e038      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
 8002330:	40023800 	.word	0x40023800
 8002334:	40007000 	.word	0x40007000
 8002338:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800233c:	4b1b      	ldr	r3, [pc, #108]	@ (80023ac <HAL_RCC_OscConfig+0x4ec>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d028      	beq.n	800239c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002354:	429a      	cmp	r2, r3
 8002356:	d121      	bne.n	800239c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002362:	429a      	cmp	r2, r3
 8002364:	d11a      	bne.n	800239c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800236c:	4013      	ands	r3, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002372:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002374:	4293      	cmp	r3, r2
 8002376:	d111      	bne.n	800239c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002382:	085b      	lsrs	r3, r3, #1
 8002384:	3b01      	subs	r3, #1
 8002386:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002388:	429a      	cmp	r2, r3
 800238a:	d107      	bne.n	800239c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002396:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800

080023b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0cc      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023c4:	4b68      	ldr	r3, [pc, #416]	@ (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d90c      	bls.n	80023ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d2:	4b65      	ldr	r3, [pc, #404]	@ (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b63      	ldr	r3, [pc, #396]	@ (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0b8      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d020      	beq.n	800243a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002404:	4b59      	ldr	r3, [pc, #356]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4a58      	ldr	r2, [pc, #352]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800240e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800241c:	4b53      	ldr	r3, [pc, #332]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4a52      	ldr	r2, [pc, #328]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002426:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002428:	4b50      	ldr	r3, [pc, #320]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	494d      	ldr	r1, [pc, #308]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d044      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244e:	4b47      	ldr	r3, [pc, #284]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d119      	bne.n	800248e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e07f      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d003      	beq.n	800246e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800246a:	2b03      	cmp	r3, #3
 800246c:	d107      	bne.n	800247e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800246e:	4b3f      	ldr	r3, [pc, #252]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d109      	bne.n	800248e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e06f      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247e:	4b3b      	ldr	r3, [pc, #236]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e067      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800248e:	4b37      	ldr	r3, [pc, #220]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f023 0203 	bic.w	r2, r3, #3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4934      	ldr	r1, [pc, #208]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	4313      	orrs	r3, r2
 800249e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a0:	f7ff fa2a 	bl	80018f8 <HAL_GetTick>
 80024a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a6:	e00a      	b.n	80024be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a8:	f7ff fa26 	bl	80018f8 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e04f      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024be:	4b2b      	ldr	r3, [pc, #172]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 020c 	and.w	r2, r3, #12
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d1eb      	bne.n	80024a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024d0:	4b25      	ldr	r3, [pc, #148]	@ (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d20c      	bcs.n	80024f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024de:	4b22      	ldr	r3, [pc, #136]	@ (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b20      	ldr	r3, [pc, #128]	@ (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e032      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002504:	4b19      	ldr	r3, [pc, #100]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4916      	ldr	r1, [pc, #88]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002522:	4b12      	ldr	r3, [pc, #72]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	490e      	ldr	r1, [pc, #56]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002536:	f000 f821 	bl	800257c <HAL_RCC_GetSysClockFreq>
 800253a:	4602      	mov	r2, r0
 800253c:	4b0b      	ldr	r3, [pc, #44]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	490a      	ldr	r1, [pc, #40]	@ (8002570 <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	5ccb      	ldrb	r3, [r1, r3]
 800254a:	fa22 f303 	lsr.w	r3, r2, r3
 800254e:	4a09      	ldr	r2, [pc, #36]	@ (8002574 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002552:	4b09      	ldr	r3, [pc, #36]	@ (8002578 <HAL_RCC_ClockConfig+0x1c8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff f98a 	bl	8001870 <HAL_InitTick>

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40023c00 	.word	0x40023c00
 800256c:	40023800 	.word	0x40023800
 8002570:	08006d44 	.word	0x08006d44
 8002574:	20000000 	.word	0x20000000
 8002578:	20000004 	.word	0x20000004

0800257c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800257c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002580:	b094      	sub	sp, #80	@ 0x50
 8002582:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002594:	4b79      	ldr	r3, [pc, #484]	@ (800277c <HAL_RCC_GetSysClockFreq+0x200>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 030c 	and.w	r3, r3, #12
 800259c:	2b08      	cmp	r3, #8
 800259e:	d00d      	beq.n	80025bc <HAL_RCC_GetSysClockFreq+0x40>
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	f200 80e1 	bhi.w	8002768 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0x34>
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d003      	beq.n	80025b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80025ae:	e0db      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025b0:	4b73      	ldr	r3, [pc, #460]	@ (8002780 <HAL_RCC_GetSysClockFreq+0x204>)
 80025b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025b4:	e0db      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025b6:	4b73      	ldr	r3, [pc, #460]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x208>)
 80025b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025ba:	e0d8      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025bc:	4b6f      	ldr	r3, [pc, #444]	@ (800277c <HAL_RCC_GetSysClockFreq+0x200>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025c6:	4b6d      	ldr	r3, [pc, #436]	@ (800277c <HAL_RCC_GetSysClockFreq+0x200>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d063      	beq.n	800269a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d2:	4b6a      	ldr	r3, [pc, #424]	@ (800277c <HAL_RCC_GetSysClockFreq+0x200>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	099b      	lsrs	r3, r3, #6
 80025d8:	2200      	movs	r2, #0
 80025da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80025de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80025e6:	2300      	movs	r3, #0
 80025e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80025ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025ee:	4622      	mov	r2, r4
 80025f0:	462b      	mov	r3, r5
 80025f2:	f04f 0000 	mov.w	r0, #0
 80025f6:	f04f 0100 	mov.w	r1, #0
 80025fa:	0159      	lsls	r1, r3, #5
 80025fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002600:	0150      	lsls	r0, r2, #5
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4621      	mov	r1, r4
 8002608:	1a51      	subs	r1, r2, r1
 800260a:	6139      	str	r1, [r7, #16]
 800260c:	4629      	mov	r1, r5
 800260e:	eb63 0301 	sbc.w	r3, r3, r1
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002620:	4659      	mov	r1, fp
 8002622:	018b      	lsls	r3, r1, #6
 8002624:	4651      	mov	r1, sl
 8002626:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800262a:	4651      	mov	r1, sl
 800262c:	018a      	lsls	r2, r1, #6
 800262e:	4651      	mov	r1, sl
 8002630:	ebb2 0801 	subs.w	r8, r2, r1
 8002634:	4659      	mov	r1, fp
 8002636:	eb63 0901 	sbc.w	r9, r3, r1
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002646:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800264a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800264e:	4690      	mov	r8, r2
 8002650:	4699      	mov	r9, r3
 8002652:	4623      	mov	r3, r4
 8002654:	eb18 0303 	adds.w	r3, r8, r3
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	462b      	mov	r3, r5
 800265c:	eb49 0303 	adc.w	r3, r9, r3
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800266e:	4629      	mov	r1, r5
 8002670:	024b      	lsls	r3, r1, #9
 8002672:	4621      	mov	r1, r4
 8002674:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002678:	4621      	mov	r1, r4
 800267a:	024a      	lsls	r2, r1, #9
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002682:	2200      	movs	r2, #0
 8002684:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002686:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002688:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800268c:	f7fe fa8c 	bl	8000ba8 <__aeabi_uldivmod>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4613      	mov	r3, r2
 8002696:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002698:	e058      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800269a:	4b38      	ldr	r3, [pc, #224]	@ (800277c <HAL_RCC_GetSysClockFreq+0x200>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	099b      	lsrs	r3, r3, #6
 80026a0:	2200      	movs	r2, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	4611      	mov	r1, r2
 80026a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026aa:	623b      	str	r3, [r7, #32]
 80026ac:	2300      	movs	r3, #0
 80026ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80026b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026b4:	4642      	mov	r2, r8
 80026b6:	464b      	mov	r3, r9
 80026b8:	f04f 0000 	mov.w	r0, #0
 80026bc:	f04f 0100 	mov.w	r1, #0
 80026c0:	0159      	lsls	r1, r3, #5
 80026c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026c6:	0150      	lsls	r0, r2, #5
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4641      	mov	r1, r8
 80026ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80026d2:	4649      	mov	r1, r9
 80026d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026ec:	ebb2 040a 	subs.w	r4, r2, sl
 80026f0:	eb63 050b 	sbc.w	r5, r3, fp
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	00eb      	lsls	r3, r5, #3
 80026fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002702:	00e2      	lsls	r2, r4, #3
 8002704:	4614      	mov	r4, r2
 8002706:	461d      	mov	r5, r3
 8002708:	4643      	mov	r3, r8
 800270a:	18e3      	adds	r3, r4, r3
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	464b      	mov	r3, r9
 8002710:	eb45 0303 	adc.w	r3, r5, r3
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002722:	4629      	mov	r1, r5
 8002724:	028b      	lsls	r3, r1, #10
 8002726:	4621      	mov	r1, r4
 8002728:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800272c:	4621      	mov	r1, r4
 800272e:	028a      	lsls	r2, r1, #10
 8002730:	4610      	mov	r0, r2
 8002732:	4619      	mov	r1, r3
 8002734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002736:	2200      	movs	r2, #0
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	61fa      	str	r2, [r7, #28]
 800273c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002740:	f7fe fa32 	bl	8000ba8 <__aeabi_uldivmod>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4613      	mov	r3, r2
 800274a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800274c:	4b0b      	ldr	r3, [pc, #44]	@ (800277c <HAL_RCC_GetSysClockFreq+0x200>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	0c1b      	lsrs	r3, r3, #16
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	3301      	adds	r3, #1
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800275c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800275e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002760:	fbb2 f3f3 	udiv	r3, r2, r3
 8002764:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002766:	e002      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002768:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <HAL_RCC_GetSysClockFreq+0x204>)
 800276a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800276c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800276e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002770:	4618      	mov	r0, r3
 8002772:	3750      	adds	r7, #80	@ 0x50
 8002774:	46bd      	mov	sp, r7
 8002776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800
 8002780:	00f42400 	.word	0x00f42400
 8002784:	007a1200 	.word	0x007a1200

08002788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800278c:	4b03      	ldr	r3, [pc, #12]	@ (800279c <HAL_RCC_GetHCLKFreq+0x14>)
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20000000 	.word	0x20000000

080027a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027a4:	f7ff fff0 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027a8:	4602      	mov	r2, r0
 80027aa:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	0a9b      	lsrs	r3, r3, #10
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	4903      	ldr	r1, [pc, #12]	@ (80027c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b6:	5ccb      	ldrb	r3, [r1, r3]
 80027b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40023800 	.word	0x40023800
 80027c4:	08006d54 	.word	0x08006d54

080027c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027cc:	f7ff ffdc 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027d0:	4602      	mov	r2, r0
 80027d2:	4b05      	ldr	r3, [pc, #20]	@ (80027e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	0b5b      	lsrs	r3, r3, #13
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	4903      	ldr	r1, [pc, #12]	@ (80027ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80027de:	5ccb      	ldrb	r3, [r1, r3]
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40023800 	.word	0x40023800
 80027ec:	08006d54 	.word	0x08006d54

080027f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e041      	b.n	8002886 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d106      	bne.n	800281c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7fe fdf6 	bl	8001408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2202      	movs	r2, #2
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3304      	adds	r3, #4
 800282c:	4619      	mov	r1, r3
 800282e:	4610      	mov	r0, r2
 8002830:	f000 fc8e 	bl	8003150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d001      	beq.n	80028a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e046      	b.n	8002936 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a23      	ldr	r2, [pc, #140]	@ (8002944 <HAL_TIM_Base_Start+0xb4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d022      	beq.n	8002900 <HAL_TIM_Base_Start+0x70>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028c2:	d01d      	beq.n	8002900 <HAL_TIM_Base_Start+0x70>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002948 <HAL_TIM_Base_Start+0xb8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d018      	beq.n	8002900 <HAL_TIM_Base_Start+0x70>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a1e      	ldr	r2, [pc, #120]	@ (800294c <HAL_TIM_Base_Start+0xbc>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d013      	beq.n	8002900 <HAL_TIM_Base_Start+0x70>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002950 <HAL_TIM_Base_Start+0xc0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d00e      	beq.n	8002900 <HAL_TIM_Base_Start+0x70>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002954 <HAL_TIM_Base_Start+0xc4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d009      	beq.n	8002900 <HAL_TIM_Base_Start+0x70>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a19      	ldr	r2, [pc, #100]	@ (8002958 <HAL_TIM_Base_Start+0xc8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d004      	beq.n	8002900 <HAL_TIM_Base_Start+0x70>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a18      	ldr	r2, [pc, #96]	@ (800295c <HAL_TIM_Base_Start+0xcc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d111      	bne.n	8002924 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2b06      	cmp	r3, #6
 8002910:	d010      	beq.n	8002934 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0201 	orr.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002922:	e007      	b.n	8002934 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0201 	orr.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40010000 	.word	0x40010000
 8002948:	40000400 	.word	0x40000400
 800294c:	40000800 	.word	0x40000800
 8002950:	40000c00 	.word	0x40000c00
 8002954:	40010400 	.word	0x40010400
 8002958:	40014000 	.word	0x40014000
 800295c:	40001800 	.word	0x40001800

08002960 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e041      	b.n	80029f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f839 	bl	80029fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3304      	adds	r3, #4
 800299c:	4619      	mov	r1, r3
 800299e:	4610      	mov	r0, r2
 80029a0:	f000 fbd6 	bl	8003150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d109      	bne.n	8002a38 <HAL_TIM_PWM_Start+0x24>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	bf14      	ite	ne
 8002a30:	2301      	movne	r3, #1
 8002a32:	2300      	moveq	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	e022      	b.n	8002a7e <HAL_TIM_PWM_Start+0x6a>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d109      	bne.n	8002a52 <HAL_TIM_PWM_Start+0x3e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	bf14      	ite	ne
 8002a4a:	2301      	movne	r3, #1
 8002a4c:	2300      	moveq	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	e015      	b.n	8002a7e <HAL_TIM_PWM_Start+0x6a>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d109      	bne.n	8002a6c <HAL_TIM_PWM_Start+0x58>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	bf14      	ite	ne
 8002a64:	2301      	movne	r3, #1
 8002a66:	2300      	moveq	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	e008      	b.n	8002a7e <HAL_TIM_PWM_Start+0x6a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	bf14      	ite	ne
 8002a78:	2301      	movne	r3, #1
 8002a7a:	2300      	moveq	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e07c      	b.n	8002b80 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d104      	bne.n	8002a96 <HAL_TIM_PWM_Start+0x82>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a94:	e013      	b.n	8002abe <HAL_TIM_PWM_Start+0xaa>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d104      	bne.n	8002aa6 <HAL_TIM_PWM_Start+0x92>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002aa4:	e00b      	b.n	8002abe <HAL_TIM_PWM_Start+0xaa>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d104      	bne.n	8002ab6 <HAL_TIM_PWM_Start+0xa2>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ab4:	e003      	b.n	8002abe <HAL_TIM_PWM_Start+0xaa>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	6839      	ldr	r1, [r7, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 ffd9 	bl	8003a7e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8002b88 <HAL_TIM_PWM_Start+0x174>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d004      	beq.n	8002ae0 <HAL_TIM_PWM_Start+0xcc>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a2c      	ldr	r2, [pc, #176]	@ (8002b8c <HAL_TIM_PWM_Start+0x178>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d101      	bne.n	8002ae4 <HAL_TIM_PWM_Start+0xd0>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <HAL_TIM_PWM_Start+0xd2>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d007      	beq.n	8002afa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002af8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a22      	ldr	r2, [pc, #136]	@ (8002b88 <HAL_TIM_PWM_Start+0x174>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d022      	beq.n	8002b4a <HAL_TIM_PWM_Start+0x136>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b0c:	d01d      	beq.n	8002b4a <HAL_TIM_PWM_Start+0x136>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a1f      	ldr	r2, [pc, #124]	@ (8002b90 <HAL_TIM_PWM_Start+0x17c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d018      	beq.n	8002b4a <HAL_TIM_PWM_Start+0x136>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8002b94 <HAL_TIM_PWM_Start+0x180>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d013      	beq.n	8002b4a <HAL_TIM_PWM_Start+0x136>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a1c      	ldr	r2, [pc, #112]	@ (8002b98 <HAL_TIM_PWM_Start+0x184>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d00e      	beq.n	8002b4a <HAL_TIM_PWM_Start+0x136>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a16      	ldr	r2, [pc, #88]	@ (8002b8c <HAL_TIM_PWM_Start+0x178>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d009      	beq.n	8002b4a <HAL_TIM_PWM_Start+0x136>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a18      	ldr	r2, [pc, #96]	@ (8002b9c <HAL_TIM_PWM_Start+0x188>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d004      	beq.n	8002b4a <HAL_TIM_PWM_Start+0x136>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a16      	ldr	r2, [pc, #88]	@ (8002ba0 <HAL_TIM_PWM_Start+0x18c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d111      	bne.n	8002b6e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b06      	cmp	r3, #6
 8002b5a:	d010      	beq.n	8002b7e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0201 	orr.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b6c:	e007      	b.n	8002b7e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 0201 	orr.w	r2, r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40010000 	.word	0x40010000
 8002b8c:	40010400 	.word	0x40010400
 8002b90:	40000400 	.word	0x40000400
 8002b94:	40000800 	.word	0x40000800
 8002b98:	40000c00 	.word	0x40000c00
 8002b9c:	40014000 	.word	0x40014000
 8002ba0:	40001800 	.word	0x40001800

08002ba4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e041      	b.n	8002c3a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d106      	bne.n	8002bd0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f839 	bl	8002c42 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3304      	adds	r3, #4
 8002be0:	4619      	mov	r1, r3
 8002be2:	4610      	mov	r0, r2
 8002be4:	f000 fab4 	bl	8003150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d104      	bne.n	8002c72 <HAL_TIM_IC_Start+0x1a>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	e013      	b.n	8002c9a <HAL_TIM_IC_Start+0x42>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d104      	bne.n	8002c82 <HAL_TIM_IC_Start+0x2a>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	e00b      	b.n	8002c9a <HAL_TIM_IC_Start+0x42>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d104      	bne.n	8002c92 <HAL_TIM_IC_Start+0x3a>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	e003      	b.n	8002c9a <HAL_TIM_IC_Start+0x42>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d104      	bne.n	8002cac <HAL_TIM_IC_Start+0x54>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	e013      	b.n	8002cd4 <HAL_TIM_IC_Start+0x7c>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d104      	bne.n	8002cbc <HAL_TIM_IC_Start+0x64>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	e00b      	b.n	8002cd4 <HAL_TIM_IC_Start+0x7c>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d104      	bne.n	8002ccc <HAL_TIM_IC_Start+0x74>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	e003      	b.n	8002cd4 <HAL_TIM_IC_Start+0x7c>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d102      	bne.n	8002ce2 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002cdc:	7bbb      	ldrb	r3, [r7, #14]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d001      	beq.n	8002ce6 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e081      	b.n	8002dea <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d104      	bne.n	8002cf6 <HAL_TIM_IC_Start+0x9e>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cf4:	e013      	b.n	8002d1e <HAL_TIM_IC_Start+0xc6>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d104      	bne.n	8002d06 <HAL_TIM_IC_Start+0xae>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d04:	e00b      	b.n	8002d1e <HAL_TIM_IC_Start+0xc6>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d104      	bne.n	8002d16 <HAL_TIM_IC_Start+0xbe>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d14:	e003      	b.n	8002d1e <HAL_TIM_IC_Start+0xc6>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d104      	bne.n	8002d2e <HAL_TIM_IC_Start+0xd6>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d2c:	e013      	b.n	8002d56 <HAL_TIM_IC_Start+0xfe>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d104      	bne.n	8002d3e <HAL_TIM_IC_Start+0xe6>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d3c:	e00b      	b.n	8002d56 <HAL_TIM_IC_Start+0xfe>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d104      	bne.n	8002d4e <HAL_TIM_IC_Start+0xf6>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d4c:	e003      	b.n	8002d56 <HAL_TIM_IC_Start+0xfe>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2202      	movs	r2, #2
 8002d52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	6839      	ldr	r1, [r7, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fe8d 	bl	8003a7e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a22      	ldr	r2, [pc, #136]	@ (8002df4 <HAL_TIM_IC_Start+0x19c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d022      	beq.n	8002db4 <HAL_TIM_IC_Start+0x15c>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d76:	d01d      	beq.n	8002db4 <HAL_TIM_IC_Start+0x15c>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8002df8 <HAL_TIM_IC_Start+0x1a0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d018      	beq.n	8002db4 <HAL_TIM_IC_Start+0x15c>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1d      	ldr	r2, [pc, #116]	@ (8002dfc <HAL_TIM_IC_Start+0x1a4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d013      	beq.n	8002db4 <HAL_TIM_IC_Start+0x15c>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1b      	ldr	r2, [pc, #108]	@ (8002e00 <HAL_TIM_IC_Start+0x1a8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00e      	beq.n	8002db4 <HAL_TIM_IC_Start+0x15c>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1a      	ldr	r2, [pc, #104]	@ (8002e04 <HAL_TIM_IC_Start+0x1ac>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d009      	beq.n	8002db4 <HAL_TIM_IC_Start+0x15c>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a18      	ldr	r2, [pc, #96]	@ (8002e08 <HAL_TIM_IC_Start+0x1b0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d004      	beq.n	8002db4 <HAL_TIM_IC_Start+0x15c>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a17      	ldr	r2, [pc, #92]	@ (8002e0c <HAL_TIM_IC_Start+0x1b4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d111      	bne.n	8002dd8 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d010      	beq.n	8002de8 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 0201 	orr.w	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd6:	e007      	b.n	8002de8 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40010000 	.word	0x40010000
 8002df8:	40000400 	.word	0x40000400
 8002dfc:	40000800 	.word	0x40000800
 8002e00:	40000c00 	.word	0x40000c00
 8002e04:	40010400 	.word	0x40010400
 8002e08:	40014000 	.word	0x40014000
 8002e0c:	40001800 	.word	0x40001800

08002e10 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_TIM_IC_ConfigChannel+0x1e>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e088      	b.n	8002f40 <HAL_TIM_IC_ConfigChannel+0x130>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d11b      	bne.n	8002e74 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002e4c:	f000 fc6e 	bl	800372c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 020c 	bic.w	r2, r2, #12
 8002e5e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6999      	ldr	r1, [r3, #24]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	619a      	str	r2, [r3, #24]
 8002e72:	e060      	b.n	8002f36 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d11c      	bne.n	8002eb4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002e8a:	f000 fcf2 	bl	8003872 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699a      	ldr	r2, [r3, #24]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002e9c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6999      	ldr	r1, [r3, #24]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	021a      	lsls	r2, r3, #8
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	619a      	str	r2, [r3, #24]
 8002eb2:	e040      	b.n	8002f36 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d11b      	bne.n	8002ef2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002eca:	f000 fd3f 	bl	800394c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	69da      	ldr	r2, [r3, #28]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 020c 	bic.w	r2, r2, #12
 8002edc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69d9      	ldr	r1, [r3, #28]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	61da      	str	r2, [r3, #28]
 8002ef0:	e021      	b.n	8002f36 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b0c      	cmp	r3, #12
 8002ef6:	d11c      	bne.n	8002f32 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002f08:	f000 fd5c 	bl	80039c4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	69da      	ldr	r2, [r3, #28]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002f1a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	69d9      	ldr	r1, [r3, #28]
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	021a      	lsls	r2, r3, #8
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	61da      	str	r2, [r3, #28]
 8002f30:	e001      	b.n	8002f36 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e0ae      	b.n	80030c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b0c      	cmp	r3, #12
 8002f72:	f200 809f 	bhi.w	80030b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f76:	a201      	add	r2, pc, #4	@ (adr r2, 8002f7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7c:	08002fb1 	.word	0x08002fb1
 8002f80:	080030b5 	.word	0x080030b5
 8002f84:	080030b5 	.word	0x080030b5
 8002f88:	080030b5 	.word	0x080030b5
 8002f8c:	08002ff1 	.word	0x08002ff1
 8002f90:	080030b5 	.word	0x080030b5
 8002f94:	080030b5 	.word	0x080030b5
 8002f98:	080030b5 	.word	0x080030b5
 8002f9c:	08003033 	.word	0x08003033
 8002fa0:	080030b5 	.word	0x080030b5
 8002fa4:	080030b5 	.word	0x080030b5
 8002fa8:	080030b5 	.word	0x080030b5
 8002fac:	08003073 	.word	0x08003073
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 f976 	bl	80032a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699a      	ldr	r2, [r3, #24]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0208 	orr.w	r2, r2, #8
 8002fca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0204 	bic.w	r2, r2, #4
 8002fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6999      	ldr	r1, [r3, #24]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	691a      	ldr	r2, [r3, #16]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	619a      	str	r2, [r3, #24]
      break;
 8002fee:	e064      	b.n	80030ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68b9      	ldr	r1, [r7, #8]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 f9c6 	bl	8003388 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699a      	ldr	r2, [r3, #24]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800300a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699a      	ldr	r2, [r3, #24]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800301a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6999      	ldr	r1, [r3, #24]
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	021a      	lsls	r2, r3, #8
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	619a      	str	r2, [r3, #24]
      break;
 8003030:	e043      	b.n	80030ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68b9      	ldr	r1, [r7, #8]
 8003038:	4618      	mov	r0, r3
 800303a:	f000 fa1b 	bl	8003474 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	69da      	ldr	r2, [r3, #28]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 0208 	orr.w	r2, r2, #8
 800304c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69da      	ldr	r2, [r3, #28]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0204 	bic.w	r2, r2, #4
 800305c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	69d9      	ldr	r1, [r3, #28]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	61da      	str	r2, [r3, #28]
      break;
 8003070:	e023      	b.n	80030ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68b9      	ldr	r1, [r7, #8]
 8003078:	4618      	mov	r0, r3
 800307a:	f000 fa6f 	bl	800355c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	69da      	ldr	r2, [r3, #28]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800308c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	69da      	ldr	r2, [r3, #28]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800309c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69d9      	ldr	r1, [r3, #28]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	021a      	lsls	r2, r3, #8
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	61da      	str	r2, [r3, #28]
      break;
 80030b2:	e002      	b.n	80030ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	75fb      	strb	r3, [r7, #23]
      break;
 80030b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e031      	b.n	8003148 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80030f4:	6839      	ldr	r1, [r7, #0]
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fa86 	bl	8003608 <TIM_SlaveTimer_SetConfig>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d009      	beq.n	8003116 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e018      	b.n	8003148 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003124:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003134:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a46      	ldr	r2, [pc, #280]	@ (800327c <TIM_Base_SetConfig+0x12c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d013      	beq.n	8003190 <TIM_Base_SetConfig+0x40>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800316e:	d00f      	beq.n	8003190 <TIM_Base_SetConfig+0x40>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a43      	ldr	r2, [pc, #268]	@ (8003280 <TIM_Base_SetConfig+0x130>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d00b      	beq.n	8003190 <TIM_Base_SetConfig+0x40>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a42      	ldr	r2, [pc, #264]	@ (8003284 <TIM_Base_SetConfig+0x134>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d007      	beq.n	8003190 <TIM_Base_SetConfig+0x40>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a41      	ldr	r2, [pc, #260]	@ (8003288 <TIM_Base_SetConfig+0x138>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d003      	beq.n	8003190 <TIM_Base_SetConfig+0x40>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a40      	ldr	r2, [pc, #256]	@ (800328c <TIM_Base_SetConfig+0x13c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d108      	bne.n	80031a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a35      	ldr	r2, [pc, #212]	@ (800327c <TIM_Base_SetConfig+0x12c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d02b      	beq.n	8003202 <TIM_Base_SetConfig+0xb2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031b0:	d027      	beq.n	8003202 <TIM_Base_SetConfig+0xb2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a32      	ldr	r2, [pc, #200]	@ (8003280 <TIM_Base_SetConfig+0x130>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d023      	beq.n	8003202 <TIM_Base_SetConfig+0xb2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a31      	ldr	r2, [pc, #196]	@ (8003284 <TIM_Base_SetConfig+0x134>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d01f      	beq.n	8003202 <TIM_Base_SetConfig+0xb2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a30      	ldr	r2, [pc, #192]	@ (8003288 <TIM_Base_SetConfig+0x138>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d01b      	beq.n	8003202 <TIM_Base_SetConfig+0xb2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a2f      	ldr	r2, [pc, #188]	@ (800328c <TIM_Base_SetConfig+0x13c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d017      	beq.n	8003202 <TIM_Base_SetConfig+0xb2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a2e      	ldr	r2, [pc, #184]	@ (8003290 <TIM_Base_SetConfig+0x140>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d013      	beq.n	8003202 <TIM_Base_SetConfig+0xb2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003294 <TIM_Base_SetConfig+0x144>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00f      	beq.n	8003202 <TIM_Base_SetConfig+0xb2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003298 <TIM_Base_SetConfig+0x148>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00b      	beq.n	8003202 <TIM_Base_SetConfig+0xb2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a2b      	ldr	r2, [pc, #172]	@ (800329c <TIM_Base_SetConfig+0x14c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d007      	beq.n	8003202 <TIM_Base_SetConfig+0xb2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a2a      	ldr	r2, [pc, #168]	@ (80032a0 <TIM_Base_SetConfig+0x150>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d003      	beq.n	8003202 <TIM_Base_SetConfig+0xb2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a29      	ldr	r2, [pc, #164]	@ (80032a4 <TIM_Base_SetConfig+0x154>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d108      	bne.n	8003214 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4313      	orrs	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	4313      	orrs	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a10      	ldr	r2, [pc, #64]	@ (800327c <TIM_Base_SetConfig+0x12c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d003      	beq.n	8003248 <TIM_Base_SetConfig+0xf8>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a12      	ldr	r2, [pc, #72]	@ (800328c <TIM_Base_SetConfig+0x13c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d103      	bne.n	8003250 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	691a      	ldr	r2, [r3, #16]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b01      	cmp	r3, #1
 8003260:	d105      	bne.n	800326e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f023 0201 	bic.w	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	611a      	str	r2, [r3, #16]
  }
}
 800326e:	bf00      	nop
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40010000 	.word	0x40010000
 8003280:	40000400 	.word	0x40000400
 8003284:	40000800 	.word	0x40000800
 8003288:	40000c00 	.word	0x40000c00
 800328c:	40010400 	.word	0x40010400
 8003290:	40014000 	.word	0x40014000
 8003294:	40014400 	.word	0x40014400
 8003298:	40014800 	.word	0x40014800
 800329c:	40001800 	.word	0x40001800
 80032a0:	40001c00 	.word	0x40001c00
 80032a4:	40002000 	.word	0x40002000

080032a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	f023 0201 	bic.w	r2, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f023 0303 	bic.w	r3, r3, #3
 80032de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f023 0302 	bic.w	r3, r3, #2
 80032f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a20      	ldr	r2, [pc, #128]	@ (8003380 <TIM_OC1_SetConfig+0xd8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d003      	beq.n	800330c <TIM_OC1_SetConfig+0x64>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a1f      	ldr	r2, [pc, #124]	@ (8003384 <TIM_OC1_SetConfig+0xdc>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d10c      	bne.n	8003326 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f023 0308 	bic.w	r3, r3, #8
 8003312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	4313      	orrs	r3, r2
 800331c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f023 0304 	bic.w	r3, r3, #4
 8003324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a15      	ldr	r2, [pc, #84]	@ (8003380 <TIM_OC1_SetConfig+0xd8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d003      	beq.n	8003336 <TIM_OC1_SetConfig+0x8e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a14      	ldr	r2, [pc, #80]	@ (8003384 <TIM_OC1_SetConfig+0xdc>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d111      	bne.n	800335a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800333c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	621a      	str	r2, [r3, #32]
}
 8003374:	bf00      	nop
 8003376:	371c      	adds	r7, #28
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	40010000 	.word	0x40010000
 8003384:	40010400 	.word	0x40010400

08003388 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	f023 0210 	bic.w	r2, r3, #16
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	021b      	lsls	r3, r3, #8
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f023 0320 	bic.w	r3, r3, #32
 80033d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a22      	ldr	r2, [pc, #136]	@ (800346c <TIM_OC2_SetConfig+0xe4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d003      	beq.n	80033f0 <TIM_OC2_SetConfig+0x68>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a21      	ldr	r2, [pc, #132]	@ (8003470 <TIM_OC2_SetConfig+0xe8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d10d      	bne.n	800340c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800340a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a17      	ldr	r2, [pc, #92]	@ (800346c <TIM_OC2_SetConfig+0xe4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d003      	beq.n	800341c <TIM_OC2_SetConfig+0x94>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a16      	ldr	r2, [pc, #88]	@ (8003470 <TIM_OC2_SetConfig+0xe8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d113      	bne.n	8003444 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003422:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800342a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	621a      	str	r2, [r3, #32]
}
 800345e:	bf00      	nop
 8003460:	371c      	adds	r7, #28
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40010000 	.word	0x40010000
 8003470:	40010400 	.word	0x40010400

08003474 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0303 	bic.w	r3, r3, #3
 80034aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a21      	ldr	r2, [pc, #132]	@ (8003554 <TIM_OC3_SetConfig+0xe0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d003      	beq.n	80034da <TIM_OC3_SetConfig+0x66>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a20      	ldr	r2, [pc, #128]	@ (8003558 <TIM_OC3_SetConfig+0xe4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d10d      	bne.n	80034f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	021b      	lsls	r3, r3, #8
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a16      	ldr	r2, [pc, #88]	@ (8003554 <TIM_OC3_SetConfig+0xe0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d003      	beq.n	8003506 <TIM_OC3_SetConfig+0x92>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a15      	ldr	r2, [pc, #84]	@ (8003558 <TIM_OC3_SetConfig+0xe4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d113      	bne.n	800352e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800350c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	621a      	str	r2, [r3, #32]
}
 8003548:	bf00      	nop
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	40010000 	.word	0x40010000
 8003558:	40010400 	.word	0x40010400

0800355c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800358a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	021b      	lsls	r3, r3, #8
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	031b      	lsls	r3, r3, #12
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a12      	ldr	r2, [pc, #72]	@ (8003600 <TIM_OC4_SetConfig+0xa4>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d003      	beq.n	80035c4 <TIM_OC4_SetConfig+0x68>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a11      	ldr	r2, [pc, #68]	@ (8003604 <TIM_OC4_SetConfig+0xa8>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d109      	bne.n	80035d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	019b      	lsls	r3, r3, #6
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	621a      	str	r2, [r3, #32]
}
 80035f2:	bf00      	nop
 80035f4:	371c      	adds	r7, #28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40010000 	.word	0x40010000
 8003604:	40010400 	.word	0x40010400

08003608 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003624:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f023 0307 	bic.w	r3, r3, #7
 8003636:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4313      	orrs	r3, r2
 8003640:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b70      	cmp	r3, #112	@ 0x70
 8003650:	d01a      	beq.n	8003688 <TIM_SlaveTimer_SetConfig+0x80>
 8003652:	2b70      	cmp	r3, #112	@ 0x70
 8003654:	d860      	bhi.n	8003718 <TIM_SlaveTimer_SetConfig+0x110>
 8003656:	2b60      	cmp	r3, #96	@ 0x60
 8003658:	d054      	beq.n	8003704 <TIM_SlaveTimer_SetConfig+0xfc>
 800365a:	2b60      	cmp	r3, #96	@ 0x60
 800365c:	d85c      	bhi.n	8003718 <TIM_SlaveTimer_SetConfig+0x110>
 800365e:	2b50      	cmp	r3, #80	@ 0x50
 8003660:	d046      	beq.n	80036f0 <TIM_SlaveTimer_SetConfig+0xe8>
 8003662:	2b50      	cmp	r3, #80	@ 0x50
 8003664:	d858      	bhi.n	8003718 <TIM_SlaveTimer_SetConfig+0x110>
 8003666:	2b40      	cmp	r3, #64	@ 0x40
 8003668:	d019      	beq.n	800369e <TIM_SlaveTimer_SetConfig+0x96>
 800366a:	2b40      	cmp	r3, #64	@ 0x40
 800366c:	d854      	bhi.n	8003718 <TIM_SlaveTimer_SetConfig+0x110>
 800366e:	2b30      	cmp	r3, #48	@ 0x30
 8003670:	d055      	beq.n	800371e <TIM_SlaveTimer_SetConfig+0x116>
 8003672:	2b30      	cmp	r3, #48	@ 0x30
 8003674:	d850      	bhi.n	8003718 <TIM_SlaveTimer_SetConfig+0x110>
 8003676:	2b20      	cmp	r3, #32
 8003678:	d051      	beq.n	800371e <TIM_SlaveTimer_SetConfig+0x116>
 800367a:	2b20      	cmp	r3, #32
 800367c:	d84c      	bhi.n	8003718 <TIM_SlaveTimer_SetConfig+0x110>
 800367e:	2b00      	cmp	r3, #0
 8003680:	d04d      	beq.n	800371e <TIM_SlaveTimer_SetConfig+0x116>
 8003682:	2b10      	cmp	r3, #16
 8003684:	d04b      	beq.n	800371e <TIM_SlaveTimer_SetConfig+0x116>
 8003686:	e047      	b.n	8003718 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003698:	f000 f9d1 	bl	8003a3e <TIM_ETR_SetConfig>
      break;
 800369c:	e040      	b.n	8003720 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b05      	cmp	r3, #5
 80036a4:	d101      	bne.n	80036aa <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e03b      	b.n	8003722 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6a1a      	ldr	r2, [r3, #32]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0201 	bic.w	r2, r2, #1
 80036c0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036d0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	621a      	str	r2, [r3, #32]
      break;
 80036ee:	e017      	b.n	8003720 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036fc:	461a      	mov	r2, r3
 80036fe:	f000 f889 	bl	8003814 <TIM_TI1_ConfigInputStage>
      break;
 8003702:	e00d      	b.n	8003720 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003710:	461a      	mov	r2, r3
 8003712:	f000 f8eb 	bl	80038ec <TIM_TI2_ConfigInputStage>
      break;
 8003716:	e003      	b.n	8003720 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	75fb      	strb	r3, [r7, #23]
      break;
 800371c:	e000      	b.n	8003720 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800371e:	bf00      	nop
  }

  return status;
 8003720:	7dfb      	ldrb	r3, [r7, #23]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	f023 0201 	bic.w	r2, r3, #1
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4a28      	ldr	r2, [pc, #160]	@ (80037f8 <TIM_TI1_SetConfig+0xcc>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d01b      	beq.n	8003792 <TIM_TI1_SetConfig+0x66>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003760:	d017      	beq.n	8003792 <TIM_TI1_SetConfig+0x66>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	4a25      	ldr	r2, [pc, #148]	@ (80037fc <TIM_TI1_SetConfig+0xd0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d013      	beq.n	8003792 <TIM_TI1_SetConfig+0x66>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4a24      	ldr	r2, [pc, #144]	@ (8003800 <TIM_TI1_SetConfig+0xd4>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00f      	beq.n	8003792 <TIM_TI1_SetConfig+0x66>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4a23      	ldr	r2, [pc, #140]	@ (8003804 <TIM_TI1_SetConfig+0xd8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00b      	beq.n	8003792 <TIM_TI1_SetConfig+0x66>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4a22      	ldr	r2, [pc, #136]	@ (8003808 <TIM_TI1_SetConfig+0xdc>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d007      	beq.n	8003792 <TIM_TI1_SetConfig+0x66>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4a21      	ldr	r2, [pc, #132]	@ (800380c <TIM_TI1_SetConfig+0xe0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d003      	beq.n	8003792 <TIM_TI1_SetConfig+0x66>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4a20      	ldr	r2, [pc, #128]	@ (8003810 <TIM_TI1_SetConfig+0xe4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d101      	bne.n	8003796 <TIM_TI1_SetConfig+0x6a>
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <TIM_TI1_SetConfig+0x6c>
 8003796:	2300      	movs	r3, #0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f023 0303 	bic.w	r3, r3, #3
 80037a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	e003      	b.n	80037b6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f023 030a 	bic.w	r3, r3, #10
 80037d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f003 030a 	and.w	r3, r3, #10
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	621a      	str	r2, [r3, #32]
}
 80037ea:	bf00      	nop
 80037ec:	371c      	adds	r7, #28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40010000 	.word	0x40010000
 80037fc:	40000400 	.word	0x40000400
 8003800:	40000800 	.word	0x40000800
 8003804:	40000c00 	.word	0x40000c00
 8003808:	40010400 	.word	0x40010400
 800380c:	40014000 	.word	0x40014000
 8003810:	40001800 	.word	0x40001800

08003814 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	f023 0201 	bic.w	r2, r3, #1
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800383e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f023 030a 	bic.w	r3, r3, #10
 8003850:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4313      	orrs	r3, r2
 8003858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	621a      	str	r2, [r3, #32]
}
 8003866:	bf00      	nop
 8003868:	371c      	adds	r7, #28
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003872:	b480      	push	{r7}
 8003874:	b087      	sub	sp, #28
 8003876:	af00      	add	r7, sp, #0
 8003878:	60f8      	str	r0, [r7, #12]
 800387a:	60b9      	str	r1, [r7, #8]
 800387c:	607a      	str	r2, [r7, #4]
 800387e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	f023 0210 	bic.w	r2, r3, #16
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800389e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	021b      	lsls	r3, r3, #8
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	031b      	lsls	r3, r3, #12
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80038c4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	621a      	str	r2, [r3, #32]
}
 80038e0:	bf00      	nop
 80038e2:	371c      	adds	r7, #28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f023 0210 	bic.w	r2, r3, #16
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	031b      	lsls	r3, r3, #12
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003928:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4313      	orrs	r3, r2
 8003932:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	621a      	str	r2, [r3, #32]
}
 8003940:	bf00      	nop
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f023 0303 	bic.w	r3, r3, #3
 8003978:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003988:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	b2db      	uxtb	r3, r3
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800399c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	621a      	str	r2, [r3, #32]
}
 80039b8:	bf00      	nop
 80039ba:	371c      	adds	r7, #28
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039f0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a02:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	031b      	lsls	r3, r3, #12
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003a16:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	031b      	lsls	r3, r3, #12
 8003a1c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	621a      	str	r2, [r3, #32]
}
 8003a32:	bf00      	nop
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b087      	sub	sp, #28
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	607a      	str	r2, [r7, #4]
 8003a4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	021a      	lsls	r2, r3, #8
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	431a      	orrs	r2, r3
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	609a      	str	r2, [r3, #8]
}
 8003a72:	bf00      	nop
 8003a74:	371c      	adds	r7, #28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b087      	sub	sp, #28
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	2201      	movs	r2, #1
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a1a      	ldr	r2, [r3, #32]
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	401a      	ands	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a1a      	ldr	r2, [r3, #32]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	f003 031f 	and.w	r3, r3, #31
 8003ab0:	6879      	ldr	r1, [r7, #4]
 8003ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	621a      	str	r2, [r3, #32]
}
 8003abc:	bf00      	nop
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e05a      	b.n	8003b96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a21      	ldr	r2, [pc, #132]	@ (8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d022      	beq.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b2c:	d01d      	beq.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1d      	ldr	r2, [pc, #116]	@ (8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d018      	beq.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8003bac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a1a      	ldr	r2, [pc, #104]	@ (8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00e      	beq.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a18      	ldr	r2, [pc, #96]	@ (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d009      	beq.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a17      	ldr	r2, [pc, #92]	@ (8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d004      	beq.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a15      	ldr	r2, [pc, #84]	@ (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d10c      	bne.n	8003b84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40010000 	.word	0x40010000
 8003ba8:	40000400 	.word	0x40000400
 8003bac:	40000800 	.word	0x40000800
 8003bb0:	40000c00 	.word	0x40000c00
 8003bb4:	40010400 	.word	0x40010400
 8003bb8:	40014000 	.word	0x40014000
 8003bbc:	40001800 	.word	0x40001800

08003bc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e042      	b.n	8003c58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d106      	bne.n	8003bec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7fd fca6 	bl	8001538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2224      	movs	r2, #36	@ 0x24
 8003bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f973 	bl	8003ef0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	695a      	ldr	r2, [r3, #20]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08a      	sub	sp, #40	@ 0x28
 8003c64:	af02      	add	r7, sp, #8
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	d175      	bne.n	8003d6c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <HAL_UART_Transmit+0x2c>
 8003c86:	88fb      	ldrh	r3, [r7, #6]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e06e      	b.n	8003d6e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2221      	movs	r2, #33	@ 0x21
 8003c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c9e:	f7fd fe2b 	bl	80018f8 <HAL_GetTick>
 8003ca2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	88fa      	ldrh	r2, [r7, #6]
 8003ca8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	88fa      	ldrh	r2, [r7, #6]
 8003cae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cb8:	d108      	bne.n	8003ccc <HAL_UART_Transmit+0x6c>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d104      	bne.n	8003ccc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	61bb      	str	r3, [r7, #24]
 8003cca:	e003      	b.n	8003cd4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cd4:	e02e      	b.n	8003d34 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2180      	movs	r1, #128	@ 0x80
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 f848 	bl	8003d76 <UART_WaitOnFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e03a      	b.n	8003d6e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10b      	bne.n	8003d16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	3302      	adds	r3, #2
 8003d12:	61bb      	str	r3, [r7, #24]
 8003d14:	e007      	b.n	8003d26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	781a      	ldrb	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	3301      	adds	r3, #1
 8003d24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1cb      	bne.n	8003cd6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2200      	movs	r2, #0
 8003d46:	2140      	movs	r1, #64	@ 0x40
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 f814 	bl	8003d76 <UART_WaitOnFlagUntilTimeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e006      	b.n	8003d6e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	e000      	b.n	8003d6e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d6c:	2302      	movs	r3, #2
  }
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3720      	adds	r7, #32
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b086      	sub	sp, #24
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	60f8      	str	r0, [r7, #12]
 8003d7e:	60b9      	str	r1, [r7, #8]
 8003d80:	603b      	str	r3, [r7, #0]
 8003d82:	4613      	mov	r3, r2
 8003d84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d86:	e03b      	b.n	8003e00 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8e:	d037      	beq.n	8003e00 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d90:	f7fd fdb2 	bl	80018f8 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	6a3a      	ldr	r2, [r7, #32]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d302      	bcc.n	8003da6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e03a      	b.n	8003e20 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d023      	beq.n	8003e00 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b80      	cmp	r3, #128	@ 0x80
 8003dbc:	d020      	beq.n	8003e00 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b40      	cmp	r3, #64	@ 0x40
 8003dc2:	d01d      	beq.n	8003e00 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d116      	bne.n	8003e00 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 f81d 	bl	8003e28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2208      	movs	r2, #8
 8003df2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e00f      	b.n	8003e20 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	bf0c      	ite	eq
 8003e10:	2301      	moveq	r3, #1
 8003e12:	2300      	movne	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	461a      	mov	r2, r3
 8003e18:	79fb      	ldrb	r3, [r7, #7]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d0b4      	beq.n	8003d88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b095      	sub	sp, #84	@ 0x54
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	330c      	adds	r3, #12
 8003e36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e3a:	e853 3f00 	ldrex	r3, [r3]
 8003e3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	330c      	adds	r3, #12
 8003e4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e50:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e58:	e841 2300 	strex	r3, r2, [r1]
 8003e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1e5      	bne.n	8003e30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3314      	adds	r3, #20
 8003e6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	e853 3f00 	ldrex	r3, [r3]
 8003e72:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f023 0301 	bic.w	r3, r3, #1
 8003e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3314      	adds	r3, #20
 8003e82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e8c:	e841 2300 	strex	r3, r2, [r1]
 8003e90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1e5      	bne.n	8003e64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d119      	bne.n	8003ed4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	330c      	adds	r3, #12
 8003ea6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	e853 3f00 	ldrex	r3, [r3]
 8003eae:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f023 0310 	bic.w	r3, r3, #16
 8003eb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	330c      	adds	r3, #12
 8003ebe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ec0:	61ba      	str	r2, [r7, #24]
 8003ec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec4:	6979      	ldr	r1, [r7, #20]
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	e841 2300 	strex	r3, r2, [r1]
 8003ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1e5      	bne.n	8003ea0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ee2:	bf00      	nop
 8003ee4:	3754      	adds	r7, #84	@ 0x54
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
	...

08003ef0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ef4:	b0c0      	sub	sp, #256	@ 0x100
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f0c:	68d9      	ldr	r1, [r3, #12]
 8003f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	ea40 0301 	orr.w	r3, r0, r1
 8003f18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	431a      	orrs	r2, r3
 8003f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f48:	f021 010c 	bic.w	r1, r1, #12
 8003f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f56:	430b      	orrs	r3, r1
 8003f58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f6a:	6999      	ldr	r1, [r3, #24]
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	ea40 0301 	orr.w	r3, r0, r1
 8003f76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4b8f      	ldr	r3, [pc, #572]	@ (80041bc <UART_SetConfig+0x2cc>)
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d005      	beq.n	8003f90 <UART_SetConfig+0xa0>
 8003f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	4b8d      	ldr	r3, [pc, #564]	@ (80041c0 <UART_SetConfig+0x2d0>)
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d104      	bne.n	8003f9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f90:	f7fe fc1a 	bl	80027c8 <HAL_RCC_GetPCLK2Freq>
 8003f94:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f98:	e003      	b.n	8003fa2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f9a:	f7fe fc01 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 8003f9e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fac:	f040 810c 	bne.w	80041c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003fba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003fbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003fc2:	4622      	mov	r2, r4
 8003fc4:	462b      	mov	r3, r5
 8003fc6:	1891      	adds	r1, r2, r2
 8003fc8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003fca:	415b      	adcs	r3, r3
 8003fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	eb12 0801 	adds.w	r8, r2, r1
 8003fd8:	4629      	mov	r1, r5
 8003fda:	eb43 0901 	adc.w	r9, r3, r1
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ff2:	4690      	mov	r8, r2
 8003ff4:	4699      	mov	r9, r3
 8003ff6:	4623      	mov	r3, r4
 8003ff8:	eb18 0303 	adds.w	r3, r8, r3
 8003ffc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004000:	462b      	mov	r3, r5
 8004002:	eb49 0303 	adc.w	r3, r9, r3
 8004006:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800400a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004016:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800401a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800401e:	460b      	mov	r3, r1
 8004020:	18db      	adds	r3, r3, r3
 8004022:	653b      	str	r3, [r7, #80]	@ 0x50
 8004024:	4613      	mov	r3, r2
 8004026:	eb42 0303 	adc.w	r3, r2, r3
 800402a:	657b      	str	r3, [r7, #84]	@ 0x54
 800402c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004030:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004034:	f7fc fdb8 	bl	8000ba8 <__aeabi_uldivmod>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4b61      	ldr	r3, [pc, #388]	@ (80041c4 <UART_SetConfig+0x2d4>)
 800403e:	fba3 2302 	umull	r2, r3, r3, r2
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	011c      	lsls	r4, r3, #4
 8004046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800404a:	2200      	movs	r2, #0
 800404c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004050:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004054:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004058:	4642      	mov	r2, r8
 800405a:	464b      	mov	r3, r9
 800405c:	1891      	adds	r1, r2, r2
 800405e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004060:	415b      	adcs	r3, r3
 8004062:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004064:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004068:	4641      	mov	r1, r8
 800406a:	eb12 0a01 	adds.w	sl, r2, r1
 800406e:	4649      	mov	r1, r9
 8004070:	eb43 0b01 	adc.w	fp, r3, r1
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004080:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004084:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004088:	4692      	mov	sl, r2
 800408a:	469b      	mov	fp, r3
 800408c:	4643      	mov	r3, r8
 800408e:	eb1a 0303 	adds.w	r3, sl, r3
 8004092:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004096:	464b      	mov	r3, r9
 8004098:	eb4b 0303 	adc.w	r3, fp, r3
 800409c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80040b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040b4:	460b      	mov	r3, r1
 80040b6:	18db      	adds	r3, r3, r3
 80040b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80040ba:	4613      	mov	r3, r2
 80040bc:	eb42 0303 	adc.w	r3, r2, r3
 80040c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80040c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80040c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80040ca:	f7fc fd6d 	bl	8000ba8 <__aeabi_uldivmod>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4611      	mov	r1, r2
 80040d4:	4b3b      	ldr	r3, [pc, #236]	@ (80041c4 <UART_SetConfig+0x2d4>)
 80040d6:	fba3 2301 	umull	r2, r3, r3, r1
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	2264      	movs	r2, #100	@ 0x64
 80040de:	fb02 f303 	mul.w	r3, r2, r3
 80040e2:	1acb      	subs	r3, r1, r3
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80040ea:	4b36      	ldr	r3, [pc, #216]	@ (80041c4 <UART_SetConfig+0x2d4>)
 80040ec:	fba3 2302 	umull	r2, r3, r3, r2
 80040f0:	095b      	lsrs	r3, r3, #5
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80040f8:	441c      	add	r4, r3
 80040fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040fe:	2200      	movs	r2, #0
 8004100:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004104:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004108:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800410c:	4642      	mov	r2, r8
 800410e:	464b      	mov	r3, r9
 8004110:	1891      	adds	r1, r2, r2
 8004112:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004114:	415b      	adcs	r3, r3
 8004116:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004118:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800411c:	4641      	mov	r1, r8
 800411e:	1851      	adds	r1, r2, r1
 8004120:	6339      	str	r1, [r7, #48]	@ 0x30
 8004122:	4649      	mov	r1, r9
 8004124:	414b      	adcs	r3, r1
 8004126:	637b      	str	r3, [r7, #52]	@ 0x34
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004134:	4659      	mov	r1, fp
 8004136:	00cb      	lsls	r3, r1, #3
 8004138:	4651      	mov	r1, sl
 800413a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800413e:	4651      	mov	r1, sl
 8004140:	00ca      	lsls	r2, r1, #3
 8004142:	4610      	mov	r0, r2
 8004144:	4619      	mov	r1, r3
 8004146:	4603      	mov	r3, r0
 8004148:	4642      	mov	r2, r8
 800414a:	189b      	adds	r3, r3, r2
 800414c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004150:	464b      	mov	r3, r9
 8004152:	460a      	mov	r2, r1
 8004154:	eb42 0303 	adc.w	r3, r2, r3
 8004158:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800415c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004168:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800416c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004170:	460b      	mov	r3, r1
 8004172:	18db      	adds	r3, r3, r3
 8004174:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004176:	4613      	mov	r3, r2
 8004178:	eb42 0303 	adc.w	r3, r2, r3
 800417c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800417e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004182:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004186:	f7fc fd0f 	bl	8000ba8 <__aeabi_uldivmod>
 800418a:	4602      	mov	r2, r0
 800418c:	460b      	mov	r3, r1
 800418e:	4b0d      	ldr	r3, [pc, #52]	@ (80041c4 <UART_SetConfig+0x2d4>)
 8004190:	fba3 1302 	umull	r1, r3, r3, r2
 8004194:	095b      	lsrs	r3, r3, #5
 8004196:	2164      	movs	r1, #100	@ 0x64
 8004198:	fb01 f303 	mul.w	r3, r1, r3
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	3332      	adds	r3, #50	@ 0x32
 80041a2:	4a08      	ldr	r2, [pc, #32]	@ (80041c4 <UART_SetConfig+0x2d4>)
 80041a4:	fba2 2303 	umull	r2, r3, r2, r3
 80041a8:	095b      	lsrs	r3, r3, #5
 80041aa:	f003 0207 	and.w	r2, r3, #7
 80041ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4422      	add	r2, r4
 80041b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041b8:	e106      	b.n	80043c8 <UART_SetConfig+0x4d8>
 80041ba:	bf00      	nop
 80041bc:	40011000 	.word	0x40011000
 80041c0:	40011400 	.word	0x40011400
 80041c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041cc:	2200      	movs	r2, #0
 80041ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80041d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80041da:	4642      	mov	r2, r8
 80041dc:	464b      	mov	r3, r9
 80041de:	1891      	adds	r1, r2, r2
 80041e0:	6239      	str	r1, [r7, #32]
 80041e2:	415b      	adcs	r3, r3
 80041e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80041e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041ea:	4641      	mov	r1, r8
 80041ec:	1854      	adds	r4, r2, r1
 80041ee:	4649      	mov	r1, r9
 80041f0:	eb43 0501 	adc.w	r5, r3, r1
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	00eb      	lsls	r3, r5, #3
 80041fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004202:	00e2      	lsls	r2, r4, #3
 8004204:	4614      	mov	r4, r2
 8004206:	461d      	mov	r5, r3
 8004208:	4643      	mov	r3, r8
 800420a:	18e3      	adds	r3, r4, r3
 800420c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004210:	464b      	mov	r3, r9
 8004212:	eb45 0303 	adc.w	r3, r5, r3
 8004216:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800421a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004226:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800422a:	f04f 0200 	mov.w	r2, #0
 800422e:	f04f 0300 	mov.w	r3, #0
 8004232:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004236:	4629      	mov	r1, r5
 8004238:	008b      	lsls	r3, r1, #2
 800423a:	4621      	mov	r1, r4
 800423c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004240:	4621      	mov	r1, r4
 8004242:	008a      	lsls	r2, r1, #2
 8004244:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004248:	f7fc fcae 	bl	8000ba8 <__aeabi_uldivmod>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4b60      	ldr	r3, [pc, #384]	@ (80043d4 <UART_SetConfig+0x4e4>)
 8004252:	fba3 2302 	umull	r2, r3, r3, r2
 8004256:	095b      	lsrs	r3, r3, #5
 8004258:	011c      	lsls	r4, r3, #4
 800425a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800425e:	2200      	movs	r2, #0
 8004260:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004264:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004268:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800426c:	4642      	mov	r2, r8
 800426e:	464b      	mov	r3, r9
 8004270:	1891      	adds	r1, r2, r2
 8004272:	61b9      	str	r1, [r7, #24]
 8004274:	415b      	adcs	r3, r3
 8004276:	61fb      	str	r3, [r7, #28]
 8004278:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800427c:	4641      	mov	r1, r8
 800427e:	1851      	adds	r1, r2, r1
 8004280:	6139      	str	r1, [r7, #16]
 8004282:	4649      	mov	r1, r9
 8004284:	414b      	adcs	r3, r1
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004294:	4659      	mov	r1, fp
 8004296:	00cb      	lsls	r3, r1, #3
 8004298:	4651      	mov	r1, sl
 800429a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800429e:	4651      	mov	r1, sl
 80042a0:	00ca      	lsls	r2, r1, #3
 80042a2:	4610      	mov	r0, r2
 80042a4:	4619      	mov	r1, r3
 80042a6:	4603      	mov	r3, r0
 80042a8:	4642      	mov	r2, r8
 80042aa:	189b      	adds	r3, r3, r2
 80042ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042b0:	464b      	mov	r3, r9
 80042b2:	460a      	mov	r2, r1
 80042b4:	eb42 0303 	adc.w	r3, r2, r3
 80042b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80042d4:	4649      	mov	r1, r9
 80042d6:	008b      	lsls	r3, r1, #2
 80042d8:	4641      	mov	r1, r8
 80042da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042de:	4641      	mov	r1, r8
 80042e0:	008a      	lsls	r2, r1, #2
 80042e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80042e6:	f7fc fc5f 	bl	8000ba8 <__aeabi_uldivmod>
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	4611      	mov	r1, r2
 80042f0:	4b38      	ldr	r3, [pc, #224]	@ (80043d4 <UART_SetConfig+0x4e4>)
 80042f2:	fba3 2301 	umull	r2, r3, r3, r1
 80042f6:	095b      	lsrs	r3, r3, #5
 80042f8:	2264      	movs	r2, #100	@ 0x64
 80042fa:	fb02 f303 	mul.w	r3, r2, r3
 80042fe:	1acb      	subs	r3, r1, r3
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	3332      	adds	r3, #50	@ 0x32
 8004304:	4a33      	ldr	r2, [pc, #204]	@ (80043d4 <UART_SetConfig+0x4e4>)
 8004306:	fba2 2303 	umull	r2, r3, r2, r3
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004310:	441c      	add	r4, r3
 8004312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004316:	2200      	movs	r2, #0
 8004318:	673b      	str	r3, [r7, #112]	@ 0x70
 800431a:	677a      	str	r2, [r7, #116]	@ 0x74
 800431c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004320:	4642      	mov	r2, r8
 8004322:	464b      	mov	r3, r9
 8004324:	1891      	adds	r1, r2, r2
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	415b      	adcs	r3, r3
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004330:	4641      	mov	r1, r8
 8004332:	1851      	adds	r1, r2, r1
 8004334:	6039      	str	r1, [r7, #0]
 8004336:	4649      	mov	r1, r9
 8004338:	414b      	adcs	r3, r1
 800433a:	607b      	str	r3, [r7, #4]
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004348:	4659      	mov	r1, fp
 800434a:	00cb      	lsls	r3, r1, #3
 800434c:	4651      	mov	r1, sl
 800434e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004352:	4651      	mov	r1, sl
 8004354:	00ca      	lsls	r2, r1, #3
 8004356:	4610      	mov	r0, r2
 8004358:	4619      	mov	r1, r3
 800435a:	4603      	mov	r3, r0
 800435c:	4642      	mov	r2, r8
 800435e:	189b      	adds	r3, r3, r2
 8004360:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004362:	464b      	mov	r3, r9
 8004364:	460a      	mov	r2, r1
 8004366:	eb42 0303 	adc.w	r3, r2, r3
 800436a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800436c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	663b      	str	r3, [r7, #96]	@ 0x60
 8004376:	667a      	str	r2, [r7, #100]	@ 0x64
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004384:	4649      	mov	r1, r9
 8004386:	008b      	lsls	r3, r1, #2
 8004388:	4641      	mov	r1, r8
 800438a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800438e:	4641      	mov	r1, r8
 8004390:	008a      	lsls	r2, r1, #2
 8004392:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004396:	f7fc fc07 	bl	8000ba8 <__aeabi_uldivmod>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4b0d      	ldr	r3, [pc, #52]	@ (80043d4 <UART_SetConfig+0x4e4>)
 80043a0:	fba3 1302 	umull	r1, r3, r3, r2
 80043a4:	095b      	lsrs	r3, r3, #5
 80043a6:	2164      	movs	r1, #100	@ 0x64
 80043a8:	fb01 f303 	mul.w	r3, r1, r3
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	3332      	adds	r3, #50	@ 0x32
 80043b2:	4a08      	ldr	r2, [pc, #32]	@ (80043d4 <UART_SetConfig+0x4e4>)
 80043b4:	fba2 2303 	umull	r2, r3, r2, r3
 80043b8:	095b      	lsrs	r3, r3, #5
 80043ba:	f003 020f 	and.w	r2, r3, #15
 80043be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4422      	add	r2, r4
 80043c6:	609a      	str	r2, [r3, #8]
}
 80043c8:	bf00      	nop
 80043ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80043ce:	46bd      	mov	sp, r7
 80043d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043d4:	51eb851f 	.word	0x51eb851f

080043d8 <__cvt>:
 80043d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043dc:	ec57 6b10 	vmov	r6, r7, d0
 80043e0:	2f00      	cmp	r7, #0
 80043e2:	460c      	mov	r4, r1
 80043e4:	4619      	mov	r1, r3
 80043e6:	463b      	mov	r3, r7
 80043e8:	bfbb      	ittet	lt
 80043ea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80043ee:	461f      	movlt	r7, r3
 80043f0:	2300      	movge	r3, #0
 80043f2:	232d      	movlt	r3, #45	@ 0x2d
 80043f4:	700b      	strb	r3, [r1, #0]
 80043f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80043f8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80043fc:	4691      	mov	r9, r2
 80043fe:	f023 0820 	bic.w	r8, r3, #32
 8004402:	bfbc      	itt	lt
 8004404:	4632      	movlt	r2, r6
 8004406:	4616      	movlt	r6, r2
 8004408:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800440c:	d005      	beq.n	800441a <__cvt+0x42>
 800440e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004412:	d100      	bne.n	8004416 <__cvt+0x3e>
 8004414:	3401      	adds	r4, #1
 8004416:	2102      	movs	r1, #2
 8004418:	e000      	b.n	800441c <__cvt+0x44>
 800441a:	2103      	movs	r1, #3
 800441c:	ab03      	add	r3, sp, #12
 800441e:	9301      	str	r3, [sp, #4]
 8004420:	ab02      	add	r3, sp, #8
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	ec47 6b10 	vmov	d0, r6, r7
 8004428:	4653      	mov	r3, sl
 800442a:	4622      	mov	r2, r4
 800442c:	f000 fe4c 	bl	80050c8 <_dtoa_r>
 8004430:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004434:	4605      	mov	r5, r0
 8004436:	d119      	bne.n	800446c <__cvt+0x94>
 8004438:	f019 0f01 	tst.w	r9, #1
 800443c:	d00e      	beq.n	800445c <__cvt+0x84>
 800443e:	eb00 0904 	add.w	r9, r0, r4
 8004442:	2200      	movs	r2, #0
 8004444:	2300      	movs	r3, #0
 8004446:	4630      	mov	r0, r6
 8004448:	4639      	mov	r1, r7
 800444a:	f7fc fb3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800444e:	b108      	cbz	r0, 8004454 <__cvt+0x7c>
 8004450:	f8cd 900c 	str.w	r9, [sp, #12]
 8004454:	2230      	movs	r2, #48	@ 0x30
 8004456:	9b03      	ldr	r3, [sp, #12]
 8004458:	454b      	cmp	r3, r9
 800445a:	d31e      	bcc.n	800449a <__cvt+0xc2>
 800445c:	9b03      	ldr	r3, [sp, #12]
 800445e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004460:	1b5b      	subs	r3, r3, r5
 8004462:	4628      	mov	r0, r5
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	b004      	add	sp, #16
 8004468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800446c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004470:	eb00 0904 	add.w	r9, r0, r4
 8004474:	d1e5      	bne.n	8004442 <__cvt+0x6a>
 8004476:	7803      	ldrb	r3, [r0, #0]
 8004478:	2b30      	cmp	r3, #48	@ 0x30
 800447a:	d10a      	bne.n	8004492 <__cvt+0xba>
 800447c:	2200      	movs	r2, #0
 800447e:	2300      	movs	r3, #0
 8004480:	4630      	mov	r0, r6
 8004482:	4639      	mov	r1, r7
 8004484:	f7fc fb20 	bl	8000ac8 <__aeabi_dcmpeq>
 8004488:	b918      	cbnz	r0, 8004492 <__cvt+0xba>
 800448a:	f1c4 0401 	rsb	r4, r4, #1
 800448e:	f8ca 4000 	str.w	r4, [sl]
 8004492:	f8da 3000 	ldr.w	r3, [sl]
 8004496:	4499      	add	r9, r3
 8004498:	e7d3      	b.n	8004442 <__cvt+0x6a>
 800449a:	1c59      	adds	r1, r3, #1
 800449c:	9103      	str	r1, [sp, #12]
 800449e:	701a      	strb	r2, [r3, #0]
 80044a0:	e7d9      	b.n	8004456 <__cvt+0x7e>

080044a2 <__exponent>:
 80044a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044a4:	2900      	cmp	r1, #0
 80044a6:	bfba      	itte	lt
 80044a8:	4249      	neglt	r1, r1
 80044aa:	232d      	movlt	r3, #45	@ 0x2d
 80044ac:	232b      	movge	r3, #43	@ 0x2b
 80044ae:	2909      	cmp	r1, #9
 80044b0:	7002      	strb	r2, [r0, #0]
 80044b2:	7043      	strb	r3, [r0, #1]
 80044b4:	dd29      	ble.n	800450a <__exponent+0x68>
 80044b6:	f10d 0307 	add.w	r3, sp, #7
 80044ba:	461d      	mov	r5, r3
 80044bc:	270a      	movs	r7, #10
 80044be:	461a      	mov	r2, r3
 80044c0:	fbb1 f6f7 	udiv	r6, r1, r7
 80044c4:	fb07 1416 	mls	r4, r7, r6, r1
 80044c8:	3430      	adds	r4, #48	@ 0x30
 80044ca:	f802 4c01 	strb.w	r4, [r2, #-1]
 80044ce:	460c      	mov	r4, r1
 80044d0:	2c63      	cmp	r4, #99	@ 0x63
 80044d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80044d6:	4631      	mov	r1, r6
 80044d8:	dcf1      	bgt.n	80044be <__exponent+0x1c>
 80044da:	3130      	adds	r1, #48	@ 0x30
 80044dc:	1e94      	subs	r4, r2, #2
 80044de:	f803 1c01 	strb.w	r1, [r3, #-1]
 80044e2:	1c41      	adds	r1, r0, #1
 80044e4:	4623      	mov	r3, r4
 80044e6:	42ab      	cmp	r3, r5
 80044e8:	d30a      	bcc.n	8004500 <__exponent+0x5e>
 80044ea:	f10d 0309 	add.w	r3, sp, #9
 80044ee:	1a9b      	subs	r3, r3, r2
 80044f0:	42ac      	cmp	r4, r5
 80044f2:	bf88      	it	hi
 80044f4:	2300      	movhi	r3, #0
 80044f6:	3302      	adds	r3, #2
 80044f8:	4403      	add	r3, r0
 80044fa:	1a18      	subs	r0, r3, r0
 80044fc:	b003      	add	sp, #12
 80044fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004500:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004504:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004508:	e7ed      	b.n	80044e6 <__exponent+0x44>
 800450a:	2330      	movs	r3, #48	@ 0x30
 800450c:	3130      	adds	r1, #48	@ 0x30
 800450e:	7083      	strb	r3, [r0, #2]
 8004510:	70c1      	strb	r1, [r0, #3]
 8004512:	1d03      	adds	r3, r0, #4
 8004514:	e7f1      	b.n	80044fa <__exponent+0x58>
	...

08004518 <_printf_float>:
 8004518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800451c:	b08d      	sub	sp, #52	@ 0x34
 800451e:	460c      	mov	r4, r1
 8004520:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004524:	4616      	mov	r6, r2
 8004526:	461f      	mov	r7, r3
 8004528:	4605      	mov	r5, r0
 800452a:	f000 fccb 	bl	8004ec4 <_localeconv_r>
 800452e:	6803      	ldr	r3, [r0, #0]
 8004530:	9304      	str	r3, [sp, #16]
 8004532:	4618      	mov	r0, r3
 8004534:	f7fb fe9c 	bl	8000270 <strlen>
 8004538:	2300      	movs	r3, #0
 800453a:	930a      	str	r3, [sp, #40]	@ 0x28
 800453c:	f8d8 3000 	ldr.w	r3, [r8]
 8004540:	9005      	str	r0, [sp, #20]
 8004542:	3307      	adds	r3, #7
 8004544:	f023 0307 	bic.w	r3, r3, #7
 8004548:	f103 0208 	add.w	r2, r3, #8
 800454c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004550:	f8d4 b000 	ldr.w	fp, [r4]
 8004554:	f8c8 2000 	str.w	r2, [r8]
 8004558:	e9d3 8900 	ldrd	r8, r9, [r3]
 800455c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004560:	9307      	str	r3, [sp, #28]
 8004562:	f8cd 8018 	str.w	r8, [sp, #24]
 8004566:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800456a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800456e:	4b9c      	ldr	r3, [pc, #624]	@ (80047e0 <_printf_float+0x2c8>)
 8004570:	f04f 32ff 	mov.w	r2, #4294967295
 8004574:	f7fc fada 	bl	8000b2c <__aeabi_dcmpun>
 8004578:	bb70      	cbnz	r0, 80045d8 <_printf_float+0xc0>
 800457a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800457e:	4b98      	ldr	r3, [pc, #608]	@ (80047e0 <_printf_float+0x2c8>)
 8004580:	f04f 32ff 	mov.w	r2, #4294967295
 8004584:	f7fc fab4 	bl	8000af0 <__aeabi_dcmple>
 8004588:	bb30      	cbnz	r0, 80045d8 <_printf_float+0xc0>
 800458a:	2200      	movs	r2, #0
 800458c:	2300      	movs	r3, #0
 800458e:	4640      	mov	r0, r8
 8004590:	4649      	mov	r1, r9
 8004592:	f7fc faa3 	bl	8000adc <__aeabi_dcmplt>
 8004596:	b110      	cbz	r0, 800459e <_printf_float+0x86>
 8004598:	232d      	movs	r3, #45	@ 0x2d
 800459a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800459e:	4a91      	ldr	r2, [pc, #580]	@ (80047e4 <_printf_float+0x2cc>)
 80045a0:	4b91      	ldr	r3, [pc, #580]	@ (80047e8 <_printf_float+0x2d0>)
 80045a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80045a6:	bf8c      	ite	hi
 80045a8:	4690      	movhi	r8, r2
 80045aa:	4698      	movls	r8, r3
 80045ac:	2303      	movs	r3, #3
 80045ae:	6123      	str	r3, [r4, #16]
 80045b0:	f02b 0304 	bic.w	r3, fp, #4
 80045b4:	6023      	str	r3, [r4, #0]
 80045b6:	f04f 0900 	mov.w	r9, #0
 80045ba:	9700      	str	r7, [sp, #0]
 80045bc:	4633      	mov	r3, r6
 80045be:	aa0b      	add	r2, sp, #44	@ 0x2c
 80045c0:	4621      	mov	r1, r4
 80045c2:	4628      	mov	r0, r5
 80045c4:	f000 f9d2 	bl	800496c <_printf_common>
 80045c8:	3001      	adds	r0, #1
 80045ca:	f040 808d 	bne.w	80046e8 <_printf_float+0x1d0>
 80045ce:	f04f 30ff 	mov.w	r0, #4294967295
 80045d2:	b00d      	add	sp, #52	@ 0x34
 80045d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045d8:	4642      	mov	r2, r8
 80045da:	464b      	mov	r3, r9
 80045dc:	4640      	mov	r0, r8
 80045de:	4649      	mov	r1, r9
 80045e0:	f7fc faa4 	bl	8000b2c <__aeabi_dcmpun>
 80045e4:	b140      	cbz	r0, 80045f8 <_printf_float+0xe0>
 80045e6:	464b      	mov	r3, r9
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bfbc      	itt	lt
 80045ec:	232d      	movlt	r3, #45	@ 0x2d
 80045ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80045f2:	4a7e      	ldr	r2, [pc, #504]	@ (80047ec <_printf_float+0x2d4>)
 80045f4:	4b7e      	ldr	r3, [pc, #504]	@ (80047f0 <_printf_float+0x2d8>)
 80045f6:	e7d4      	b.n	80045a2 <_printf_float+0x8a>
 80045f8:	6863      	ldr	r3, [r4, #4]
 80045fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80045fe:	9206      	str	r2, [sp, #24]
 8004600:	1c5a      	adds	r2, r3, #1
 8004602:	d13b      	bne.n	800467c <_printf_float+0x164>
 8004604:	2306      	movs	r3, #6
 8004606:	6063      	str	r3, [r4, #4]
 8004608:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800460c:	2300      	movs	r3, #0
 800460e:	6022      	str	r2, [r4, #0]
 8004610:	9303      	str	r3, [sp, #12]
 8004612:	ab0a      	add	r3, sp, #40	@ 0x28
 8004614:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004618:	ab09      	add	r3, sp, #36	@ 0x24
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	6861      	ldr	r1, [r4, #4]
 800461e:	ec49 8b10 	vmov	d0, r8, r9
 8004622:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004626:	4628      	mov	r0, r5
 8004628:	f7ff fed6 	bl	80043d8 <__cvt>
 800462c:	9b06      	ldr	r3, [sp, #24]
 800462e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004630:	2b47      	cmp	r3, #71	@ 0x47
 8004632:	4680      	mov	r8, r0
 8004634:	d129      	bne.n	800468a <_printf_float+0x172>
 8004636:	1cc8      	adds	r0, r1, #3
 8004638:	db02      	blt.n	8004640 <_printf_float+0x128>
 800463a:	6863      	ldr	r3, [r4, #4]
 800463c:	4299      	cmp	r1, r3
 800463e:	dd41      	ble.n	80046c4 <_printf_float+0x1ac>
 8004640:	f1aa 0a02 	sub.w	sl, sl, #2
 8004644:	fa5f fa8a 	uxtb.w	sl, sl
 8004648:	3901      	subs	r1, #1
 800464a:	4652      	mov	r2, sl
 800464c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004650:	9109      	str	r1, [sp, #36]	@ 0x24
 8004652:	f7ff ff26 	bl	80044a2 <__exponent>
 8004656:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004658:	1813      	adds	r3, r2, r0
 800465a:	2a01      	cmp	r2, #1
 800465c:	4681      	mov	r9, r0
 800465e:	6123      	str	r3, [r4, #16]
 8004660:	dc02      	bgt.n	8004668 <_printf_float+0x150>
 8004662:	6822      	ldr	r2, [r4, #0]
 8004664:	07d2      	lsls	r2, r2, #31
 8004666:	d501      	bpl.n	800466c <_printf_float+0x154>
 8004668:	3301      	adds	r3, #1
 800466a:	6123      	str	r3, [r4, #16]
 800466c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0a2      	beq.n	80045ba <_printf_float+0xa2>
 8004674:	232d      	movs	r3, #45	@ 0x2d
 8004676:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800467a:	e79e      	b.n	80045ba <_printf_float+0xa2>
 800467c:	9a06      	ldr	r2, [sp, #24]
 800467e:	2a47      	cmp	r2, #71	@ 0x47
 8004680:	d1c2      	bne.n	8004608 <_printf_float+0xf0>
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1c0      	bne.n	8004608 <_printf_float+0xf0>
 8004686:	2301      	movs	r3, #1
 8004688:	e7bd      	b.n	8004606 <_printf_float+0xee>
 800468a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800468e:	d9db      	bls.n	8004648 <_printf_float+0x130>
 8004690:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004694:	d118      	bne.n	80046c8 <_printf_float+0x1b0>
 8004696:	2900      	cmp	r1, #0
 8004698:	6863      	ldr	r3, [r4, #4]
 800469a:	dd0b      	ble.n	80046b4 <_printf_float+0x19c>
 800469c:	6121      	str	r1, [r4, #16]
 800469e:	b913      	cbnz	r3, 80046a6 <_printf_float+0x18e>
 80046a0:	6822      	ldr	r2, [r4, #0]
 80046a2:	07d0      	lsls	r0, r2, #31
 80046a4:	d502      	bpl.n	80046ac <_printf_float+0x194>
 80046a6:	3301      	adds	r3, #1
 80046a8:	440b      	add	r3, r1
 80046aa:	6123      	str	r3, [r4, #16]
 80046ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 80046ae:	f04f 0900 	mov.w	r9, #0
 80046b2:	e7db      	b.n	800466c <_printf_float+0x154>
 80046b4:	b913      	cbnz	r3, 80046bc <_printf_float+0x1a4>
 80046b6:	6822      	ldr	r2, [r4, #0]
 80046b8:	07d2      	lsls	r2, r2, #31
 80046ba:	d501      	bpl.n	80046c0 <_printf_float+0x1a8>
 80046bc:	3302      	adds	r3, #2
 80046be:	e7f4      	b.n	80046aa <_printf_float+0x192>
 80046c0:	2301      	movs	r3, #1
 80046c2:	e7f2      	b.n	80046aa <_printf_float+0x192>
 80046c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80046c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80046ca:	4299      	cmp	r1, r3
 80046cc:	db05      	blt.n	80046da <_printf_float+0x1c2>
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	6121      	str	r1, [r4, #16]
 80046d2:	07d8      	lsls	r0, r3, #31
 80046d4:	d5ea      	bpl.n	80046ac <_printf_float+0x194>
 80046d6:	1c4b      	adds	r3, r1, #1
 80046d8:	e7e7      	b.n	80046aa <_printf_float+0x192>
 80046da:	2900      	cmp	r1, #0
 80046dc:	bfd4      	ite	le
 80046de:	f1c1 0202 	rsble	r2, r1, #2
 80046e2:	2201      	movgt	r2, #1
 80046e4:	4413      	add	r3, r2
 80046e6:	e7e0      	b.n	80046aa <_printf_float+0x192>
 80046e8:	6823      	ldr	r3, [r4, #0]
 80046ea:	055a      	lsls	r2, r3, #21
 80046ec:	d407      	bmi.n	80046fe <_printf_float+0x1e6>
 80046ee:	6923      	ldr	r3, [r4, #16]
 80046f0:	4642      	mov	r2, r8
 80046f2:	4631      	mov	r1, r6
 80046f4:	4628      	mov	r0, r5
 80046f6:	47b8      	blx	r7
 80046f8:	3001      	adds	r0, #1
 80046fa:	d12b      	bne.n	8004754 <_printf_float+0x23c>
 80046fc:	e767      	b.n	80045ce <_printf_float+0xb6>
 80046fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004702:	f240 80dd 	bls.w	80048c0 <_printf_float+0x3a8>
 8004706:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800470a:	2200      	movs	r2, #0
 800470c:	2300      	movs	r3, #0
 800470e:	f7fc f9db 	bl	8000ac8 <__aeabi_dcmpeq>
 8004712:	2800      	cmp	r0, #0
 8004714:	d033      	beq.n	800477e <_printf_float+0x266>
 8004716:	4a37      	ldr	r2, [pc, #220]	@ (80047f4 <_printf_float+0x2dc>)
 8004718:	2301      	movs	r3, #1
 800471a:	4631      	mov	r1, r6
 800471c:	4628      	mov	r0, r5
 800471e:	47b8      	blx	r7
 8004720:	3001      	adds	r0, #1
 8004722:	f43f af54 	beq.w	80045ce <_printf_float+0xb6>
 8004726:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800472a:	4543      	cmp	r3, r8
 800472c:	db02      	blt.n	8004734 <_printf_float+0x21c>
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	07d8      	lsls	r0, r3, #31
 8004732:	d50f      	bpl.n	8004754 <_printf_float+0x23c>
 8004734:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004738:	4631      	mov	r1, r6
 800473a:	4628      	mov	r0, r5
 800473c:	47b8      	blx	r7
 800473e:	3001      	adds	r0, #1
 8004740:	f43f af45 	beq.w	80045ce <_printf_float+0xb6>
 8004744:	f04f 0900 	mov.w	r9, #0
 8004748:	f108 38ff 	add.w	r8, r8, #4294967295
 800474c:	f104 0a1a 	add.w	sl, r4, #26
 8004750:	45c8      	cmp	r8, r9
 8004752:	dc09      	bgt.n	8004768 <_printf_float+0x250>
 8004754:	6823      	ldr	r3, [r4, #0]
 8004756:	079b      	lsls	r3, r3, #30
 8004758:	f100 8103 	bmi.w	8004962 <_printf_float+0x44a>
 800475c:	68e0      	ldr	r0, [r4, #12]
 800475e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004760:	4298      	cmp	r0, r3
 8004762:	bfb8      	it	lt
 8004764:	4618      	movlt	r0, r3
 8004766:	e734      	b.n	80045d2 <_printf_float+0xba>
 8004768:	2301      	movs	r3, #1
 800476a:	4652      	mov	r2, sl
 800476c:	4631      	mov	r1, r6
 800476e:	4628      	mov	r0, r5
 8004770:	47b8      	blx	r7
 8004772:	3001      	adds	r0, #1
 8004774:	f43f af2b 	beq.w	80045ce <_printf_float+0xb6>
 8004778:	f109 0901 	add.w	r9, r9, #1
 800477c:	e7e8      	b.n	8004750 <_printf_float+0x238>
 800477e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004780:	2b00      	cmp	r3, #0
 8004782:	dc39      	bgt.n	80047f8 <_printf_float+0x2e0>
 8004784:	4a1b      	ldr	r2, [pc, #108]	@ (80047f4 <_printf_float+0x2dc>)
 8004786:	2301      	movs	r3, #1
 8004788:	4631      	mov	r1, r6
 800478a:	4628      	mov	r0, r5
 800478c:	47b8      	blx	r7
 800478e:	3001      	adds	r0, #1
 8004790:	f43f af1d 	beq.w	80045ce <_printf_float+0xb6>
 8004794:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004798:	ea59 0303 	orrs.w	r3, r9, r3
 800479c:	d102      	bne.n	80047a4 <_printf_float+0x28c>
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	07d9      	lsls	r1, r3, #31
 80047a2:	d5d7      	bpl.n	8004754 <_printf_float+0x23c>
 80047a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047a8:	4631      	mov	r1, r6
 80047aa:	4628      	mov	r0, r5
 80047ac:	47b8      	blx	r7
 80047ae:	3001      	adds	r0, #1
 80047b0:	f43f af0d 	beq.w	80045ce <_printf_float+0xb6>
 80047b4:	f04f 0a00 	mov.w	sl, #0
 80047b8:	f104 0b1a 	add.w	fp, r4, #26
 80047bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047be:	425b      	negs	r3, r3
 80047c0:	4553      	cmp	r3, sl
 80047c2:	dc01      	bgt.n	80047c8 <_printf_float+0x2b0>
 80047c4:	464b      	mov	r3, r9
 80047c6:	e793      	b.n	80046f0 <_printf_float+0x1d8>
 80047c8:	2301      	movs	r3, #1
 80047ca:	465a      	mov	r2, fp
 80047cc:	4631      	mov	r1, r6
 80047ce:	4628      	mov	r0, r5
 80047d0:	47b8      	blx	r7
 80047d2:	3001      	adds	r0, #1
 80047d4:	f43f aefb 	beq.w	80045ce <_printf_float+0xb6>
 80047d8:	f10a 0a01 	add.w	sl, sl, #1
 80047dc:	e7ee      	b.n	80047bc <_printf_float+0x2a4>
 80047de:	bf00      	nop
 80047e0:	7fefffff 	.word	0x7fefffff
 80047e4:	08006d60 	.word	0x08006d60
 80047e8:	08006d5c 	.word	0x08006d5c
 80047ec:	08006d68 	.word	0x08006d68
 80047f0:	08006d64 	.word	0x08006d64
 80047f4:	08006d6c 	.word	0x08006d6c
 80047f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80047fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80047fe:	4553      	cmp	r3, sl
 8004800:	bfa8      	it	ge
 8004802:	4653      	movge	r3, sl
 8004804:	2b00      	cmp	r3, #0
 8004806:	4699      	mov	r9, r3
 8004808:	dc36      	bgt.n	8004878 <_printf_float+0x360>
 800480a:	f04f 0b00 	mov.w	fp, #0
 800480e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004812:	f104 021a 	add.w	r2, r4, #26
 8004816:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004818:	9306      	str	r3, [sp, #24]
 800481a:	eba3 0309 	sub.w	r3, r3, r9
 800481e:	455b      	cmp	r3, fp
 8004820:	dc31      	bgt.n	8004886 <_printf_float+0x36e>
 8004822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004824:	459a      	cmp	sl, r3
 8004826:	dc3a      	bgt.n	800489e <_printf_float+0x386>
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	07da      	lsls	r2, r3, #31
 800482c:	d437      	bmi.n	800489e <_printf_float+0x386>
 800482e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004830:	ebaa 0903 	sub.w	r9, sl, r3
 8004834:	9b06      	ldr	r3, [sp, #24]
 8004836:	ebaa 0303 	sub.w	r3, sl, r3
 800483a:	4599      	cmp	r9, r3
 800483c:	bfa8      	it	ge
 800483e:	4699      	movge	r9, r3
 8004840:	f1b9 0f00 	cmp.w	r9, #0
 8004844:	dc33      	bgt.n	80048ae <_printf_float+0x396>
 8004846:	f04f 0800 	mov.w	r8, #0
 800484a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800484e:	f104 0b1a 	add.w	fp, r4, #26
 8004852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004854:	ebaa 0303 	sub.w	r3, sl, r3
 8004858:	eba3 0309 	sub.w	r3, r3, r9
 800485c:	4543      	cmp	r3, r8
 800485e:	f77f af79 	ble.w	8004754 <_printf_float+0x23c>
 8004862:	2301      	movs	r3, #1
 8004864:	465a      	mov	r2, fp
 8004866:	4631      	mov	r1, r6
 8004868:	4628      	mov	r0, r5
 800486a:	47b8      	blx	r7
 800486c:	3001      	adds	r0, #1
 800486e:	f43f aeae 	beq.w	80045ce <_printf_float+0xb6>
 8004872:	f108 0801 	add.w	r8, r8, #1
 8004876:	e7ec      	b.n	8004852 <_printf_float+0x33a>
 8004878:	4642      	mov	r2, r8
 800487a:	4631      	mov	r1, r6
 800487c:	4628      	mov	r0, r5
 800487e:	47b8      	blx	r7
 8004880:	3001      	adds	r0, #1
 8004882:	d1c2      	bne.n	800480a <_printf_float+0x2f2>
 8004884:	e6a3      	b.n	80045ce <_printf_float+0xb6>
 8004886:	2301      	movs	r3, #1
 8004888:	4631      	mov	r1, r6
 800488a:	4628      	mov	r0, r5
 800488c:	9206      	str	r2, [sp, #24]
 800488e:	47b8      	blx	r7
 8004890:	3001      	adds	r0, #1
 8004892:	f43f ae9c 	beq.w	80045ce <_printf_float+0xb6>
 8004896:	9a06      	ldr	r2, [sp, #24]
 8004898:	f10b 0b01 	add.w	fp, fp, #1
 800489c:	e7bb      	b.n	8004816 <_printf_float+0x2fe>
 800489e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048a2:	4631      	mov	r1, r6
 80048a4:	4628      	mov	r0, r5
 80048a6:	47b8      	blx	r7
 80048a8:	3001      	adds	r0, #1
 80048aa:	d1c0      	bne.n	800482e <_printf_float+0x316>
 80048ac:	e68f      	b.n	80045ce <_printf_float+0xb6>
 80048ae:	9a06      	ldr	r2, [sp, #24]
 80048b0:	464b      	mov	r3, r9
 80048b2:	4442      	add	r2, r8
 80048b4:	4631      	mov	r1, r6
 80048b6:	4628      	mov	r0, r5
 80048b8:	47b8      	blx	r7
 80048ba:	3001      	adds	r0, #1
 80048bc:	d1c3      	bne.n	8004846 <_printf_float+0x32e>
 80048be:	e686      	b.n	80045ce <_printf_float+0xb6>
 80048c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80048c4:	f1ba 0f01 	cmp.w	sl, #1
 80048c8:	dc01      	bgt.n	80048ce <_printf_float+0x3b6>
 80048ca:	07db      	lsls	r3, r3, #31
 80048cc:	d536      	bpl.n	800493c <_printf_float+0x424>
 80048ce:	2301      	movs	r3, #1
 80048d0:	4642      	mov	r2, r8
 80048d2:	4631      	mov	r1, r6
 80048d4:	4628      	mov	r0, r5
 80048d6:	47b8      	blx	r7
 80048d8:	3001      	adds	r0, #1
 80048da:	f43f ae78 	beq.w	80045ce <_printf_float+0xb6>
 80048de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048e2:	4631      	mov	r1, r6
 80048e4:	4628      	mov	r0, r5
 80048e6:	47b8      	blx	r7
 80048e8:	3001      	adds	r0, #1
 80048ea:	f43f ae70 	beq.w	80045ce <_printf_float+0xb6>
 80048ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80048f2:	2200      	movs	r2, #0
 80048f4:	2300      	movs	r3, #0
 80048f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80048fa:	f7fc f8e5 	bl	8000ac8 <__aeabi_dcmpeq>
 80048fe:	b9c0      	cbnz	r0, 8004932 <_printf_float+0x41a>
 8004900:	4653      	mov	r3, sl
 8004902:	f108 0201 	add.w	r2, r8, #1
 8004906:	4631      	mov	r1, r6
 8004908:	4628      	mov	r0, r5
 800490a:	47b8      	blx	r7
 800490c:	3001      	adds	r0, #1
 800490e:	d10c      	bne.n	800492a <_printf_float+0x412>
 8004910:	e65d      	b.n	80045ce <_printf_float+0xb6>
 8004912:	2301      	movs	r3, #1
 8004914:	465a      	mov	r2, fp
 8004916:	4631      	mov	r1, r6
 8004918:	4628      	mov	r0, r5
 800491a:	47b8      	blx	r7
 800491c:	3001      	adds	r0, #1
 800491e:	f43f ae56 	beq.w	80045ce <_printf_float+0xb6>
 8004922:	f108 0801 	add.w	r8, r8, #1
 8004926:	45d0      	cmp	r8, sl
 8004928:	dbf3      	blt.n	8004912 <_printf_float+0x3fa>
 800492a:	464b      	mov	r3, r9
 800492c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004930:	e6df      	b.n	80046f2 <_printf_float+0x1da>
 8004932:	f04f 0800 	mov.w	r8, #0
 8004936:	f104 0b1a 	add.w	fp, r4, #26
 800493a:	e7f4      	b.n	8004926 <_printf_float+0x40e>
 800493c:	2301      	movs	r3, #1
 800493e:	4642      	mov	r2, r8
 8004940:	e7e1      	b.n	8004906 <_printf_float+0x3ee>
 8004942:	2301      	movs	r3, #1
 8004944:	464a      	mov	r2, r9
 8004946:	4631      	mov	r1, r6
 8004948:	4628      	mov	r0, r5
 800494a:	47b8      	blx	r7
 800494c:	3001      	adds	r0, #1
 800494e:	f43f ae3e 	beq.w	80045ce <_printf_float+0xb6>
 8004952:	f108 0801 	add.w	r8, r8, #1
 8004956:	68e3      	ldr	r3, [r4, #12]
 8004958:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800495a:	1a5b      	subs	r3, r3, r1
 800495c:	4543      	cmp	r3, r8
 800495e:	dcf0      	bgt.n	8004942 <_printf_float+0x42a>
 8004960:	e6fc      	b.n	800475c <_printf_float+0x244>
 8004962:	f04f 0800 	mov.w	r8, #0
 8004966:	f104 0919 	add.w	r9, r4, #25
 800496a:	e7f4      	b.n	8004956 <_printf_float+0x43e>

0800496c <_printf_common>:
 800496c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004970:	4616      	mov	r6, r2
 8004972:	4698      	mov	r8, r3
 8004974:	688a      	ldr	r2, [r1, #8]
 8004976:	690b      	ldr	r3, [r1, #16]
 8004978:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800497c:	4293      	cmp	r3, r2
 800497e:	bfb8      	it	lt
 8004980:	4613      	movlt	r3, r2
 8004982:	6033      	str	r3, [r6, #0]
 8004984:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004988:	4607      	mov	r7, r0
 800498a:	460c      	mov	r4, r1
 800498c:	b10a      	cbz	r2, 8004992 <_printf_common+0x26>
 800498e:	3301      	adds	r3, #1
 8004990:	6033      	str	r3, [r6, #0]
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	0699      	lsls	r1, r3, #26
 8004996:	bf42      	ittt	mi
 8004998:	6833      	ldrmi	r3, [r6, #0]
 800499a:	3302      	addmi	r3, #2
 800499c:	6033      	strmi	r3, [r6, #0]
 800499e:	6825      	ldr	r5, [r4, #0]
 80049a0:	f015 0506 	ands.w	r5, r5, #6
 80049a4:	d106      	bne.n	80049b4 <_printf_common+0x48>
 80049a6:	f104 0a19 	add.w	sl, r4, #25
 80049aa:	68e3      	ldr	r3, [r4, #12]
 80049ac:	6832      	ldr	r2, [r6, #0]
 80049ae:	1a9b      	subs	r3, r3, r2
 80049b0:	42ab      	cmp	r3, r5
 80049b2:	dc26      	bgt.n	8004a02 <_printf_common+0x96>
 80049b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049b8:	6822      	ldr	r2, [r4, #0]
 80049ba:	3b00      	subs	r3, #0
 80049bc:	bf18      	it	ne
 80049be:	2301      	movne	r3, #1
 80049c0:	0692      	lsls	r2, r2, #26
 80049c2:	d42b      	bmi.n	8004a1c <_printf_common+0xb0>
 80049c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049c8:	4641      	mov	r1, r8
 80049ca:	4638      	mov	r0, r7
 80049cc:	47c8      	blx	r9
 80049ce:	3001      	adds	r0, #1
 80049d0:	d01e      	beq.n	8004a10 <_printf_common+0xa4>
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	6922      	ldr	r2, [r4, #16]
 80049d6:	f003 0306 	and.w	r3, r3, #6
 80049da:	2b04      	cmp	r3, #4
 80049dc:	bf02      	ittt	eq
 80049de:	68e5      	ldreq	r5, [r4, #12]
 80049e0:	6833      	ldreq	r3, [r6, #0]
 80049e2:	1aed      	subeq	r5, r5, r3
 80049e4:	68a3      	ldr	r3, [r4, #8]
 80049e6:	bf0c      	ite	eq
 80049e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049ec:	2500      	movne	r5, #0
 80049ee:	4293      	cmp	r3, r2
 80049f0:	bfc4      	itt	gt
 80049f2:	1a9b      	subgt	r3, r3, r2
 80049f4:	18ed      	addgt	r5, r5, r3
 80049f6:	2600      	movs	r6, #0
 80049f8:	341a      	adds	r4, #26
 80049fa:	42b5      	cmp	r5, r6
 80049fc:	d11a      	bne.n	8004a34 <_printf_common+0xc8>
 80049fe:	2000      	movs	r0, #0
 8004a00:	e008      	b.n	8004a14 <_printf_common+0xa8>
 8004a02:	2301      	movs	r3, #1
 8004a04:	4652      	mov	r2, sl
 8004a06:	4641      	mov	r1, r8
 8004a08:	4638      	mov	r0, r7
 8004a0a:	47c8      	blx	r9
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	d103      	bne.n	8004a18 <_printf_common+0xac>
 8004a10:	f04f 30ff 	mov.w	r0, #4294967295
 8004a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a18:	3501      	adds	r5, #1
 8004a1a:	e7c6      	b.n	80049aa <_printf_common+0x3e>
 8004a1c:	18e1      	adds	r1, r4, r3
 8004a1e:	1c5a      	adds	r2, r3, #1
 8004a20:	2030      	movs	r0, #48	@ 0x30
 8004a22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a26:	4422      	add	r2, r4
 8004a28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a30:	3302      	adds	r3, #2
 8004a32:	e7c7      	b.n	80049c4 <_printf_common+0x58>
 8004a34:	2301      	movs	r3, #1
 8004a36:	4622      	mov	r2, r4
 8004a38:	4641      	mov	r1, r8
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	47c8      	blx	r9
 8004a3e:	3001      	adds	r0, #1
 8004a40:	d0e6      	beq.n	8004a10 <_printf_common+0xa4>
 8004a42:	3601      	adds	r6, #1
 8004a44:	e7d9      	b.n	80049fa <_printf_common+0x8e>
	...

08004a48 <_printf_i>:
 8004a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a4c:	7e0f      	ldrb	r7, [r1, #24]
 8004a4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a50:	2f78      	cmp	r7, #120	@ 0x78
 8004a52:	4691      	mov	r9, r2
 8004a54:	4680      	mov	r8, r0
 8004a56:	460c      	mov	r4, r1
 8004a58:	469a      	mov	sl, r3
 8004a5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a5e:	d807      	bhi.n	8004a70 <_printf_i+0x28>
 8004a60:	2f62      	cmp	r7, #98	@ 0x62
 8004a62:	d80a      	bhi.n	8004a7a <_printf_i+0x32>
 8004a64:	2f00      	cmp	r7, #0
 8004a66:	f000 80d1 	beq.w	8004c0c <_printf_i+0x1c4>
 8004a6a:	2f58      	cmp	r7, #88	@ 0x58
 8004a6c:	f000 80b8 	beq.w	8004be0 <_printf_i+0x198>
 8004a70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a78:	e03a      	b.n	8004af0 <_printf_i+0xa8>
 8004a7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a7e:	2b15      	cmp	r3, #21
 8004a80:	d8f6      	bhi.n	8004a70 <_printf_i+0x28>
 8004a82:	a101      	add	r1, pc, #4	@ (adr r1, 8004a88 <_printf_i+0x40>)
 8004a84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a88:	08004ae1 	.word	0x08004ae1
 8004a8c:	08004af5 	.word	0x08004af5
 8004a90:	08004a71 	.word	0x08004a71
 8004a94:	08004a71 	.word	0x08004a71
 8004a98:	08004a71 	.word	0x08004a71
 8004a9c:	08004a71 	.word	0x08004a71
 8004aa0:	08004af5 	.word	0x08004af5
 8004aa4:	08004a71 	.word	0x08004a71
 8004aa8:	08004a71 	.word	0x08004a71
 8004aac:	08004a71 	.word	0x08004a71
 8004ab0:	08004a71 	.word	0x08004a71
 8004ab4:	08004bf3 	.word	0x08004bf3
 8004ab8:	08004b1f 	.word	0x08004b1f
 8004abc:	08004bad 	.word	0x08004bad
 8004ac0:	08004a71 	.word	0x08004a71
 8004ac4:	08004a71 	.word	0x08004a71
 8004ac8:	08004c15 	.word	0x08004c15
 8004acc:	08004a71 	.word	0x08004a71
 8004ad0:	08004b1f 	.word	0x08004b1f
 8004ad4:	08004a71 	.word	0x08004a71
 8004ad8:	08004a71 	.word	0x08004a71
 8004adc:	08004bb5 	.word	0x08004bb5
 8004ae0:	6833      	ldr	r3, [r6, #0]
 8004ae2:	1d1a      	adds	r2, r3, #4
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6032      	str	r2, [r6, #0]
 8004ae8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004aec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004af0:	2301      	movs	r3, #1
 8004af2:	e09c      	b.n	8004c2e <_printf_i+0x1e6>
 8004af4:	6833      	ldr	r3, [r6, #0]
 8004af6:	6820      	ldr	r0, [r4, #0]
 8004af8:	1d19      	adds	r1, r3, #4
 8004afa:	6031      	str	r1, [r6, #0]
 8004afc:	0606      	lsls	r6, r0, #24
 8004afe:	d501      	bpl.n	8004b04 <_printf_i+0xbc>
 8004b00:	681d      	ldr	r5, [r3, #0]
 8004b02:	e003      	b.n	8004b0c <_printf_i+0xc4>
 8004b04:	0645      	lsls	r5, r0, #25
 8004b06:	d5fb      	bpl.n	8004b00 <_printf_i+0xb8>
 8004b08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b0c:	2d00      	cmp	r5, #0
 8004b0e:	da03      	bge.n	8004b18 <_printf_i+0xd0>
 8004b10:	232d      	movs	r3, #45	@ 0x2d
 8004b12:	426d      	negs	r5, r5
 8004b14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b18:	4858      	ldr	r0, [pc, #352]	@ (8004c7c <_printf_i+0x234>)
 8004b1a:	230a      	movs	r3, #10
 8004b1c:	e011      	b.n	8004b42 <_printf_i+0xfa>
 8004b1e:	6821      	ldr	r1, [r4, #0]
 8004b20:	6833      	ldr	r3, [r6, #0]
 8004b22:	0608      	lsls	r0, r1, #24
 8004b24:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b28:	d402      	bmi.n	8004b30 <_printf_i+0xe8>
 8004b2a:	0649      	lsls	r1, r1, #25
 8004b2c:	bf48      	it	mi
 8004b2e:	b2ad      	uxthmi	r5, r5
 8004b30:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b32:	4852      	ldr	r0, [pc, #328]	@ (8004c7c <_printf_i+0x234>)
 8004b34:	6033      	str	r3, [r6, #0]
 8004b36:	bf14      	ite	ne
 8004b38:	230a      	movne	r3, #10
 8004b3a:	2308      	moveq	r3, #8
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b42:	6866      	ldr	r6, [r4, #4]
 8004b44:	60a6      	str	r6, [r4, #8]
 8004b46:	2e00      	cmp	r6, #0
 8004b48:	db05      	blt.n	8004b56 <_printf_i+0x10e>
 8004b4a:	6821      	ldr	r1, [r4, #0]
 8004b4c:	432e      	orrs	r6, r5
 8004b4e:	f021 0104 	bic.w	r1, r1, #4
 8004b52:	6021      	str	r1, [r4, #0]
 8004b54:	d04b      	beq.n	8004bee <_printf_i+0x1a6>
 8004b56:	4616      	mov	r6, r2
 8004b58:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b5c:	fb03 5711 	mls	r7, r3, r1, r5
 8004b60:	5dc7      	ldrb	r7, [r0, r7]
 8004b62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b66:	462f      	mov	r7, r5
 8004b68:	42bb      	cmp	r3, r7
 8004b6a:	460d      	mov	r5, r1
 8004b6c:	d9f4      	bls.n	8004b58 <_printf_i+0x110>
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d10b      	bne.n	8004b8a <_printf_i+0x142>
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	07df      	lsls	r7, r3, #31
 8004b76:	d508      	bpl.n	8004b8a <_printf_i+0x142>
 8004b78:	6923      	ldr	r3, [r4, #16]
 8004b7a:	6861      	ldr	r1, [r4, #4]
 8004b7c:	4299      	cmp	r1, r3
 8004b7e:	bfde      	ittt	le
 8004b80:	2330      	movle	r3, #48	@ 0x30
 8004b82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b86:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b8a:	1b92      	subs	r2, r2, r6
 8004b8c:	6122      	str	r2, [r4, #16]
 8004b8e:	f8cd a000 	str.w	sl, [sp]
 8004b92:	464b      	mov	r3, r9
 8004b94:	aa03      	add	r2, sp, #12
 8004b96:	4621      	mov	r1, r4
 8004b98:	4640      	mov	r0, r8
 8004b9a:	f7ff fee7 	bl	800496c <_printf_common>
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	d14a      	bne.n	8004c38 <_printf_i+0x1f0>
 8004ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba6:	b004      	add	sp, #16
 8004ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	f043 0320 	orr.w	r3, r3, #32
 8004bb2:	6023      	str	r3, [r4, #0]
 8004bb4:	4832      	ldr	r0, [pc, #200]	@ (8004c80 <_printf_i+0x238>)
 8004bb6:	2778      	movs	r7, #120	@ 0x78
 8004bb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	6831      	ldr	r1, [r6, #0]
 8004bc0:	061f      	lsls	r7, r3, #24
 8004bc2:	f851 5b04 	ldr.w	r5, [r1], #4
 8004bc6:	d402      	bmi.n	8004bce <_printf_i+0x186>
 8004bc8:	065f      	lsls	r7, r3, #25
 8004bca:	bf48      	it	mi
 8004bcc:	b2ad      	uxthmi	r5, r5
 8004bce:	6031      	str	r1, [r6, #0]
 8004bd0:	07d9      	lsls	r1, r3, #31
 8004bd2:	bf44      	itt	mi
 8004bd4:	f043 0320 	orrmi.w	r3, r3, #32
 8004bd8:	6023      	strmi	r3, [r4, #0]
 8004bda:	b11d      	cbz	r5, 8004be4 <_printf_i+0x19c>
 8004bdc:	2310      	movs	r3, #16
 8004bde:	e7ad      	b.n	8004b3c <_printf_i+0xf4>
 8004be0:	4826      	ldr	r0, [pc, #152]	@ (8004c7c <_printf_i+0x234>)
 8004be2:	e7e9      	b.n	8004bb8 <_printf_i+0x170>
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	f023 0320 	bic.w	r3, r3, #32
 8004bea:	6023      	str	r3, [r4, #0]
 8004bec:	e7f6      	b.n	8004bdc <_printf_i+0x194>
 8004bee:	4616      	mov	r6, r2
 8004bf0:	e7bd      	b.n	8004b6e <_printf_i+0x126>
 8004bf2:	6833      	ldr	r3, [r6, #0]
 8004bf4:	6825      	ldr	r5, [r4, #0]
 8004bf6:	6961      	ldr	r1, [r4, #20]
 8004bf8:	1d18      	adds	r0, r3, #4
 8004bfa:	6030      	str	r0, [r6, #0]
 8004bfc:	062e      	lsls	r6, r5, #24
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	d501      	bpl.n	8004c06 <_printf_i+0x1be>
 8004c02:	6019      	str	r1, [r3, #0]
 8004c04:	e002      	b.n	8004c0c <_printf_i+0x1c4>
 8004c06:	0668      	lsls	r0, r5, #25
 8004c08:	d5fb      	bpl.n	8004c02 <_printf_i+0x1ba>
 8004c0a:	8019      	strh	r1, [r3, #0]
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	6123      	str	r3, [r4, #16]
 8004c10:	4616      	mov	r6, r2
 8004c12:	e7bc      	b.n	8004b8e <_printf_i+0x146>
 8004c14:	6833      	ldr	r3, [r6, #0]
 8004c16:	1d1a      	adds	r2, r3, #4
 8004c18:	6032      	str	r2, [r6, #0]
 8004c1a:	681e      	ldr	r6, [r3, #0]
 8004c1c:	6862      	ldr	r2, [r4, #4]
 8004c1e:	2100      	movs	r1, #0
 8004c20:	4630      	mov	r0, r6
 8004c22:	f7fb fad5 	bl	80001d0 <memchr>
 8004c26:	b108      	cbz	r0, 8004c2c <_printf_i+0x1e4>
 8004c28:	1b80      	subs	r0, r0, r6
 8004c2a:	6060      	str	r0, [r4, #4]
 8004c2c:	6863      	ldr	r3, [r4, #4]
 8004c2e:	6123      	str	r3, [r4, #16]
 8004c30:	2300      	movs	r3, #0
 8004c32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c36:	e7aa      	b.n	8004b8e <_printf_i+0x146>
 8004c38:	6923      	ldr	r3, [r4, #16]
 8004c3a:	4632      	mov	r2, r6
 8004c3c:	4649      	mov	r1, r9
 8004c3e:	4640      	mov	r0, r8
 8004c40:	47d0      	blx	sl
 8004c42:	3001      	adds	r0, #1
 8004c44:	d0ad      	beq.n	8004ba2 <_printf_i+0x15a>
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	079b      	lsls	r3, r3, #30
 8004c4a:	d413      	bmi.n	8004c74 <_printf_i+0x22c>
 8004c4c:	68e0      	ldr	r0, [r4, #12]
 8004c4e:	9b03      	ldr	r3, [sp, #12]
 8004c50:	4298      	cmp	r0, r3
 8004c52:	bfb8      	it	lt
 8004c54:	4618      	movlt	r0, r3
 8004c56:	e7a6      	b.n	8004ba6 <_printf_i+0x15e>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	4632      	mov	r2, r6
 8004c5c:	4649      	mov	r1, r9
 8004c5e:	4640      	mov	r0, r8
 8004c60:	47d0      	blx	sl
 8004c62:	3001      	adds	r0, #1
 8004c64:	d09d      	beq.n	8004ba2 <_printf_i+0x15a>
 8004c66:	3501      	adds	r5, #1
 8004c68:	68e3      	ldr	r3, [r4, #12]
 8004c6a:	9903      	ldr	r1, [sp, #12]
 8004c6c:	1a5b      	subs	r3, r3, r1
 8004c6e:	42ab      	cmp	r3, r5
 8004c70:	dcf2      	bgt.n	8004c58 <_printf_i+0x210>
 8004c72:	e7eb      	b.n	8004c4c <_printf_i+0x204>
 8004c74:	2500      	movs	r5, #0
 8004c76:	f104 0619 	add.w	r6, r4, #25
 8004c7a:	e7f5      	b.n	8004c68 <_printf_i+0x220>
 8004c7c:	08006d6e 	.word	0x08006d6e
 8004c80:	08006d7f 	.word	0x08006d7f

08004c84 <std>:
 8004c84:	2300      	movs	r3, #0
 8004c86:	b510      	push	{r4, lr}
 8004c88:	4604      	mov	r4, r0
 8004c8a:	e9c0 3300 	strd	r3, r3, [r0]
 8004c8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c92:	6083      	str	r3, [r0, #8]
 8004c94:	8181      	strh	r1, [r0, #12]
 8004c96:	6643      	str	r3, [r0, #100]	@ 0x64
 8004c98:	81c2      	strh	r2, [r0, #14]
 8004c9a:	6183      	str	r3, [r0, #24]
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	2208      	movs	r2, #8
 8004ca0:	305c      	adds	r0, #92	@ 0x5c
 8004ca2:	f000 f906 	bl	8004eb2 <memset>
 8004ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cdc <std+0x58>)
 8004ca8:	6263      	str	r3, [r4, #36]	@ 0x24
 8004caa:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce0 <std+0x5c>)
 8004cac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004cae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce4 <std+0x60>)
 8004cb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce8 <std+0x64>)
 8004cb4:	6323      	str	r3, [r4, #48]	@ 0x30
 8004cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cec <std+0x68>)
 8004cb8:	6224      	str	r4, [r4, #32]
 8004cba:	429c      	cmp	r4, r3
 8004cbc:	d006      	beq.n	8004ccc <std+0x48>
 8004cbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004cc2:	4294      	cmp	r4, r2
 8004cc4:	d002      	beq.n	8004ccc <std+0x48>
 8004cc6:	33d0      	adds	r3, #208	@ 0xd0
 8004cc8:	429c      	cmp	r4, r3
 8004cca:	d105      	bne.n	8004cd8 <std+0x54>
 8004ccc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cd4:	f000 b96a 	b.w	8004fac <__retarget_lock_init_recursive>
 8004cd8:	bd10      	pop	{r4, pc}
 8004cda:	bf00      	nop
 8004cdc:	08004e2d 	.word	0x08004e2d
 8004ce0:	08004e4f 	.word	0x08004e4f
 8004ce4:	08004e87 	.word	0x08004e87
 8004ce8:	08004eab 	.word	0x08004eab
 8004cec:	200002dc 	.word	0x200002dc

08004cf0 <stdio_exit_handler>:
 8004cf0:	4a02      	ldr	r2, [pc, #8]	@ (8004cfc <stdio_exit_handler+0xc>)
 8004cf2:	4903      	ldr	r1, [pc, #12]	@ (8004d00 <stdio_exit_handler+0x10>)
 8004cf4:	4803      	ldr	r0, [pc, #12]	@ (8004d04 <stdio_exit_handler+0x14>)
 8004cf6:	f000 b869 	b.w	8004dcc <_fwalk_sglue>
 8004cfa:	bf00      	nop
 8004cfc:	2000000c 	.word	0x2000000c
 8004d00:	080068e9 	.word	0x080068e9
 8004d04:	2000001c 	.word	0x2000001c

08004d08 <cleanup_stdio>:
 8004d08:	6841      	ldr	r1, [r0, #4]
 8004d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d3c <cleanup_stdio+0x34>)
 8004d0c:	4299      	cmp	r1, r3
 8004d0e:	b510      	push	{r4, lr}
 8004d10:	4604      	mov	r4, r0
 8004d12:	d001      	beq.n	8004d18 <cleanup_stdio+0x10>
 8004d14:	f001 fde8 	bl	80068e8 <_fflush_r>
 8004d18:	68a1      	ldr	r1, [r4, #8]
 8004d1a:	4b09      	ldr	r3, [pc, #36]	@ (8004d40 <cleanup_stdio+0x38>)
 8004d1c:	4299      	cmp	r1, r3
 8004d1e:	d002      	beq.n	8004d26 <cleanup_stdio+0x1e>
 8004d20:	4620      	mov	r0, r4
 8004d22:	f001 fde1 	bl	80068e8 <_fflush_r>
 8004d26:	68e1      	ldr	r1, [r4, #12]
 8004d28:	4b06      	ldr	r3, [pc, #24]	@ (8004d44 <cleanup_stdio+0x3c>)
 8004d2a:	4299      	cmp	r1, r3
 8004d2c:	d004      	beq.n	8004d38 <cleanup_stdio+0x30>
 8004d2e:	4620      	mov	r0, r4
 8004d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d34:	f001 bdd8 	b.w	80068e8 <_fflush_r>
 8004d38:	bd10      	pop	{r4, pc}
 8004d3a:	bf00      	nop
 8004d3c:	200002dc 	.word	0x200002dc
 8004d40:	20000344 	.word	0x20000344
 8004d44:	200003ac 	.word	0x200003ac

08004d48 <global_stdio_init.part.0>:
 8004d48:	b510      	push	{r4, lr}
 8004d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d78 <global_stdio_init.part.0+0x30>)
 8004d4c:	4c0b      	ldr	r4, [pc, #44]	@ (8004d7c <global_stdio_init.part.0+0x34>)
 8004d4e:	4a0c      	ldr	r2, [pc, #48]	@ (8004d80 <global_stdio_init.part.0+0x38>)
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	4620      	mov	r0, r4
 8004d54:	2200      	movs	r2, #0
 8004d56:	2104      	movs	r1, #4
 8004d58:	f7ff ff94 	bl	8004c84 <std>
 8004d5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004d60:	2201      	movs	r2, #1
 8004d62:	2109      	movs	r1, #9
 8004d64:	f7ff ff8e 	bl	8004c84 <std>
 8004d68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d72:	2112      	movs	r1, #18
 8004d74:	f7ff bf86 	b.w	8004c84 <std>
 8004d78:	20000414 	.word	0x20000414
 8004d7c:	200002dc 	.word	0x200002dc
 8004d80:	08004cf1 	.word	0x08004cf1

08004d84 <__sfp_lock_acquire>:
 8004d84:	4801      	ldr	r0, [pc, #4]	@ (8004d8c <__sfp_lock_acquire+0x8>)
 8004d86:	f000 b912 	b.w	8004fae <__retarget_lock_acquire_recursive>
 8004d8a:	bf00      	nop
 8004d8c:	2000041d 	.word	0x2000041d

08004d90 <__sfp_lock_release>:
 8004d90:	4801      	ldr	r0, [pc, #4]	@ (8004d98 <__sfp_lock_release+0x8>)
 8004d92:	f000 b90d 	b.w	8004fb0 <__retarget_lock_release_recursive>
 8004d96:	bf00      	nop
 8004d98:	2000041d 	.word	0x2000041d

08004d9c <__sinit>:
 8004d9c:	b510      	push	{r4, lr}
 8004d9e:	4604      	mov	r4, r0
 8004da0:	f7ff fff0 	bl	8004d84 <__sfp_lock_acquire>
 8004da4:	6a23      	ldr	r3, [r4, #32]
 8004da6:	b11b      	cbz	r3, 8004db0 <__sinit+0x14>
 8004da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dac:	f7ff bff0 	b.w	8004d90 <__sfp_lock_release>
 8004db0:	4b04      	ldr	r3, [pc, #16]	@ (8004dc4 <__sinit+0x28>)
 8004db2:	6223      	str	r3, [r4, #32]
 8004db4:	4b04      	ldr	r3, [pc, #16]	@ (8004dc8 <__sinit+0x2c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1f5      	bne.n	8004da8 <__sinit+0xc>
 8004dbc:	f7ff ffc4 	bl	8004d48 <global_stdio_init.part.0>
 8004dc0:	e7f2      	b.n	8004da8 <__sinit+0xc>
 8004dc2:	bf00      	nop
 8004dc4:	08004d09 	.word	0x08004d09
 8004dc8:	20000414 	.word	0x20000414

08004dcc <_fwalk_sglue>:
 8004dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dd0:	4607      	mov	r7, r0
 8004dd2:	4688      	mov	r8, r1
 8004dd4:	4614      	mov	r4, r2
 8004dd6:	2600      	movs	r6, #0
 8004dd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ddc:	f1b9 0901 	subs.w	r9, r9, #1
 8004de0:	d505      	bpl.n	8004dee <_fwalk_sglue+0x22>
 8004de2:	6824      	ldr	r4, [r4, #0]
 8004de4:	2c00      	cmp	r4, #0
 8004de6:	d1f7      	bne.n	8004dd8 <_fwalk_sglue+0xc>
 8004de8:	4630      	mov	r0, r6
 8004dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dee:	89ab      	ldrh	r3, [r5, #12]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d907      	bls.n	8004e04 <_fwalk_sglue+0x38>
 8004df4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	d003      	beq.n	8004e04 <_fwalk_sglue+0x38>
 8004dfc:	4629      	mov	r1, r5
 8004dfe:	4638      	mov	r0, r7
 8004e00:	47c0      	blx	r8
 8004e02:	4306      	orrs	r6, r0
 8004e04:	3568      	adds	r5, #104	@ 0x68
 8004e06:	e7e9      	b.n	8004ddc <_fwalk_sglue+0x10>

08004e08 <iprintf>:
 8004e08:	b40f      	push	{r0, r1, r2, r3}
 8004e0a:	b507      	push	{r0, r1, r2, lr}
 8004e0c:	4906      	ldr	r1, [pc, #24]	@ (8004e28 <iprintf+0x20>)
 8004e0e:	ab04      	add	r3, sp, #16
 8004e10:	6808      	ldr	r0, [r1, #0]
 8004e12:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e16:	6881      	ldr	r1, [r0, #8]
 8004e18:	9301      	str	r3, [sp, #4]
 8004e1a:	f001 fbc9 	bl	80065b0 <_vfiprintf_r>
 8004e1e:	b003      	add	sp, #12
 8004e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e24:	b004      	add	sp, #16
 8004e26:	4770      	bx	lr
 8004e28:	20000018 	.word	0x20000018

08004e2c <__sread>:
 8004e2c:	b510      	push	{r4, lr}
 8004e2e:	460c      	mov	r4, r1
 8004e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e34:	f000 f86c 	bl	8004f10 <_read_r>
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	bfab      	itete	ge
 8004e3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004e3e:	89a3      	ldrhlt	r3, [r4, #12]
 8004e40:	181b      	addge	r3, r3, r0
 8004e42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004e46:	bfac      	ite	ge
 8004e48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004e4a:	81a3      	strhlt	r3, [r4, #12]
 8004e4c:	bd10      	pop	{r4, pc}

08004e4e <__swrite>:
 8004e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e52:	461f      	mov	r7, r3
 8004e54:	898b      	ldrh	r3, [r1, #12]
 8004e56:	05db      	lsls	r3, r3, #23
 8004e58:	4605      	mov	r5, r0
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	4616      	mov	r6, r2
 8004e5e:	d505      	bpl.n	8004e6c <__swrite+0x1e>
 8004e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e64:	2302      	movs	r3, #2
 8004e66:	2200      	movs	r2, #0
 8004e68:	f000 f840 	bl	8004eec <_lseek_r>
 8004e6c:	89a3      	ldrh	r3, [r4, #12]
 8004e6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e76:	81a3      	strh	r3, [r4, #12]
 8004e78:	4632      	mov	r2, r6
 8004e7a:	463b      	mov	r3, r7
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e82:	f000 b857 	b.w	8004f34 <_write_r>

08004e86 <__sseek>:
 8004e86:	b510      	push	{r4, lr}
 8004e88:	460c      	mov	r4, r1
 8004e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e8e:	f000 f82d 	bl	8004eec <_lseek_r>
 8004e92:	1c43      	adds	r3, r0, #1
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	bf15      	itete	ne
 8004e98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004e9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004e9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004ea2:	81a3      	strheq	r3, [r4, #12]
 8004ea4:	bf18      	it	ne
 8004ea6:	81a3      	strhne	r3, [r4, #12]
 8004ea8:	bd10      	pop	{r4, pc}

08004eaa <__sclose>:
 8004eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eae:	f000 b80d 	b.w	8004ecc <_close_r>

08004eb2 <memset>:
 8004eb2:	4402      	add	r2, r0
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d100      	bne.n	8004ebc <memset+0xa>
 8004eba:	4770      	bx	lr
 8004ebc:	f803 1b01 	strb.w	r1, [r3], #1
 8004ec0:	e7f9      	b.n	8004eb6 <memset+0x4>
	...

08004ec4 <_localeconv_r>:
 8004ec4:	4800      	ldr	r0, [pc, #0]	@ (8004ec8 <_localeconv_r+0x4>)
 8004ec6:	4770      	bx	lr
 8004ec8:	20000158 	.word	0x20000158

08004ecc <_close_r>:
 8004ecc:	b538      	push	{r3, r4, r5, lr}
 8004ece:	4d06      	ldr	r5, [pc, #24]	@ (8004ee8 <_close_r+0x1c>)
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	4604      	mov	r4, r0
 8004ed4:	4608      	mov	r0, r1
 8004ed6:	602b      	str	r3, [r5, #0]
 8004ed8:	f7fc fc01 	bl	80016de <_close>
 8004edc:	1c43      	adds	r3, r0, #1
 8004ede:	d102      	bne.n	8004ee6 <_close_r+0x1a>
 8004ee0:	682b      	ldr	r3, [r5, #0]
 8004ee2:	b103      	cbz	r3, 8004ee6 <_close_r+0x1a>
 8004ee4:	6023      	str	r3, [r4, #0]
 8004ee6:	bd38      	pop	{r3, r4, r5, pc}
 8004ee8:	20000418 	.word	0x20000418

08004eec <_lseek_r>:
 8004eec:	b538      	push	{r3, r4, r5, lr}
 8004eee:	4d07      	ldr	r5, [pc, #28]	@ (8004f0c <_lseek_r+0x20>)
 8004ef0:	4604      	mov	r4, r0
 8004ef2:	4608      	mov	r0, r1
 8004ef4:	4611      	mov	r1, r2
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	602a      	str	r2, [r5, #0]
 8004efa:	461a      	mov	r2, r3
 8004efc:	f7fc fc16 	bl	800172c <_lseek>
 8004f00:	1c43      	adds	r3, r0, #1
 8004f02:	d102      	bne.n	8004f0a <_lseek_r+0x1e>
 8004f04:	682b      	ldr	r3, [r5, #0]
 8004f06:	b103      	cbz	r3, 8004f0a <_lseek_r+0x1e>
 8004f08:	6023      	str	r3, [r4, #0]
 8004f0a:	bd38      	pop	{r3, r4, r5, pc}
 8004f0c:	20000418 	.word	0x20000418

08004f10 <_read_r>:
 8004f10:	b538      	push	{r3, r4, r5, lr}
 8004f12:	4d07      	ldr	r5, [pc, #28]	@ (8004f30 <_read_r+0x20>)
 8004f14:	4604      	mov	r4, r0
 8004f16:	4608      	mov	r0, r1
 8004f18:	4611      	mov	r1, r2
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	602a      	str	r2, [r5, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f7fc fba4 	bl	800166c <_read>
 8004f24:	1c43      	adds	r3, r0, #1
 8004f26:	d102      	bne.n	8004f2e <_read_r+0x1e>
 8004f28:	682b      	ldr	r3, [r5, #0]
 8004f2a:	b103      	cbz	r3, 8004f2e <_read_r+0x1e>
 8004f2c:	6023      	str	r3, [r4, #0]
 8004f2e:	bd38      	pop	{r3, r4, r5, pc}
 8004f30:	20000418 	.word	0x20000418

08004f34 <_write_r>:
 8004f34:	b538      	push	{r3, r4, r5, lr}
 8004f36:	4d07      	ldr	r5, [pc, #28]	@ (8004f54 <_write_r+0x20>)
 8004f38:	4604      	mov	r4, r0
 8004f3a:	4608      	mov	r0, r1
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	2200      	movs	r2, #0
 8004f40:	602a      	str	r2, [r5, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	f7fc fbaf 	bl	80016a6 <_write>
 8004f48:	1c43      	adds	r3, r0, #1
 8004f4a:	d102      	bne.n	8004f52 <_write_r+0x1e>
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	b103      	cbz	r3, 8004f52 <_write_r+0x1e>
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	bd38      	pop	{r3, r4, r5, pc}
 8004f54:	20000418 	.word	0x20000418

08004f58 <__errno>:
 8004f58:	4b01      	ldr	r3, [pc, #4]	@ (8004f60 <__errno+0x8>)
 8004f5a:	6818      	ldr	r0, [r3, #0]
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	20000018 	.word	0x20000018

08004f64 <__libc_init_array>:
 8004f64:	b570      	push	{r4, r5, r6, lr}
 8004f66:	4d0d      	ldr	r5, [pc, #52]	@ (8004f9c <__libc_init_array+0x38>)
 8004f68:	4c0d      	ldr	r4, [pc, #52]	@ (8004fa0 <__libc_init_array+0x3c>)
 8004f6a:	1b64      	subs	r4, r4, r5
 8004f6c:	10a4      	asrs	r4, r4, #2
 8004f6e:	2600      	movs	r6, #0
 8004f70:	42a6      	cmp	r6, r4
 8004f72:	d109      	bne.n	8004f88 <__libc_init_array+0x24>
 8004f74:	4d0b      	ldr	r5, [pc, #44]	@ (8004fa4 <__libc_init_array+0x40>)
 8004f76:	4c0c      	ldr	r4, [pc, #48]	@ (8004fa8 <__libc_init_array+0x44>)
 8004f78:	f001 fec4 	bl	8006d04 <_init>
 8004f7c:	1b64      	subs	r4, r4, r5
 8004f7e:	10a4      	asrs	r4, r4, #2
 8004f80:	2600      	movs	r6, #0
 8004f82:	42a6      	cmp	r6, r4
 8004f84:	d105      	bne.n	8004f92 <__libc_init_array+0x2e>
 8004f86:	bd70      	pop	{r4, r5, r6, pc}
 8004f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f8c:	4798      	blx	r3
 8004f8e:	3601      	adds	r6, #1
 8004f90:	e7ee      	b.n	8004f70 <__libc_init_array+0xc>
 8004f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f96:	4798      	blx	r3
 8004f98:	3601      	adds	r6, #1
 8004f9a:	e7f2      	b.n	8004f82 <__libc_init_array+0x1e>
 8004f9c:	080070dc 	.word	0x080070dc
 8004fa0:	080070dc 	.word	0x080070dc
 8004fa4:	080070dc 	.word	0x080070dc
 8004fa8:	080070e0 	.word	0x080070e0

08004fac <__retarget_lock_init_recursive>:
 8004fac:	4770      	bx	lr

08004fae <__retarget_lock_acquire_recursive>:
 8004fae:	4770      	bx	lr

08004fb0 <__retarget_lock_release_recursive>:
 8004fb0:	4770      	bx	lr

08004fb2 <quorem>:
 8004fb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb6:	6903      	ldr	r3, [r0, #16]
 8004fb8:	690c      	ldr	r4, [r1, #16]
 8004fba:	42a3      	cmp	r3, r4
 8004fbc:	4607      	mov	r7, r0
 8004fbe:	db7e      	blt.n	80050be <quorem+0x10c>
 8004fc0:	3c01      	subs	r4, #1
 8004fc2:	f101 0814 	add.w	r8, r1, #20
 8004fc6:	00a3      	lsls	r3, r4, #2
 8004fc8:	f100 0514 	add.w	r5, r0, #20
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fd2:	9301      	str	r3, [sp, #4]
 8004fd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004fd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004fe4:	fbb2 f6f3 	udiv	r6, r2, r3
 8004fe8:	d32e      	bcc.n	8005048 <quorem+0x96>
 8004fea:	f04f 0a00 	mov.w	sl, #0
 8004fee:	46c4      	mov	ip, r8
 8004ff0:	46ae      	mov	lr, r5
 8004ff2:	46d3      	mov	fp, sl
 8004ff4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004ff8:	b298      	uxth	r0, r3
 8004ffa:	fb06 a000 	mla	r0, r6, r0, sl
 8004ffe:	0c02      	lsrs	r2, r0, #16
 8005000:	0c1b      	lsrs	r3, r3, #16
 8005002:	fb06 2303 	mla	r3, r6, r3, r2
 8005006:	f8de 2000 	ldr.w	r2, [lr]
 800500a:	b280      	uxth	r0, r0
 800500c:	b292      	uxth	r2, r2
 800500e:	1a12      	subs	r2, r2, r0
 8005010:	445a      	add	r2, fp
 8005012:	f8de 0000 	ldr.w	r0, [lr]
 8005016:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800501a:	b29b      	uxth	r3, r3
 800501c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005020:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005024:	b292      	uxth	r2, r2
 8005026:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800502a:	45e1      	cmp	r9, ip
 800502c:	f84e 2b04 	str.w	r2, [lr], #4
 8005030:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005034:	d2de      	bcs.n	8004ff4 <quorem+0x42>
 8005036:	9b00      	ldr	r3, [sp, #0]
 8005038:	58eb      	ldr	r3, [r5, r3]
 800503a:	b92b      	cbnz	r3, 8005048 <quorem+0x96>
 800503c:	9b01      	ldr	r3, [sp, #4]
 800503e:	3b04      	subs	r3, #4
 8005040:	429d      	cmp	r5, r3
 8005042:	461a      	mov	r2, r3
 8005044:	d32f      	bcc.n	80050a6 <quorem+0xf4>
 8005046:	613c      	str	r4, [r7, #16]
 8005048:	4638      	mov	r0, r7
 800504a:	f001 f97f 	bl	800634c <__mcmp>
 800504e:	2800      	cmp	r0, #0
 8005050:	db25      	blt.n	800509e <quorem+0xec>
 8005052:	4629      	mov	r1, r5
 8005054:	2000      	movs	r0, #0
 8005056:	f858 2b04 	ldr.w	r2, [r8], #4
 800505a:	f8d1 c000 	ldr.w	ip, [r1]
 800505e:	fa1f fe82 	uxth.w	lr, r2
 8005062:	fa1f f38c 	uxth.w	r3, ip
 8005066:	eba3 030e 	sub.w	r3, r3, lr
 800506a:	4403      	add	r3, r0
 800506c:	0c12      	lsrs	r2, r2, #16
 800506e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005072:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005076:	b29b      	uxth	r3, r3
 8005078:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800507c:	45c1      	cmp	r9, r8
 800507e:	f841 3b04 	str.w	r3, [r1], #4
 8005082:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005086:	d2e6      	bcs.n	8005056 <quorem+0xa4>
 8005088:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800508c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005090:	b922      	cbnz	r2, 800509c <quorem+0xea>
 8005092:	3b04      	subs	r3, #4
 8005094:	429d      	cmp	r5, r3
 8005096:	461a      	mov	r2, r3
 8005098:	d30b      	bcc.n	80050b2 <quorem+0x100>
 800509a:	613c      	str	r4, [r7, #16]
 800509c:	3601      	adds	r6, #1
 800509e:	4630      	mov	r0, r6
 80050a0:	b003      	add	sp, #12
 80050a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050a6:	6812      	ldr	r2, [r2, #0]
 80050a8:	3b04      	subs	r3, #4
 80050aa:	2a00      	cmp	r2, #0
 80050ac:	d1cb      	bne.n	8005046 <quorem+0x94>
 80050ae:	3c01      	subs	r4, #1
 80050b0:	e7c6      	b.n	8005040 <quorem+0x8e>
 80050b2:	6812      	ldr	r2, [r2, #0]
 80050b4:	3b04      	subs	r3, #4
 80050b6:	2a00      	cmp	r2, #0
 80050b8:	d1ef      	bne.n	800509a <quorem+0xe8>
 80050ba:	3c01      	subs	r4, #1
 80050bc:	e7ea      	b.n	8005094 <quorem+0xe2>
 80050be:	2000      	movs	r0, #0
 80050c0:	e7ee      	b.n	80050a0 <quorem+0xee>
 80050c2:	0000      	movs	r0, r0
 80050c4:	0000      	movs	r0, r0
	...

080050c8 <_dtoa_r>:
 80050c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050cc:	69c7      	ldr	r7, [r0, #28]
 80050ce:	b097      	sub	sp, #92	@ 0x5c
 80050d0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80050d4:	ec55 4b10 	vmov	r4, r5, d0
 80050d8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80050da:	9107      	str	r1, [sp, #28]
 80050dc:	4681      	mov	r9, r0
 80050de:	920c      	str	r2, [sp, #48]	@ 0x30
 80050e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80050e2:	b97f      	cbnz	r7, 8005104 <_dtoa_r+0x3c>
 80050e4:	2010      	movs	r0, #16
 80050e6:	f000 fe09 	bl	8005cfc <malloc>
 80050ea:	4602      	mov	r2, r0
 80050ec:	f8c9 001c 	str.w	r0, [r9, #28]
 80050f0:	b920      	cbnz	r0, 80050fc <_dtoa_r+0x34>
 80050f2:	4ba9      	ldr	r3, [pc, #676]	@ (8005398 <_dtoa_r+0x2d0>)
 80050f4:	21ef      	movs	r1, #239	@ 0xef
 80050f6:	48a9      	ldr	r0, [pc, #676]	@ (800539c <_dtoa_r+0x2d4>)
 80050f8:	f001 fcd0 	bl	8006a9c <__assert_func>
 80050fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005100:	6007      	str	r7, [r0, #0]
 8005102:	60c7      	str	r7, [r0, #12]
 8005104:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005108:	6819      	ldr	r1, [r3, #0]
 800510a:	b159      	cbz	r1, 8005124 <_dtoa_r+0x5c>
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	604a      	str	r2, [r1, #4]
 8005110:	2301      	movs	r3, #1
 8005112:	4093      	lsls	r3, r2
 8005114:	608b      	str	r3, [r1, #8]
 8005116:	4648      	mov	r0, r9
 8005118:	f000 fee6 	bl	8005ee8 <_Bfree>
 800511c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005120:	2200      	movs	r2, #0
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	1e2b      	subs	r3, r5, #0
 8005126:	bfb9      	ittee	lt
 8005128:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800512c:	9305      	strlt	r3, [sp, #20]
 800512e:	2300      	movge	r3, #0
 8005130:	6033      	strge	r3, [r6, #0]
 8005132:	9f05      	ldr	r7, [sp, #20]
 8005134:	4b9a      	ldr	r3, [pc, #616]	@ (80053a0 <_dtoa_r+0x2d8>)
 8005136:	bfbc      	itt	lt
 8005138:	2201      	movlt	r2, #1
 800513a:	6032      	strlt	r2, [r6, #0]
 800513c:	43bb      	bics	r3, r7
 800513e:	d112      	bne.n	8005166 <_dtoa_r+0x9e>
 8005140:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005142:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005146:	6013      	str	r3, [r2, #0]
 8005148:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800514c:	4323      	orrs	r3, r4
 800514e:	f000 855a 	beq.w	8005c06 <_dtoa_r+0xb3e>
 8005152:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005154:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80053b4 <_dtoa_r+0x2ec>
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 855c 	beq.w	8005c16 <_dtoa_r+0xb4e>
 800515e:	f10a 0303 	add.w	r3, sl, #3
 8005162:	f000 bd56 	b.w	8005c12 <_dtoa_r+0xb4a>
 8005166:	ed9d 7b04 	vldr	d7, [sp, #16]
 800516a:	2200      	movs	r2, #0
 800516c:	ec51 0b17 	vmov	r0, r1, d7
 8005170:	2300      	movs	r3, #0
 8005172:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005176:	f7fb fca7 	bl	8000ac8 <__aeabi_dcmpeq>
 800517a:	4680      	mov	r8, r0
 800517c:	b158      	cbz	r0, 8005196 <_dtoa_r+0xce>
 800517e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005180:	2301      	movs	r3, #1
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005186:	b113      	cbz	r3, 800518e <_dtoa_r+0xc6>
 8005188:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800518a:	4b86      	ldr	r3, [pc, #536]	@ (80053a4 <_dtoa_r+0x2dc>)
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80053b8 <_dtoa_r+0x2f0>
 8005192:	f000 bd40 	b.w	8005c16 <_dtoa_r+0xb4e>
 8005196:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800519a:	aa14      	add	r2, sp, #80	@ 0x50
 800519c:	a915      	add	r1, sp, #84	@ 0x54
 800519e:	4648      	mov	r0, r9
 80051a0:	f001 f984 	bl	80064ac <__d2b>
 80051a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80051a8:	9002      	str	r0, [sp, #8]
 80051aa:	2e00      	cmp	r6, #0
 80051ac:	d078      	beq.n	80052a0 <_dtoa_r+0x1d8>
 80051ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051b0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80051b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80051bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80051c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80051c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80051c8:	4619      	mov	r1, r3
 80051ca:	2200      	movs	r2, #0
 80051cc:	4b76      	ldr	r3, [pc, #472]	@ (80053a8 <_dtoa_r+0x2e0>)
 80051ce:	f7fb f85b 	bl	8000288 <__aeabi_dsub>
 80051d2:	a36b      	add	r3, pc, #428	@ (adr r3, 8005380 <_dtoa_r+0x2b8>)
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	f7fb fa0e 	bl	80005f8 <__aeabi_dmul>
 80051dc:	a36a      	add	r3, pc, #424	@ (adr r3, 8005388 <_dtoa_r+0x2c0>)
 80051de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e2:	f7fb f853 	bl	800028c <__adddf3>
 80051e6:	4604      	mov	r4, r0
 80051e8:	4630      	mov	r0, r6
 80051ea:	460d      	mov	r5, r1
 80051ec:	f7fb f99a 	bl	8000524 <__aeabi_i2d>
 80051f0:	a367      	add	r3, pc, #412	@ (adr r3, 8005390 <_dtoa_r+0x2c8>)
 80051f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f6:	f7fb f9ff 	bl	80005f8 <__aeabi_dmul>
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	4620      	mov	r0, r4
 8005200:	4629      	mov	r1, r5
 8005202:	f7fb f843 	bl	800028c <__adddf3>
 8005206:	4604      	mov	r4, r0
 8005208:	460d      	mov	r5, r1
 800520a:	f7fb fca5 	bl	8000b58 <__aeabi_d2iz>
 800520e:	2200      	movs	r2, #0
 8005210:	4607      	mov	r7, r0
 8005212:	2300      	movs	r3, #0
 8005214:	4620      	mov	r0, r4
 8005216:	4629      	mov	r1, r5
 8005218:	f7fb fc60 	bl	8000adc <__aeabi_dcmplt>
 800521c:	b140      	cbz	r0, 8005230 <_dtoa_r+0x168>
 800521e:	4638      	mov	r0, r7
 8005220:	f7fb f980 	bl	8000524 <__aeabi_i2d>
 8005224:	4622      	mov	r2, r4
 8005226:	462b      	mov	r3, r5
 8005228:	f7fb fc4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800522c:	b900      	cbnz	r0, 8005230 <_dtoa_r+0x168>
 800522e:	3f01      	subs	r7, #1
 8005230:	2f16      	cmp	r7, #22
 8005232:	d852      	bhi.n	80052da <_dtoa_r+0x212>
 8005234:	4b5d      	ldr	r3, [pc, #372]	@ (80053ac <_dtoa_r+0x2e4>)
 8005236:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005242:	f7fb fc4b 	bl	8000adc <__aeabi_dcmplt>
 8005246:	2800      	cmp	r0, #0
 8005248:	d049      	beq.n	80052de <_dtoa_r+0x216>
 800524a:	3f01      	subs	r7, #1
 800524c:	2300      	movs	r3, #0
 800524e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005250:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005252:	1b9b      	subs	r3, r3, r6
 8005254:	1e5a      	subs	r2, r3, #1
 8005256:	bf45      	ittet	mi
 8005258:	f1c3 0301 	rsbmi	r3, r3, #1
 800525c:	9300      	strmi	r3, [sp, #0]
 800525e:	2300      	movpl	r3, #0
 8005260:	2300      	movmi	r3, #0
 8005262:	9206      	str	r2, [sp, #24]
 8005264:	bf54      	ite	pl
 8005266:	9300      	strpl	r3, [sp, #0]
 8005268:	9306      	strmi	r3, [sp, #24]
 800526a:	2f00      	cmp	r7, #0
 800526c:	db39      	blt.n	80052e2 <_dtoa_r+0x21a>
 800526e:	9b06      	ldr	r3, [sp, #24]
 8005270:	970d      	str	r7, [sp, #52]	@ 0x34
 8005272:	443b      	add	r3, r7
 8005274:	9306      	str	r3, [sp, #24]
 8005276:	2300      	movs	r3, #0
 8005278:	9308      	str	r3, [sp, #32]
 800527a:	9b07      	ldr	r3, [sp, #28]
 800527c:	2b09      	cmp	r3, #9
 800527e:	d863      	bhi.n	8005348 <_dtoa_r+0x280>
 8005280:	2b05      	cmp	r3, #5
 8005282:	bfc4      	itt	gt
 8005284:	3b04      	subgt	r3, #4
 8005286:	9307      	strgt	r3, [sp, #28]
 8005288:	9b07      	ldr	r3, [sp, #28]
 800528a:	f1a3 0302 	sub.w	r3, r3, #2
 800528e:	bfcc      	ite	gt
 8005290:	2400      	movgt	r4, #0
 8005292:	2401      	movle	r4, #1
 8005294:	2b03      	cmp	r3, #3
 8005296:	d863      	bhi.n	8005360 <_dtoa_r+0x298>
 8005298:	e8df f003 	tbb	[pc, r3]
 800529c:	2b375452 	.word	0x2b375452
 80052a0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80052a4:	441e      	add	r6, r3
 80052a6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80052aa:	2b20      	cmp	r3, #32
 80052ac:	bfc1      	itttt	gt
 80052ae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80052b2:	409f      	lslgt	r7, r3
 80052b4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80052b8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80052bc:	bfd6      	itet	le
 80052be:	f1c3 0320 	rsble	r3, r3, #32
 80052c2:	ea47 0003 	orrgt.w	r0, r7, r3
 80052c6:	fa04 f003 	lslle.w	r0, r4, r3
 80052ca:	f7fb f91b 	bl	8000504 <__aeabi_ui2d>
 80052ce:	2201      	movs	r2, #1
 80052d0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80052d4:	3e01      	subs	r6, #1
 80052d6:	9212      	str	r2, [sp, #72]	@ 0x48
 80052d8:	e776      	b.n	80051c8 <_dtoa_r+0x100>
 80052da:	2301      	movs	r3, #1
 80052dc:	e7b7      	b.n	800524e <_dtoa_r+0x186>
 80052de:	9010      	str	r0, [sp, #64]	@ 0x40
 80052e0:	e7b6      	b.n	8005250 <_dtoa_r+0x188>
 80052e2:	9b00      	ldr	r3, [sp, #0]
 80052e4:	1bdb      	subs	r3, r3, r7
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	427b      	negs	r3, r7
 80052ea:	9308      	str	r3, [sp, #32]
 80052ec:	2300      	movs	r3, #0
 80052ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80052f0:	e7c3      	b.n	800527a <_dtoa_r+0x1b2>
 80052f2:	2301      	movs	r3, #1
 80052f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80052f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80052f8:	eb07 0b03 	add.w	fp, r7, r3
 80052fc:	f10b 0301 	add.w	r3, fp, #1
 8005300:	2b01      	cmp	r3, #1
 8005302:	9303      	str	r3, [sp, #12]
 8005304:	bfb8      	it	lt
 8005306:	2301      	movlt	r3, #1
 8005308:	e006      	b.n	8005318 <_dtoa_r+0x250>
 800530a:	2301      	movs	r3, #1
 800530c:	9309      	str	r3, [sp, #36]	@ 0x24
 800530e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005310:	2b00      	cmp	r3, #0
 8005312:	dd28      	ble.n	8005366 <_dtoa_r+0x29e>
 8005314:	469b      	mov	fp, r3
 8005316:	9303      	str	r3, [sp, #12]
 8005318:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800531c:	2100      	movs	r1, #0
 800531e:	2204      	movs	r2, #4
 8005320:	f102 0514 	add.w	r5, r2, #20
 8005324:	429d      	cmp	r5, r3
 8005326:	d926      	bls.n	8005376 <_dtoa_r+0x2ae>
 8005328:	6041      	str	r1, [r0, #4]
 800532a:	4648      	mov	r0, r9
 800532c:	f000 fd9c 	bl	8005e68 <_Balloc>
 8005330:	4682      	mov	sl, r0
 8005332:	2800      	cmp	r0, #0
 8005334:	d142      	bne.n	80053bc <_dtoa_r+0x2f4>
 8005336:	4b1e      	ldr	r3, [pc, #120]	@ (80053b0 <_dtoa_r+0x2e8>)
 8005338:	4602      	mov	r2, r0
 800533a:	f240 11af 	movw	r1, #431	@ 0x1af
 800533e:	e6da      	b.n	80050f6 <_dtoa_r+0x2e>
 8005340:	2300      	movs	r3, #0
 8005342:	e7e3      	b.n	800530c <_dtoa_r+0x244>
 8005344:	2300      	movs	r3, #0
 8005346:	e7d5      	b.n	80052f4 <_dtoa_r+0x22c>
 8005348:	2401      	movs	r4, #1
 800534a:	2300      	movs	r3, #0
 800534c:	9307      	str	r3, [sp, #28]
 800534e:	9409      	str	r4, [sp, #36]	@ 0x24
 8005350:	f04f 3bff 	mov.w	fp, #4294967295
 8005354:	2200      	movs	r2, #0
 8005356:	f8cd b00c 	str.w	fp, [sp, #12]
 800535a:	2312      	movs	r3, #18
 800535c:	920c      	str	r2, [sp, #48]	@ 0x30
 800535e:	e7db      	b.n	8005318 <_dtoa_r+0x250>
 8005360:	2301      	movs	r3, #1
 8005362:	9309      	str	r3, [sp, #36]	@ 0x24
 8005364:	e7f4      	b.n	8005350 <_dtoa_r+0x288>
 8005366:	f04f 0b01 	mov.w	fp, #1
 800536a:	f8cd b00c 	str.w	fp, [sp, #12]
 800536e:	465b      	mov	r3, fp
 8005370:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005374:	e7d0      	b.n	8005318 <_dtoa_r+0x250>
 8005376:	3101      	adds	r1, #1
 8005378:	0052      	lsls	r2, r2, #1
 800537a:	e7d1      	b.n	8005320 <_dtoa_r+0x258>
 800537c:	f3af 8000 	nop.w
 8005380:	636f4361 	.word	0x636f4361
 8005384:	3fd287a7 	.word	0x3fd287a7
 8005388:	8b60c8b3 	.word	0x8b60c8b3
 800538c:	3fc68a28 	.word	0x3fc68a28
 8005390:	509f79fb 	.word	0x509f79fb
 8005394:	3fd34413 	.word	0x3fd34413
 8005398:	08006d9d 	.word	0x08006d9d
 800539c:	08006db4 	.word	0x08006db4
 80053a0:	7ff00000 	.word	0x7ff00000
 80053a4:	08006d6d 	.word	0x08006d6d
 80053a8:	3ff80000 	.word	0x3ff80000
 80053ac:	08006f08 	.word	0x08006f08
 80053b0:	08006e0c 	.word	0x08006e0c
 80053b4:	08006d99 	.word	0x08006d99
 80053b8:	08006d6c 	.word	0x08006d6c
 80053bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80053c0:	6018      	str	r0, [r3, #0]
 80053c2:	9b03      	ldr	r3, [sp, #12]
 80053c4:	2b0e      	cmp	r3, #14
 80053c6:	f200 80a1 	bhi.w	800550c <_dtoa_r+0x444>
 80053ca:	2c00      	cmp	r4, #0
 80053cc:	f000 809e 	beq.w	800550c <_dtoa_r+0x444>
 80053d0:	2f00      	cmp	r7, #0
 80053d2:	dd33      	ble.n	800543c <_dtoa_r+0x374>
 80053d4:	4b9c      	ldr	r3, [pc, #624]	@ (8005648 <_dtoa_r+0x580>)
 80053d6:	f007 020f 	and.w	r2, r7, #15
 80053da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053de:	ed93 7b00 	vldr	d7, [r3]
 80053e2:	05f8      	lsls	r0, r7, #23
 80053e4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80053e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80053ec:	d516      	bpl.n	800541c <_dtoa_r+0x354>
 80053ee:	4b97      	ldr	r3, [pc, #604]	@ (800564c <_dtoa_r+0x584>)
 80053f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80053f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80053f8:	f7fb fa28 	bl	800084c <__aeabi_ddiv>
 80053fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005400:	f004 040f 	and.w	r4, r4, #15
 8005404:	2603      	movs	r6, #3
 8005406:	4d91      	ldr	r5, [pc, #580]	@ (800564c <_dtoa_r+0x584>)
 8005408:	b954      	cbnz	r4, 8005420 <_dtoa_r+0x358>
 800540a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800540e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005412:	f7fb fa1b 	bl	800084c <__aeabi_ddiv>
 8005416:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800541a:	e028      	b.n	800546e <_dtoa_r+0x3a6>
 800541c:	2602      	movs	r6, #2
 800541e:	e7f2      	b.n	8005406 <_dtoa_r+0x33e>
 8005420:	07e1      	lsls	r1, r4, #31
 8005422:	d508      	bpl.n	8005436 <_dtoa_r+0x36e>
 8005424:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005428:	e9d5 2300 	ldrd	r2, r3, [r5]
 800542c:	f7fb f8e4 	bl	80005f8 <__aeabi_dmul>
 8005430:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005434:	3601      	adds	r6, #1
 8005436:	1064      	asrs	r4, r4, #1
 8005438:	3508      	adds	r5, #8
 800543a:	e7e5      	b.n	8005408 <_dtoa_r+0x340>
 800543c:	f000 80af 	beq.w	800559e <_dtoa_r+0x4d6>
 8005440:	427c      	negs	r4, r7
 8005442:	4b81      	ldr	r3, [pc, #516]	@ (8005648 <_dtoa_r+0x580>)
 8005444:	4d81      	ldr	r5, [pc, #516]	@ (800564c <_dtoa_r+0x584>)
 8005446:	f004 020f 	and.w	r2, r4, #15
 800544a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800544e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005452:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005456:	f7fb f8cf 	bl	80005f8 <__aeabi_dmul>
 800545a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800545e:	1124      	asrs	r4, r4, #4
 8005460:	2300      	movs	r3, #0
 8005462:	2602      	movs	r6, #2
 8005464:	2c00      	cmp	r4, #0
 8005466:	f040 808f 	bne.w	8005588 <_dtoa_r+0x4c0>
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1d3      	bne.n	8005416 <_dtoa_r+0x34e>
 800546e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005470:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 8094 	beq.w	80055a2 <_dtoa_r+0x4da>
 800547a:	4b75      	ldr	r3, [pc, #468]	@ (8005650 <_dtoa_r+0x588>)
 800547c:	2200      	movs	r2, #0
 800547e:	4620      	mov	r0, r4
 8005480:	4629      	mov	r1, r5
 8005482:	f7fb fb2b 	bl	8000adc <__aeabi_dcmplt>
 8005486:	2800      	cmp	r0, #0
 8005488:	f000 808b 	beq.w	80055a2 <_dtoa_r+0x4da>
 800548c:	9b03      	ldr	r3, [sp, #12]
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 8087 	beq.w	80055a2 <_dtoa_r+0x4da>
 8005494:	f1bb 0f00 	cmp.w	fp, #0
 8005498:	dd34      	ble.n	8005504 <_dtoa_r+0x43c>
 800549a:	4620      	mov	r0, r4
 800549c:	4b6d      	ldr	r3, [pc, #436]	@ (8005654 <_dtoa_r+0x58c>)
 800549e:	2200      	movs	r2, #0
 80054a0:	4629      	mov	r1, r5
 80054a2:	f7fb f8a9 	bl	80005f8 <__aeabi_dmul>
 80054a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054aa:	f107 38ff 	add.w	r8, r7, #4294967295
 80054ae:	3601      	adds	r6, #1
 80054b0:	465c      	mov	r4, fp
 80054b2:	4630      	mov	r0, r6
 80054b4:	f7fb f836 	bl	8000524 <__aeabi_i2d>
 80054b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054bc:	f7fb f89c 	bl	80005f8 <__aeabi_dmul>
 80054c0:	4b65      	ldr	r3, [pc, #404]	@ (8005658 <_dtoa_r+0x590>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	f7fa fee2 	bl	800028c <__adddf3>
 80054c8:	4605      	mov	r5, r0
 80054ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80054ce:	2c00      	cmp	r4, #0
 80054d0:	d16a      	bne.n	80055a8 <_dtoa_r+0x4e0>
 80054d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054d6:	4b61      	ldr	r3, [pc, #388]	@ (800565c <_dtoa_r+0x594>)
 80054d8:	2200      	movs	r2, #0
 80054da:	f7fa fed5 	bl	8000288 <__aeabi_dsub>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80054e6:	462a      	mov	r2, r5
 80054e8:	4633      	mov	r3, r6
 80054ea:	f7fb fb15 	bl	8000b18 <__aeabi_dcmpgt>
 80054ee:	2800      	cmp	r0, #0
 80054f0:	f040 8298 	bne.w	8005a24 <_dtoa_r+0x95c>
 80054f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054f8:	462a      	mov	r2, r5
 80054fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80054fe:	f7fb faed 	bl	8000adc <__aeabi_dcmplt>
 8005502:	bb38      	cbnz	r0, 8005554 <_dtoa_r+0x48c>
 8005504:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005508:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800550c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800550e:	2b00      	cmp	r3, #0
 8005510:	f2c0 8157 	blt.w	80057c2 <_dtoa_r+0x6fa>
 8005514:	2f0e      	cmp	r7, #14
 8005516:	f300 8154 	bgt.w	80057c2 <_dtoa_r+0x6fa>
 800551a:	4b4b      	ldr	r3, [pc, #300]	@ (8005648 <_dtoa_r+0x580>)
 800551c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005520:	ed93 7b00 	vldr	d7, [r3]
 8005524:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005526:	2b00      	cmp	r3, #0
 8005528:	ed8d 7b00 	vstr	d7, [sp]
 800552c:	f280 80e5 	bge.w	80056fa <_dtoa_r+0x632>
 8005530:	9b03      	ldr	r3, [sp, #12]
 8005532:	2b00      	cmp	r3, #0
 8005534:	f300 80e1 	bgt.w	80056fa <_dtoa_r+0x632>
 8005538:	d10c      	bne.n	8005554 <_dtoa_r+0x48c>
 800553a:	4b48      	ldr	r3, [pc, #288]	@ (800565c <_dtoa_r+0x594>)
 800553c:	2200      	movs	r2, #0
 800553e:	ec51 0b17 	vmov	r0, r1, d7
 8005542:	f7fb f859 	bl	80005f8 <__aeabi_dmul>
 8005546:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800554a:	f7fb fadb 	bl	8000b04 <__aeabi_dcmpge>
 800554e:	2800      	cmp	r0, #0
 8005550:	f000 8266 	beq.w	8005a20 <_dtoa_r+0x958>
 8005554:	2400      	movs	r4, #0
 8005556:	4625      	mov	r5, r4
 8005558:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800555a:	4656      	mov	r6, sl
 800555c:	ea6f 0803 	mvn.w	r8, r3
 8005560:	2700      	movs	r7, #0
 8005562:	4621      	mov	r1, r4
 8005564:	4648      	mov	r0, r9
 8005566:	f000 fcbf 	bl	8005ee8 <_Bfree>
 800556a:	2d00      	cmp	r5, #0
 800556c:	f000 80bd 	beq.w	80056ea <_dtoa_r+0x622>
 8005570:	b12f      	cbz	r7, 800557e <_dtoa_r+0x4b6>
 8005572:	42af      	cmp	r7, r5
 8005574:	d003      	beq.n	800557e <_dtoa_r+0x4b6>
 8005576:	4639      	mov	r1, r7
 8005578:	4648      	mov	r0, r9
 800557a:	f000 fcb5 	bl	8005ee8 <_Bfree>
 800557e:	4629      	mov	r1, r5
 8005580:	4648      	mov	r0, r9
 8005582:	f000 fcb1 	bl	8005ee8 <_Bfree>
 8005586:	e0b0      	b.n	80056ea <_dtoa_r+0x622>
 8005588:	07e2      	lsls	r2, r4, #31
 800558a:	d505      	bpl.n	8005598 <_dtoa_r+0x4d0>
 800558c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005590:	f7fb f832 	bl	80005f8 <__aeabi_dmul>
 8005594:	3601      	adds	r6, #1
 8005596:	2301      	movs	r3, #1
 8005598:	1064      	asrs	r4, r4, #1
 800559a:	3508      	adds	r5, #8
 800559c:	e762      	b.n	8005464 <_dtoa_r+0x39c>
 800559e:	2602      	movs	r6, #2
 80055a0:	e765      	b.n	800546e <_dtoa_r+0x3a6>
 80055a2:	9c03      	ldr	r4, [sp, #12]
 80055a4:	46b8      	mov	r8, r7
 80055a6:	e784      	b.n	80054b2 <_dtoa_r+0x3ea>
 80055a8:	4b27      	ldr	r3, [pc, #156]	@ (8005648 <_dtoa_r+0x580>)
 80055aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80055ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80055b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80055b4:	4454      	add	r4, sl
 80055b6:	2900      	cmp	r1, #0
 80055b8:	d054      	beq.n	8005664 <_dtoa_r+0x59c>
 80055ba:	4929      	ldr	r1, [pc, #164]	@ (8005660 <_dtoa_r+0x598>)
 80055bc:	2000      	movs	r0, #0
 80055be:	f7fb f945 	bl	800084c <__aeabi_ddiv>
 80055c2:	4633      	mov	r3, r6
 80055c4:	462a      	mov	r2, r5
 80055c6:	f7fa fe5f 	bl	8000288 <__aeabi_dsub>
 80055ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80055ce:	4656      	mov	r6, sl
 80055d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055d4:	f7fb fac0 	bl	8000b58 <__aeabi_d2iz>
 80055d8:	4605      	mov	r5, r0
 80055da:	f7fa ffa3 	bl	8000524 <__aeabi_i2d>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055e6:	f7fa fe4f 	bl	8000288 <__aeabi_dsub>
 80055ea:	3530      	adds	r5, #48	@ 0x30
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80055f4:	f806 5b01 	strb.w	r5, [r6], #1
 80055f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80055fc:	f7fb fa6e 	bl	8000adc <__aeabi_dcmplt>
 8005600:	2800      	cmp	r0, #0
 8005602:	d172      	bne.n	80056ea <_dtoa_r+0x622>
 8005604:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005608:	4911      	ldr	r1, [pc, #68]	@ (8005650 <_dtoa_r+0x588>)
 800560a:	2000      	movs	r0, #0
 800560c:	f7fa fe3c 	bl	8000288 <__aeabi_dsub>
 8005610:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005614:	f7fb fa62 	bl	8000adc <__aeabi_dcmplt>
 8005618:	2800      	cmp	r0, #0
 800561a:	f040 80b4 	bne.w	8005786 <_dtoa_r+0x6be>
 800561e:	42a6      	cmp	r6, r4
 8005620:	f43f af70 	beq.w	8005504 <_dtoa_r+0x43c>
 8005624:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005628:	4b0a      	ldr	r3, [pc, #40]	@ (8005654 <_dtoa_r+0x58c>)
 800562a:	2200      	movs	r2, #0
 800562c:	f7fa ffe4 	bl	80005f8 <__aeabi_dmul>
 8005630:	4b08      	ldr	r3, [pc, #32]	@ (8005654 <_dtoa_r+0x58c>)
 8005632:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005636:	2200      	movs	r2, #0
 8005638:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800563c:	f7fa ffdc 	bl	80005f8 <__aeabi_dmul>
 8005640:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005644:	e7c4      	b.n	80055d0 <_dtoa_r+0x508>
 8005646:	bf00      	nop
 8005648:	08006f08 	.word	0x08006f08
 800564c:	08006ee0 	.word	0x08006ee0
 8005650:	3ff00000 	.word	0x3ff00000
 8005654:	40240000 	.word	0x40240000
 8005658:	401c0000 	.word	0x401c0000
 800565c:	40140000 	.word	0x40140000
 8005660:	3fe00000 	.word	0x3fe00000
 8005664:	4631      	mov	r1, r6
 8005666:	4628      	mov	r0, r5
 8005668:	f7fa ffc6 	bl	80005f8 <__aeabi_dmul>
 800566c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005670:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005672:	4656      	mov	r6, sl
 8005674:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005678:	f7fb fa6e 	bl	8000b58 <__aeabi_d2iz>
 800567c:	4605      	mov	r5, r0
 800567e:	f7fa ff51 	bl	8000524 <__aeabi_i2d>
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800568a:	f7fa fdfd 	bl	8000288 <__aeabi_dsub>
 800568e:	3530      	adds	r5, #48	@ 0x30
 8005690:	f806 5b01 	strb.w	r5, [r6], #1
 8005694:	4602      	mov	r2, r0
 8005696:	460b      	mov	r3, r1
 8005698:	42a6      	cmp	r6, r4
 800569a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800569e:	f04f 0200 	mov.w	r2, #0
 80056a2:	d124      	bne.n	80056ee <_dtoa_r+0x626>
 80056a4:	4baf      	ldr	r3, [pc, #700]	@ (8005964 <_dtoa_r+0x89c>)
 80056a6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80056aa:	f7fa fdef 	bl	800028c <__adddf3>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056b6:	f7fb fa2f 	bl	8000b18 <__aeabi_dcmpgt>
 80056ba:	2800      	cmp	r0, #0
 80056bc:	d163      	bne.n	8005786 <_dtoa_r+0x6be>
 80056be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80056c2:	49a8      	ldr	r1, [pc, #672]	@ (8005964 <_dtoa_r+0x89c>)
 80056c4:	2000      	movs	r0, #0
 80056c6:	f7fa fddf 	bl	8000288 <__aeabi_dsub>
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056d2:	f7fb fa03 	bl	8000adc <__aeabi_dcmplt>
 80056d6:	2800      	cmp	r0, #0
 80056d8:	f43f af14 	beq.w	8005504 <_dtoa_r+0x43c>
 80056dc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80056de:	1e73      	subs	r3, r6, #1
 80056e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80056e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80056e6:	2b30      	cmp	r3, #48	@ 0x30
 80056e8:	d0f8      	beq.n	80056dc <_dtoa_r+0x614>
 80056ea:	4647      	mov	r7, r8
 80056ec:	e03b      	b.n	8005766 <_dtoa_r+0x69e>
 80056ee:	4b9e      	ldr	r3, [pc, #632]	@ (8005968 <_dtoa_r+0x8a0>)
 80056f0:	f7fa ff82 	bl	80005f8 <__aeabi_dmul>
 80056f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056f8:	e7bc      	b.n	8005674 <_dtoa_r+0x5ac>
 80056fa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80056fe:	4656      	mov	r6, sl
 8005700:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005704:	4620      	mov	r0, r4
 8005706:	4629      	mov	r1, r5
 8005708:	f7fb f8a0 	bl	800084c <__aeabi_ddiv>
 800570c:	f7fb fa24 	bl	8000b58 <__aeabi_d2iz>
 8005710:	4680      	mov	r8, r0
 8005712:	f7fa ff07 	bl	8000524 <__aeabi_i2d>
 8005716:	e9dd 2300 	ldrd	r2, r3, [sp]
 800571a:	f7fa ff6d 	bl	80005f8 <__aeabi_dmul>
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	4620      	mov	r0, r4
 8005724:	4629      	mov	r1, r5
 8005726:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800572a:	f7fa fdad 	bl	8000288 <__aeabi_dsub>
 800572e:	f806 4b01 	strb.w	r4, [r6], #1
 8005732:	9d03      	ldr	r5, [sp, #12]
 8005734:	eba6 040a 	sub.w	r4, r6, sl
 8005738:	42a5      	cmp	r5, r4
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	d133      	bne.n	80057a8 <_dtoa_r+0x6e0>
 8005740:	f7fa fda4 	bl	800028c <__adddf3>
 8005744:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005748:	4604      	mov	r4, r0
 800574a:	460d      	mov	r5, r1
 800574c:	f7fb f9e4 	bl	8000b18 <__aeabi_dcmpgt>
 8005750:	b9c0      	cbnz	r0, 8005784 <_dtoa_r+0x6bc>
 8005752:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005756:	4620      	mov	r0, r4
 8005758:	4629      	mov	r1, r5
 800575a:	f7fb f9b5 	bl	8000ac8 <__aeabi_dcmpeq>
 800575e:	b110      	cbz	r0, 8005766 <_dtoa_r+0x69e>
 8005760:	f018 0f01 	tst.w	r8, #1
 8005764:	d10e      	bne.n	8005784 <_dtoa_r+0x6bc>
 8005766:	9902      	ldr	r1, [sp, #8]
 8005768:	4648      	mov	r0, r9
 800576a:	f000 fbbd 	bl	8005ee8 <_Bfree>
 800576e:	2300      	movs	r3, #0
 8005770:	7033      	strb	r3, [r6, #0]
 8005772:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005774:	3701      	adds	r7, #1
 8005776:	601f      	str	r7, [r3, #0]
 8005778:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 824b 	beq.w	8005c16 <_dtoa_r+0xb4e>
 8005780:	601e      	str	r6, [r3, #0]
 8005782:	e248      	b.n	8005c16 <_dtoa_r+0xb4e>
 8005784:	46b8      	mov	r8, r7
 8005786:	4633      	mov	r3, r6
 8005788:	461e      	mov	r6, r3
 800578a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800578e:	2a39      	cmp	r2, #57	@ 0x39
 8005790:	d106      	bne.n	80057a0 <_dtoa_r+0x6d8>
 8005792:	459a      	cmp	sl, r3
 8005794:	d1f8      	bne.n	8005788 <_dtoa_r+0x6c0>
 8005796:	2230      	movs	r2, #48	@ 0x30
 8005798:	f108 0801 	add.w	r8, r8, #1
 800579c:	f88a 2000 	strb.w	r2, [sl]
 80057a0:	781a      	ldrb	r2, [r3, #0]
 80057a2:	3201      	adds	r2, #1
 80057a4:	701a      	strb	r2, [r3, #0]
 80057a6:	e7a0      	b.n	80056ea <_dtoa_r+0x622>
 80057a8:	4b6f      	ldr	r3, [pc, #444]	@ (8005968 <_dtoa_r+0x8a0>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	f7fa ff24 	bl	80005f8 <__aeabi_dmul>
 80057b0:	2200      	movs	r2, #0
 80057b2:	2300      	movs	r3, #0
 80057b4:	4604      	mov	r4, r0
 80057b6:	460d      	mov	r5, r1
 80057b8:	f7fb f986 	bl	8000ac8 <__aeabi_dcmpeq>
 80057bc:	2800      	cmp	r0, #0
 80057be:	d09f      	beq.n	8005700 <_dtoa_r+0x638>
 80057c0:	e7d1      	b.n	8005766 <_dtoa_r+0x69e>
 80057c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057c4:	2a00      	cmp	r2, #0
 80057c6:	f000 80ea 	beq.w	800599e <_dtoa_r+0x8d6>
 80057ca:	9a07      	ldr	r2, [sp, #28]
 80057cc:	2a01      	cmp	r2, #1
 80057ce:	f300 80cd 	bgt.w	800596c <_dtoa_r+0x8a4>
 80057d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80057d4:	2a00      	cmp	r2, #0
 80057d6:	f000 80c1 	beq.w	800595c <_dtoa_r+0x894>
 80057da:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80057de:	9c08      	ldr	r4, [sp, #32]
 80057e0:	9e00      	ldr	r6, [sp, #0]
 80057e2:	9a00      	ldr	r2, [sp, #0]
 80057e4:	441a      	add	r2, r3
 80057e6:	9200      	str	r2, [sp, #0]
 80057e8:	9a06      	ldr	r2, [sp, #24]
 80057ea:	2101      	movs	r1, #1
 80057ec:	441a      	add	r2, r3
 80057ee:	4648      	mov	r0, r9
 80057f0:	9206      	str	r2, [sp, #24]
 80057f2:	f000 fc2d 	bl	8006050 <__i2b>
 80057f6:	4605      	mov	r5, r0
 80057f8:	b166      	cbz	r6, 8005814 <_dtoa_r+0x74c>
 80057fa:	9b06      	ldr	r3, [sp, #24]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	dd09      	ble.n	8005814 <_dtoa_r+0x74c>
 8005800:	42b3      	cmp	r3, r6
 8005802:	9a00      	ldr	r2, [sp, #0]
 8005804:	bfa8      	it	ge
 8005806:	4633      	movge	r3, r6
 8005808:	1ad2      	subs	r2, r2, r3
 800580a:	9200      	str	r2, [sp, #0]
 800580c:	9a06      	ldr	r2, [sp, #24]
 800580e:	1af6      	subs	r6, r6, r3
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	9306      	str	r3, [sp, #24]
 8005814:	9b08      	ldr	r3, [sp, #32]
 8005816:	b30b      	cbz	r3, 800585c <_dtoa_r+0x794>
 8005818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 80c6 	beq.w	80059ac <_dtoa_r+0x8e4>
 8005820:	2c00      	cmp	r4, #0
 8005822:	f000 80c0 	beq.w	80059a6 <_dtoa_r+0x8de>
 8005826:	4629      	mov	r1, r5
 8005828:	4622      	mov	r2, r4
 800582a:	4648      	mov	r0, r9
 800582c:	f000 fcc8 	bl	80061c0 <__pow5mult>
 8005830:	9a02      	ldr	r2, [sp, #8]
 8005832:	4601      	mov	r1, r0
 8005834:	4605      	mov	r5, r0
 8005836:	4648      	mov	r0, r9
 8005838:	f000 fc20 	bl	800607c <__multiply>
 800583c:	9902      	ldr	r1, [sp, #8]
 800583e:	4680      	mov	r8, r0
 8005840:	4648      	mov	r0, r9
 8005842:	f000 fb51 	bl	8005ee8 <_Bfree>
 8005846:	9b08      	ldr	r3, [sp, #32]
 8005848:	1b1b      	subs	r3, r3, r4
 800584a:	9308      	str	r3, [sp, #32]
 800584c:	f000 80b1 	beq.w	80059b2 <_dtoa_r+0x8ea>
 8005850:	9a08      	ldr	r2, [sp, #32]
 8005852:	4641      	mov	r1, r8
 8005854:	4648      	mov	r0, r9
 8005856:	f000 fcb3 	bl	80061c0 <__pow5mult>
 800585a:	9002      	str	r0, [sp, #8]
 800585c:	2101      	movs	r1, #1
 800585e:	4648      	mov	r0, r9
 8005860:	f000 fbf6 	bl	8006050 <__i2b>
 8005864:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005866:	4604      	mov	r4, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 81d8 	beq.w	8005c1e <_dtoa_r+0xb56>
 800586e:	461a      	mov	r2, r3
 8005870:	4601      	mov	r1, r0
 8005872:	4648      	mov	r0, r9
 8005874:	f000 fca4 	bl	80061c0 <__pow5mult>
 8005878:	9b07      	ldr	r3, [sp, #28]
 800587a:	2b01      	cmp	r3, #1
 800587c:	4604      	mov	r4, r0
 800587e:	f300 809f 	bgt.w	80059c0 <_dtoa_r+0x8f8>
 8005882:	9b04      	ldr	r3, [sp, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	f040 8097 	bne.w	80059b8 <_dtoa_r+0x8f0>
 800588a:	9b05      	ldr	r3, [sp, #20]
 800588c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005890:	2b00      	cmp	r3, #0
 8005892:	f040 8093 	bne.w	80059bc <_dtoa_r+0x8f4>
 8005896:	9b05      	ldr	r3, [sp, #20]
 8005898:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800589c:	0d1b      	lsrs	r3, r3, #20
 800589e:	051b      	lsls	r3, r3, #20
 80058a0:	b133      	cbz	r3, 80058b0 <_dtoa_r+0x7e8>
 80058a2:	9b00      	ldr	r3, [sp, #0]
 80058a4:	3301      	adds	r3, #1
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	9b06      	ldr	r3, [sp, #24]
 80058aa:	3301      	adds	r3, #1
 80058ac:	9306      	str	r3, [sp, #24]
 80058ae:	2301      	movs	r3, #1
 80058b0:	9308      	str	r3, [sp, #32]
 80058b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 81b8 	beq.w	8005c2a <_dtoa_r+0xb62>
 80058ba:	6923      	ldr	r3, [r4, #16]
 80058bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80058c0:	6918      	ldr	r0, [r3, #16]
 80058c2:	f000 fb79 	bl	8005fb8 <__hi0bits>
 80058c6:	f1c0 0020 	rsb	r0, r0, #32
 80058ca:	9b06      	ldr	r3, [sp, #24]
 80058cc:	4418      	add	r0, r3
 80058ce:	f010 001f 	ands.w	r0, r0, #31
 80058d2:	f000 8082 	beq.w	80059da <_dtoa_r+0x912>
 80058d6:	f1c0 0320 	rsb	r3, r0, #32
 80058da:	2b04      	cmp	r3, #4
 80058dc:	dd73      	ble.n	80059c6 <_dtoa_r+0x8fe>
 80058de:	9b00      	ldr	r3, [sp, #0]
 80058e0:	f1c0 001c 	rsb	r0, r0, #28
 80058e4:	4403      	add	r3, r0
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	9b06      	ldr	r3, [sp, #24]
 80058ea:	4403      	add	r3, r0
 80058ec:	4406      	add	r6, r0
 80058ee:	9306      	str	r3, [sp, #24]
 80058f0:	9b00      	ldr	r3, [sp, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	dd05      	ble.n	8005902 <_dtoa_r+0x83a>
 80058f6:	9902      	ldr	r1, [sp, #8]
 80058f8:	461a      	mov	r2, r3
 80058fa:	4648      	mov	r0, r9
 80058fc:	f000 fcba 	bl	8006274 <__lshift>
 8005900:	9002      	str	r0, [sp, #8]
 8005902:	9b06      	ldr	r3, [sp, #24]
 8005904:	2b00      	cmp	r3, #0
 8005906:	dd05      	ble.n	8005914 <_dtoa_r+0x84c>
 8005908:	4621      	mov	r1, r4
 800590a:	461a      	mov	r2, r3
 800590c:	4648      	mov	r0, r9
 800590e:	f000 fcb1 	bl	8006274 <__lshift>
 8005912:	4604      	mov	r4, r0
 8005914:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d061      	beq.n	80059de <_dtoa_r+0x916>
 800591a:	9802      	ldr	r0, [sp, #8]
 800591c:	4621      	mov	r1, r4
 800591e:	f000 fd15 	bl	800634c <__mcmp>
 8005922:	2800      	cmp	r0, #0
 8005924:	da5b      	bge.n	80059de <_dtoa_r+0x916>
 8005926:	2300      	movs	r3, #0
 8005928:	9902      	ldr	r1, [sp, #8]
 800592a:	220a      	movs	r2, #10
 800592c:	4648      	mov	r0, r9
 800592e:	f000 fafd 	bl	8005f2c <__multadd>
 8005932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005934:	9002      	str	r0, [sp, #8]
 8005936:	f107 38ff 	add.w	r8, r7, #4294967295
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 8177 	beq.w	8005c2e <_dtoa_r+0xb66>
 8005940:	4629      	mov	r1, r5
 8005942:	2300      	movs	r3, #0
 8005944:	220a      	movs	r2, #10
 8005946:	4648      	mov	r0, r9
 8005948:	f000 faf0 	bl	8005f2c <__multadd>
 800594c:	f1bb 0f00 	cmp.w	fp, #0
 8005950:	4605      	mov	r5, r0
 8005952:	dc6f      	bgt.n	8005a34 <_dtoa_r+0x96c>
 8005954:	9b07      	ldr	r3, [sp, #28]
 8005956:	2b02      	cmp	r3, #2
 8005958:	dc49      	bgt.n	80059ee <_dtoa_r+0x926>
 800595a:	e06b      	b.n	8005a34 <_dtoa_r+0x96c>
 800595c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800595e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005962:	e73c      	b.n	80057de <_dtoa_r+0x716>
 8005964:	3fe00000 	.word	0x3fe00000
 8005968:	40240000 	.word	0x40240000
 800596c:	9b03      	ldr	r3, [sp, #12]
 800596e:	1e5c      	subs	r4, r3, #1
 8005970:	9b08      	ldr	r3, [sp, #32]
 8005972:	42a3      	cmp	r3, r4
 8005974:	db09      	blt.n	800598a <_dtoa_r+0x8c2>
 8005976:	1b1c      	subs	r4, r3, r4
 8005978:	9b03      	ldr	r3, [sp, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	f6bf af30 	bge.w	80057e0 <_dtoa_r+0x718>
 8005980:	9b00      	ldr	r3, [sp, #0]
 8005982:	9a03      	ldr	r2, [sp, #12]
 8005984:	1a9e      	subs	r6, r3, r2
 8005986:	2300      	movs	r3, #0
 8005988:	e72b      	b.n	80057e2 <_dtoa_r+0x71a>
 800598a:	9b08      	ldr	r3, [sp, #32]
 800598c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800598e:	9408      	str	r4, [sp, #32]
 8005990:	1ae3      	subs	r3, r4, r3
 8005992:	441a      	add	r2, r3
 8005994:	9e00      	ldr	r6, [sp, #0]
 8005996:	9b03      	ldr	r3, [sp, #12]
 8005998:	920d      	str	r2, [sp, #52]	@ 0x34
 800599a:	2400      	movs	r4, #0
 800599c:	e721      	b.n	80057e2 <_dtoa_r+0x71a>
 800599e:	9c08      	ldr	r4, [sp, #32]
 80059a0:	9e00      	ldr	r6, [sp, #0]
 80059a2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80059a4:	e728      	b.n	80057f8 <_dtoa_r+0x730>
 80059a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80059aa:	e751      	b.n	8005850 <_dtoa_r+0x788>
 80059ac:	9a08      	ldr	r2, [sp, #32]
 80059ae:	9902      	ldr	r1, [sp, #8]
 80059b0:	e750      	b.n	8005854 <_dtoa_r+0x78c>
 80059b2:	f8cd 8008 	str.w	r8, [sp, #8]
 80059b6:	e751      	b.n	800585c <_dtoa_r+0x794>
 80059b8:	2300      	movs	r3, #0
 80059ba:	e779      	b.n	80058b0 <_dtoa_r+0x7e8>
 80059bc:	9b04      	ldr	r3, [sp, #16]
 80059be:	e777      	b.n	80058b0 <_dtoa_r+0x7e8>
 80059c0:	2300      	movs	r3, #0
 80059c2:	9308      	str	r3, [sp, #32]
 80059c4:	e779      	b.n	80058ba <_dtoa_r+0x7f2>
 80059c6:	d093      	beq.n	80058f0 <_dtoa_r+0x828>
 80059c8:	9a00      	ldr	r2, [sp, #0]
 80059ca:	331c      	adds	r3, #28
 80059cc:	441a      	add	r2, r3
 80059ce:	9200      	str	r2, [sp, #0]
 80059d0:	9a06      	ldr	r2, [sp, #24]
 80059d2:	441a      	add	r2, r3
 80059d4:	441e      	add	r6, r3
 80059d6:	9206      	str	r2, [sp, #24]
 80059d8:	e78a      	b.n	80058f0 <_dtoa_r+0x828>
 80059da:	4603      	mov	r3, r0
 80059dc:	e7f4      	b.n	80059c8 <_dtoa_r+0x900>
 80059de:	9b03      	ldr	r3, [sp, #12]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	46b8      	mov	r8, r7
 80059e4:	dc20      	bgt.n	8005a28 <_dtoa_r+0x960>
 80059e6:	469b      	mov	fp, r3
 80059e8:	9b07      	ldr	r3, [sp, #28]
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	dd1e      	ble.n	8005a2c <_dtoa_r+0x964>
 80059ee:	f1bb 0f00 	cmp.w	fp, #0
 80059f2:	f47f adb1 	bne.w	8005558 <_dtoa_r+0x490>
 80059f6:	4621      	mov	r1, r4
 80059f8:	465b      	mov	r3, fp
 80059fa:	2205      	movs	r2, #5
 80059fc:	4648      	mov	r0, r9
 80059fe:	f000 fa95 	bl	8005f2c <__multadd>
 8005a02:	4601      	mov	r1, r0
 8005a04:	4604      	mov	r4, r0
 8005a06:	9802      	ldr	r0, [sp, #8]
 8005a08:	f000 fca0 	bl	800634c <__mcmp>
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	f77f ada3 	ble.w	8005558 <_dtoa_r+0x490>
 8005a12:	4656      	mov	r6, sl
 8005a14:	2331      	movs	r3, #49	@ 0x31
 8005a16:	f806 3b01 	strb.w	r3, [r6], #1
 8005a1a:	f108 0801 	add.w	r8, r8, #1
 8005a1e:	e59f      	b.n	8005560 <_dtoa_r+0x498>
 8005a20:	9c03      	ldr	r4, [sp, #12]
 8005a22:	46b8      	mov	r8, r7
 8005a24:	4625      	mov	r5, r4
 8005a26:	e7f4      	b.n	8005a12 <_dtoa_r+0x94a>
 8005a28:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005a2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 8101 	beq.w	8005c36 <_dtoa_r+0xb6e>
 8005a34:	2e00      	cmp	r6, #0
 8005a36:	dd05      	ble.n	8005a44 <_dtoa_r+0x97c>
 8005a38:	4629      	mov	r1, r5
 8005a3a:	4632      	mov	r2, r6
 8005a3c:	4648      	mov	r0, r9
 8005a3e:	f000 fc19 	bl	8006274 <__lshift>
 8005a42:	4605      	mov	r5, r0
 8005a44:	9b08      	ldr	r3, [sp, #32]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d05c      	beq.n	8005b04 <_dtoa_r+0xa3c>
 8005a4a:	6869      	ldr	r1, [r5, #4]
 8005a4c:	4648      	mov	r0, r9
 8005a4e:	f000 fa0b 	bl	8005e68 <_Balloc>
 8005a52:	4606      	mov	r6, r0
 8005a54:	b928      	cbnz	r0, 8005a62 <_dtoa_r+0x99a>
 8005a56:	4b82      	ldr	r3, [pc, #520]	@ (8005c60 <_dtoa_r+0xb98>)
 8005a58:	4602      	mov	r2, r0
 8005a5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005a5e:	f7ff bb4a 	b.w	80050f6 <_dtoa_r+0x2e>
 8005a62:	692a      	ldr	r2, [r5, #16]
 8005a64:	3202      	adds	r2, #2
 8005a66:	0092      	lsls	r2, r2, #2
 8005a68:	f105 010c 	add.w	r1, r5, #12
 8005a6c:	300c      	adds	r0, #12
 8005a6e:	f001 f807 	bl	8006a80 <memcpy>
 8005a72:	2201      	movs	r2, #1
 8005a74:	4631      	mov	r1, r6
 8005a76:	4648      	mov	r0, r9
 8005a78:	f000 fbfc 	bl	8006274 <__lshift>
 8005a7c:	f10a 0301 	add.w	r3, sl, #1
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	eb0a 030b 	add.w	r3, sl, fp
 8005a86:	9308      	str	r3, [sp, #32]
 8005a88:	9b04      	ldr	r3, [sp, #16]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	462f      	mov	r7, r5
 8005a90:	9306      	str	r3, [sp, #24]
 8005a92:	4605      	mov	r5, r0
 8005a94:	9b00      	ldr	r3, [sp, #0]
 8005a96:	9802      	ldr	r0, [sp, #8]
 8005a98:	4621      	mov	r1, r4
 8005a9a:	f103 3bff 	add.w	fp, r3, #4294967295
 8005a9e:	f7ff fa88 	bl	8004fb2 <quorem>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	3330      	adds	r3, #48	@ 0x30
 8005aa6:	9003      	str	r0, [sp, #12]
 8005aa8:	4639      	mov	r1, r7
 8005aaa:	9802      	ldr	r0, [sp, #8]
 8005aac:	9309      	str	r3, [sp, #36]	@ 0x24
 8005aae:	f000 fc4d 	bl	800634c <__mcmp>
 8005ab2:	462a      	mov	r2, r5
 8005ab4:	9004      	str	r0, [sp, #16]
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	4648      	mov	r0, r9
 8005aba:	f000 fc63 	bl	8006384 <__mdiff>
 8005abe:	68c2      	ldr	r2, [r0, #12]
 8005ac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ac2:	4606      	mov	r6, r0
 8005ac4:	bb02      	cbnz	r2, 8005b08 <_dtoa_r+0xa40>
 8005ac6:	4601      	mov	r1, r0
 8005ac8:	9802      	ldr	r0, [sp, #8]
 8005aca:	f000 fc3f 	bl	800634c <__mcmp>
 8005ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	4631      	mov	r1, r6
 8005ad4:	4648      	mov	r0, r9
 8005ad6:	920c      	str	r2, [sp, #48]	@ 0x30
 8005ad8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ada:	f000 fa05 	bl	8005ee8 <_Bfree>
 8005ade:	9b07      	ldr	r3, [sp, #28]
 8005ae0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005ae2:	9e00      	ldr	r6, [sp, #0]
 8005ae4:	ea42 0103 	orr.w	r1, r2, r3
 8005ae8:	9b06      	ldr	r3, [sp, #24]
 8005aea:	4319      	orrs	r1, r3
 8005aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aee:	d10d      	bne.n	8005b0c <_dtoa_r+0xa44>
 8005af0:	2b39      	cmp	r3, #57	@ 0x39
 8005af2:	d027      	beq.n	8005b44 <_dtoa_r+0xa7c>
 8005af4:	9a04      	ldr	r2, [sp, #16]
 8005af6:	2a00      	cmp	r2, #0
 8005af8:	dd01      	ble.n	8005afe <_dtoa_r+0xa36>
 8005afa:	9b03      	ldr	r3, [sp, #12]
 8005afc:	3331      	adds	r3, #49	@ 0x31
 8005afe:	f88b 3000 	strb.w	r3, [fp]
 8005b02:	e52e      	b.n	8005562 <_dtoa_r+0x49a>
 8005b04:	4628      	mov	r0, r5
 8005b06:	e7b9      	b.n	8005a7c <_dtoa_r+0x9b4>
 8005b08:	2201      	movs	r2, #1
 8005b0a:	e7e2      	b.n	8005ad2 <_dtoa_r+0xa0a>
 8005b0c:	9904      	ldr	r1, [sp, #16]
 8005b0e:	2900      	cmp	r1, #0
 8005b10:	db04      	blt.n	8005b1c <_dtoa_r+0xa54>
 8005b12:	9807      	ldr	r0, [sp, #28]
 8005b14:	4301      	orrs	r1, r0
 8005b16:	9806      	ldr	r0, [sp, #24]
 8005b18:	4301      	orrs	r1, r0
 8005b1a:	d120      	bne.n	8005b5e <_dtoa_r+0xa96>
 8005b1c:	2a00      	cmp	r2, #0
 8005b1e:	ddee      	ble.n	8005afe <_dtoa_r+0xa36>
 8005b20:	9902      	ldr	r1, [sp, #8]
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	2201      	movs	r2, #1
 8005b26:	4648      	mov	r0, r9
 8005b28:	f000 fba4 	bl	8006274 <__lshift>
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	9002      	str	r0, [sp, #8]
 8005b30:	f000 fc0c 	bl	800634c <__mcmp>
 8005b34:	2800      	cmp	r0, #0
 8005b36:	9b00      	ldr	r3, [sp, #0]
 8005b38:	dc02      	bgt.n	8005b40 <_dtoa_r+0xa78>
 8005b3a:	d1e0      	bne.n	8005afe <_dtoa_r+0xa36>
 8005b3c:	07da      	lsls	r2, r3, #31
 8005b3e:	d5de      	bpl.n	8005afe <_dtoa_r+0xa36>
 8005b40:	2b39      	cmp	r3, #57	@ 0x39
 8005b42:	d1da      	bne.n	8005afa <_dtoa_r+0xa32>
 8005b44:	2339      	movs	r3, #57	@ 0x39
 8005b46:	f88b 3000 	strb.w	r3, [fp]
 8005b4a:	4633      	mov	r3, r6
 8005b4c:	461e      	mov	r6, r3
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005b54:	2a39      	cmp	r2, #57	@ 0x39
 8005b56:	d04e      	beq.n	8005bf6 <_dtoa_r+0xb2e>
 8005b58:	3201      	adds	r2, #1
 8005b5a:	701a      	strb	r2, [r3, #0]
 8005b5c:	e501      	b.n	8005562 <_dtoa_r+0x49a>
 8005b5e:	2a00      	cmp	r2, #0
 8005b60:	dd03      	ble.n	8005b6a <_dtoa_r+0xaa2>
 8005b62:	2b39      	cmp	r3, #57	@ 0x39
 8005b64:	d0ee      	beq.n	8005b44 <_dtoa_r+0xa7c>
 8005b66:	3301      	adds	r3, #1
 8005b68:	e7c9      	b.n	8005afe <_dtoa_r+0xa36>
 8005b6a:	9a00      	ldr	r2, [sp, #0]
 8005b6c:	9908      	ldr	r1, [sp, #32]
 8005b6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005b72:	428a      	cmp	r2, r1
 8005b74:	d028      	beq.n	8005bc8 <_dtoa_r+0xb00>
 8005b76:	9902      	ldr	r1, [sp, #8]
 8005b78:	2300      	movs	r3, #0
 8005b7a:	220a      	movs	r2, #10
 8005b7c:	4648      	mov	r0, r9
 8005b7e:	f000 f9d5 	bl	8005f2c <__multadd>
 8005b82:	42af      	cmp	r7, r5
 8005b84:	9002      	str	r0, [sp, #8]
 8005b86:	f04f 0300 	mov.w	r3, #0
 8005b8a:	f04f 020a 	mov.w	r2, #10
 8005b8e:	4639      	mov	r1, r7
 8005b90:	4648      	mov	r0, r9
 8005b92:	d107      	bne.n	8005ba4 <_dtoa_r+0xadc>
 8005b94:	f000 f9ca 	bl	8005f2c <__multadd>
 8005b98:	4607      	mov	r7, r0
 8005b9a:	4605      	mov	r5, r0
 8005b9c:	9b00      	ldr	r3, [sp, #0]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	e777      	b.n	8005a94 <_dtoa_r+0x9cc>
 8005ba4:	f000 f9c2 	bl	8005f2c <__multadd>
 8005ba8:	4629      	mov	r1, r5
 8005baa:	4607      	mov	r7, r0
 8005bac:	2300      	movs	r3, #0
 8005bae:	220a      	movs	r2, #10
 8005bb0:	4648      	mov	r0, r9
 8005bb2:	f000 f9bb 	bl	8005f2c <__multadd>
 8005bb6:	4605      	mov	r5, r0
 8005bb8:	e7f0      	b.n	8005b9c <_dtoa_r+0xad4>
 8005bba:	f1bb 0f00 	cmp.w	fp, #0
 8005bbe:	bfcc      	ite	gt
 8005bc0:	465e      	movgt	r6, fp
 8005bc2:	2601      	movle	r6, #1
 8005bc4:	4456      	add	r6, sl
 8005bc6:	2700      	movs	r7, #0
 8005bc8:	9902      	ldr	r1, [sp, #8]
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	4648      	mov	r0, r9
 8005bd0:	f000 fb50 	bl	8006274 <__lshift>
 8005bd4:	4621      	mov	r1, r4
 8005bd6:	9002      	str	r0, [sp, #8]
 8005bd8:	f000 fbb8 	bl	800634c <__mcmp>
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	dcb4      	bgt.n	8005b4a <_dtoa_r+0xa82>
 8005be0:	d102      	bne.n	8005be8 <_dtoa_r+0xb20>
 8005be2:	9b00      	ldr	r3, [sp, #0]
 8005be4:	07db      	lsls	r3, r3, #31
 8005be6:	d4b0      	bmi.n	8005b4a <_dtoa_r+0xa82>
 8005be8:	4633      	mov	r3, r6
 8005bea:	461e      	mov	r6, r3
 8005bec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005bf0:	2a30      	cmp	r2, #48	@ 0x30
 8005bf2:	d0fa      	beq.n	8005bea <_dtoa_r+0xb22>
 8005bf4:	e4b5      	b.n	8005562 <_dtoa_r+0x49a>
 8005bf6:	459a      	cmp	sl, r3
 8005bf8:	d1a8      	bne.n	8005b4c <_dtoa_r+0xa84>
 8005bfa:	2331      	movs	r3, #49	@ 0x31
 8005bfc:	f108 0801 	add.w	r8, r8, #1
 8005c00:	f88a 3000 	strb.w	r3, [sl]
 8005c04:	e4ad      	b.n	8005562 <_dtoa_r+0x49a>
 8005c06:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005c08:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005c64 <_dtoa_r+0xb9c>
 8005c0c:	b11b      	cbz	r3, 8005c16 <_dtoa_r+0xb4e>
 8005c0e:	f10a 0308 	add.w	r3, sl, #8
 8005c12:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005c14:	6013      	str	r3, [r2, #0]
 8005c16:	4650      	mov	r0, sl
 8005c18:	b017      	add	sp, #92	@ 0x5c
 8005c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c1e:	9b07      	ldr	r3, [sp, #28]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	f77f ae2e 	ble.w	8005882 <_dtoa_r+0x7ba>
 8005c26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c28:	9308      	str	r3, [sp, #32]
 8005c2a:	2001      	movs	r0, #1
 8005c2c:	e64d      	b.n	80058ca <_dtoa_r+0x802>
 8005c2e:	f1bb 0f00 	cmp.w	fp, #0
 8005c32:	f77f aed9 	ble.w	80059e8 <_dtoa_r+0x920>
 8005c36:	4656      	mov	r6, sl
 8005c38:	9802      	ldr	r0, [sp, #8]
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	f7ff f9b9 	bl	8004fb2 <quorem>
 8005c40:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005c44:	f806 3b01 	strb.w	r3, [r6], #1
 8005c48:	eba6 020a 	sub.w	r2, r6, sl
 8005c4c:	4593      	cmp	fp, r2
 8005c4e:	ddb4      	ble.n	8005bba <_dtoa_r+0xaf2>
 8005c50:	9902      	ldr	r1, [sp, #8]
 8005c52:	2300      	movs	r3, #0
 8005c54:	220a      	movs	r2, #10
 8005c56:	4648      	mov	r0, r9
 8005c58:	f000 f968 	bl	8005f2c <__multadd>
 8005c5c:	9002      	str	r0, [sp, #8]
 8005c5e:	e7eb      	b.n	8005c38 <_dtoa_r+0xb70>
 8005c60:	08006e0c 	.word	0x08006e0c
 8005c64:	08006d90 	.word	0x08006d90

08005c68 <_free_r>:
 8005c68:	b538      	push	{r3, r4, r5, lr}
 8005c6a:	4605      	mov	r5, r0
 8005c6c:	2900      	cmp	r1, #0
 8005c6e:	d041      	beq.n	8005cf4 <_free_r+0x8c>
 8005c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c74:	1f0c      	subs	r4, r1, #4
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	bfb8      	it	lt
 8005c7a:	18e4      	addlt	r4, r4, r3
 8005c7c:	f000 f8e8 	bl	8005e50 <__malloc_lock>
 8005c80:	4a1d      	ldr	r2, [pc, #116]	@ (8005cf8 <_free_r+0x90>)
 8005c82:	6813      	ldr	r3, [r2, #0]
 8005c84:	b933      	cbnz	r3, 8005c94 <_free_r+0x2c>
 8005c86:	6063      	str	r3, [r4, #4]
 8005c88:	6014      	str	r4, [r2, #0]
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c90:	f000 b8e4 	b.w	8005e5c <__malloc_unlock>
 8005c94:	42a3      	cmp	r3, r4
 8005c96:	d908      	bls.n	8005caa <_free_r+0x42>
 8005c98:	6820      	ldr	r0, [r4, #0]
 8005c9a:	1821      	adds	r1, r4, r0
 8005c9c:	428b      	cmp	r3, r1
 8005c9e:	bf01      	itttt	eq
 8005ca0:	6819      	ldreq	r1, [r3, #0]
 8005ca2:	685b      	ldreq	r3, [r3, #4]
 8005ca4:	1809      	addeq	r1, r1, r0
 8005ca6:	6021      	streq	r1, [r4, #0]
 8005ca8:	e7ed      	b.n	8005c86 <_free_r+0x1e>
 8005caa:	461a      	mov	r2, r3
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	b10b      	cbz	r3, 8005cb4 <_free_r+0x4c>
 8005cb0:	42a3      	cmp	r3, r4
 8005cb2:	d9fa      	bls.n	8005caa <_free_r+0x42>
 8005cb4:	6811      	ldr	r1, [r2, #0]
 8005cb6:	1850      	adds	r0, r2, r1
 8005cb8:	42a0      	cmp	r0, r4
 8005cba:	d10b      	bne.n	8005cd4 <_free_r+0x6c>
 8005cbc:	6820      	ldr	r0, [r4, #0]
 8005cbe:	4401      	add	r1, r0
 8005cc0:	1850      	adds	r0, r2, r1
 8005cc2:	4283      	cmp	r3, r0
 8005cc4:	6011      	str	r1, [r2, #0]
 8005cc6:	d1e0      	bne.n	8005c8a <_free_r+0x22>
 8005cc8:	6818      	ldr	r0, [r3, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	6053      	str	r3, [r2, #4]
 8005cce:	4408      	add	r0, r1
 8005cd0:	6010      	str	r0, [r2, #0]
 8005cd2:	e7da      	b.n	8005c8a <_free_r+0x22>
 8005cd4:	d902      	bls.n	8005cdc <_free_r+0x74>
 8005cd6:	230c      	movs	r3, #12
 8005cd8:	602b      	str	r3, [r5, #0]
 8005cda:	e7d6      	b.n	8005c8a <_free_r+0x22>
 8005cdc:	6820      	ldr	r0, [r4, #0]
 8005cde:	1821      	adds	r1, r4, r0
 8005ce0:	428b      	cmp	r3, r1
 8005ce2:	bf04      	itt	eq
 8005ce4:	6819      	ldreq	r1, [r3, #0]
 8005ce6:	685b      	ldreq	r3, [r3, #4]
 8005ce8:	6063      	str	r3, [r4, #4]
 8005cea:	bf04      	itt	eq
 8005cec:	1809      	addeq	r1, r1, r0
 8005cee:	6021      	streq	r1, [r4, #0]
 8005cf0:	6054      	str	r4, [r2, #4]
 8005cf2:	e7ca      	b.n	8005c8a <_free_r+0x22>
 8005cf4:	bd38      	pop	{r3, r4, r5, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20000424 	.word	0x20000424

08005cfc <malloc>:
 8005cfc:	4b02      	ldr	r3, [pc, #8]	@ (8005d08 <malloc+0xc>)
 8005cfe:	4601      	mov	r1, r0
 8005d00:	6818      	ldr	r0, [r3, #0]
 8005d02:	f000 b825 	b.w	8005d50 <_malloc_r>
 8005d06:	bf00      	nop
 8005d08:	20000018 	.word	0x20000018

08005d0c <sbrk_aligned>:
 8005d0c:	b570      	push	{r4, r5, r6, lr}
 8005d0e:	4e0f      	ldr	r6, [pc, #60]	@ (8005d4c <sbrk_aligned+0x40>)
 8005d10:	460c      	mov	r4, r1
 8005d12:	6831      	ldr	r1, [r6, #0]
 8005d14:	4605      	mov	r5, r0
 8005d16:	b911      	cbnz	r1, 8005d1e <sbrk_aligned+0x12>
 8005d18:	f000 fea2 	bl	8006a60 <_sbrk_r>
 8005d1c:	6030      	str	r0, [r6, #0]
 8005d1e:	4621      	mov	r1, r4
 8005d20:	4628      	mov	r0, r5
 8005d22:	f000 fe9d 	bl	8006a60 <_sbrk_r>
 8005d26:	1c43      	adds	r3, r0, #1
 8005d28:	d103      	bne.n	8005d32 <sbrk_aligned+0x26>
 8005d2a:	f04f 34ff 	mov.w	r4, #4294967295
 8005d2e:	4620      	mov	r0, r4
 8005d30:	bd70      	pop	{r4, r5, r6, pc}
 8005d32:	1cc4      	adds	r4, r0, #3
 8005d34:	f024 0403 	bic.w	r4, r4, #3
 8005d38:	42a0      	cmp	r0, r4
 8005d3a:	d0f8      	beq.n	8005d2e <sbrk_aligned+0x22>
 8005d3c:	1a21      	subs	r1, r4, r0
 8005d3e:	4628      	mov	r0, r5
 8005d40:	f000 fe8e 	bl	8006a60 <_sbrk_r>
 8005d44:	3001      	adds	r0, #1
 8005d46:	d1f2      	bne.n	8005d2e <sbrk_aligned+0x22>
 8005d48:	e7ef      	b.n	8005d2a <sbrk_aligned+0x1e>
 8005d4a:	bf00      	nop
 8005d4c:	20000420 	.word	0x20000420

08005d50 <_malloc_r>:
 8005d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d54:	1ccd      	adds	r5, r1, #3
 8005d56:	f025 0503 	bic.w	r5, r5, #3
 8005d5a:	3508      	adds	r5, #8
 8005d5c:	2d0c      	cmp	r5, #12
 8005d5e:	bf38      	it	cc
 8005d60:	250c      	movcc	r5, #12
 8005d62:	2d00      	cmp	r5, #0
 8005d64:	4606      	mov	r6, r0
 8005d66:	db01      	blt.n	8005d6c <_malloc_r+0x1c>
 8005d68:	42a9      	cmp	r1, r5
 8005d6a:	d904      	bls.n	8005d76 <_malloc_r+0x26>
 8005d6c:	230c      	movs	r3, #12
 8005d6e:	6033      	str	r3, [r6, #0]
 8005d70:	2000      	movs	r0, #0
 8005d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e4c <_malloc_r+0xfc>
 8005d7a:	f000 f869 	bl	8005e50 <__malloc_lock>
 8005d7e:	f8d8 3000 	ldr.w	r3, [r8]
 8005d82:	461c      	mov	r4, r3
 8005d84:	bb44      	cbnz	r4, 8005dd8 <_malloc_r+0x88>
 8005d86:	4629      	mov	r1, r5
 8005d88:	4630      	mov	r0, r6
 8005d8a:	f7ff ffbf 	bl	8005d0c <sbrk_aligned>
 8005d8e:	1c43      	adds	r3, r0, #1
 8005d90:	4604      	mov	r4, r0
 8005d92:	d158      	bne.n	8005e46 <_malloc_r+0xf6>
 8005d94:	f8d8 4000 	ldr.w	r4, [r8]
 8005d98:	4627      	mov	r7, r4
 8005d9a:	2f00      	cmp	r7, #0
 8005d9c:	d143      	bne.n	8005e26 <_malloc_r+0xd6>
 8005d9e:	2c00      	cmp	r4, #0
 8005da0:	d04b      	beq.n	8005e3a <_malloc_r+0xea>
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	4639      	mov	r1, r7
 8005da6:	4630      	mov	r0, r6
 8005da8:	eb04 0903 	add.w	r9, r4, r3
 8005dac:	f000 fe58 	bl	8006a60 <_sbrk_r>
 8005db0:	4581      	cmp	r9, r0
 8005db2:	d142      	bne.n	8005e3a <_malloc_r+0xea>
 8005db4:	6821      	ldr	r1, [r4, #0]
 8005db6:	1a6d      	subs	r5, r5, r1
 8005db8:	4629      	mov	r1, r5
 8005dba:	4630      	mov	r0, r6
 8005dbc:	f7ff ffa6 	bl	8005d0c <sbrk_aligned>
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	d03a      	beq.n	8005e3a <_malloc_r+0xea>
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	442b      	add	r3, r5
 8005dc8:	6023      	str	r3, [r4, #0]
 8005dca:	f8d8 3000 	ldr.w	r3, [r8]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	bb62      	cbnz	r2, 8005e2c <_malloc_r+0xdc>
 8005dd2:	f8c8 7000 	str.w	r7, [r8]
 8005dd6:	e00f      	b.n	8005df8 <_malloc_r+0xa8>
 8005dd8:	6822      	ldr	r2, [r4, #0]
 8005dda:	1b52      	subs	r2, r2, r5
 8005ddc:	d420      	bmi.n	8005e20 <_malloc_r+0xd0>
 8005dde:	2a0b      	cmp	r2, #11
 8005de0:	d917      	bls.n	8005e12 <_malloc_r+0xc2>
 8005de2:	1961      	adds	r1, r4, r5
 8005de4:	42a3      	cmp	r3, r4
 8005de6:	6025      	str	r5, [r4, #0]
 8005de8:	bf18      	it	ne
 8005dea:	6059      	strne	r1, [r3, #4]
 8005dec:	6863      	ldr	r3, [r4, #4]
 8005dee:	bf08      	it	eq
 8005df0:	f8c8 1000 	streq.w	r1, [r8]
 8005df4:	5162      	str	r2, [r4, r5]
 8005df6:	604b      	str	r3, [r1, #4]
 8005df8:	4630      	mov	r0, r6
 8005dfa:	f000 f82f 	bl	8005e5c <__malloc_unlock>
 8005dfe:	f104 000b 	add.w	r0, r4, #11
 8005e02:	1d23      	adds	r3, r4, #4
 8005e04:	f020 0007 	bic.w	r0, r0, #7
 8005e08:	1ac2      	subs	r2, r0, r3
 8005e0a:	bf1c      	itt	ne
 8005e0c:	1a1b      	subne	r3, r3, r0
 8005e0e:	50a3      	strne	r3, [r4, r2]
 8005e10:	e7af      	b.n	8005d72 <_malloc_r+0x22>
 8005e12:	6862      	ldr	r2, [r4, #4]
 8005e14:	42a3      	cmp	r3, r4
 8005e16:	bf0c      	ite	eq
 8005e18:	f8c8 2000 	streq.w	r2, [r8]
 8005e1c:	605a      	strne	r2, [r3, #4]
 8005e1e:	e7eb      	b.n	8005df8 <_malloc_r+0xa8>
 8005e20:	4623      	mov	r3, r4
 8005e22:	6864      	ldr	r4, [r4, #4]
 8005e24:	e7ae      	b.n	8005d84 <_malloc_r+0x34>
 8005e26:	463c      	mov	r4, r7
 8005e28:	687f      	ldr	r7, [r7, #4]
 8005e2a:	e7b6      	b.n	8005d9a <_malloc_r+0x4a>
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	42a3      	cmp	r3, r4
 8005e32:	d1fb      	bne.n	8005e2c <_malloc_r+0xdc>
 8005e34:	2300      	movs	r3, #0
 8005e36:	6053      	str	r3, [r2, #4]
 8005e38:	e7de      	b.n	8005df8 <_malloc_r+0xa8>
 8005e3a:	230c      	movs	r3, #12
 8005e3c:	6033      	str	r3, [r6, #0]
 8005e3e:	4630      	mov	r0, r6
 8005e40:	f000 f80c 	bl	8005e5c <__malloc_unlock>
 8005e44:	e794      	b.n	8005d70 <_malloc_r+0x20>
 8005e46:	6005      	str	r5, [r0, #0]
 8005e48:	e7d6      	b.n	8005df8 <_malloc_r+0xa8>
 8005e4a:	bf00      	nop
 8005e4c:	20000424 	.word	0x20000424

08005e50 <__malloc_lock>:
 8005e50:	4801      	ldr	r0, [pc, #4]	@ (8005e58 <__malloc_lock+0x8>)
 8005e52:	f7ff b8ac 	b.w	8004fae <__retarget_lock_acquire_recursive>
 8005e56:	bf00      	nop
 8005e58:	2000041c 	.word	0x2000041c

08005e5c <__malloc_unlock>:
 8005e5c:	4801      	ldr	r0, [pc, #4]	@ (8005e64 <__malloc_unlock+0x8>)
 8005e5e:	f7ff b8a7 	b.w	8004fb0 <__retarget_lock_release_recursive>
 8005e62:	bf00      	nop
 8005e64:	2000041c 	.word	0x2000041c

08005e68 <_Balloc>:
 8005e68:	b570      	push	{r4, r5, r6, lr}
 8005e6a:	69c6      	ldr	r6, [r0, #28]
 8005e6c:	4604      	mov	r4, r0
 8005e6e:	460d      	mov	r5, r1
 8005e70:	b976      	cbnz	r6, 8005e90 <_Balloc+0x28>
 8005e72:	2010      	movs	r0, #16
 8005e74:	f7ff ff42 	bl	8005cfc <malloc>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	61e0      	str	r0, [r4, #28]
 8005e7c:	b920      	cbnz	r0, 8005e88 <_Balloc+0x20>
 8005e7e:	4b18      	ldr	r3, [pc, #96]	@ (8005ee0 <_Balloc+0x78>)
 8005e80:	4818      	ldr	r0, [pc, #96]	@ (8005ee4 <_Balloc+0x7c>)
 8005e82:	216b      	movs	r1, #107	@ 0x6b
 8005e84:	f000 fe0a 	bl	8006a9c <__assert_func>
 8005e88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e8c:	6006      	str	r6, [r0, #0]
 8005e8e:	60c6      	str	r6, [r0, #12]
 8005e90:	69e6      	ldr	r6, [r4, #28]
 8005e92:	68f3      	ldr	r3, [r6, #12]
 8005e94:	b183      	cbz	r3, 8005eb8 <_Balloc+0x50>
 8005e96:	69e3      	ldr	r3, [r4, #28]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005e9e:	b9b8      	cbnz	r0, 8005ed0 <_Balloc+0x68>
 8005ea0:	2101      	movs	r1, #1
 8005ea2:	fa01 f605 	lsl.w	r6, r1, r5
 8005ea6:	1d72      	adds	r2, r6, #5
 8005ea8:	0092      	lsls	r2, r2, #2
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f000 fe14 	bl	8006ad8 <_calloc_r>
 8005eb0:	b160      	cbz	r0, 8005ecc <_Balloc+0x64>
 8005eb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005eb6:	e00e      	b.n	8005ed6 <_Balloc+0x6e>
 8005eb8:	2221      	movs	r2, #33	@ 0x21
 8005eba:	2104      	movs	r1, #4
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f000 fe0b 	bl	8006ad8 <_calloc_r>
 8005ec2:	69e3      	ldr	r3, [r4, #28]
 8005ec4:	60f0      	str	r0, [r6, #12]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e4      	bne.n	8005e96 <_Balloc+0x2e>
 8005ecc:	2000      	movs	r0, #0
 8005ece:	bd70      	pop	{r4, r5, r6, pc}
 8005ed0:	6802      	ldr	r2, [r0, #0]
 8005ed2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005edc:	e7f7      	b.n	8005ece <_Balloc+0x66>
 8005ede:	bf00      	nop
 8005ee0:	08006d9d 	.word	0x08006d9d
 8005ee4:	08006e1d 	.word	0x08006e1d

08005ee8 <_Bfree>:
 8005ee8:	b570      	push	{r4, r5, r6, lr}
 8005eea:	69c6      	ldr	r6, [r0, #28]
 8005eec:	4605      	mov	r5, r0
 8005eee:	460c      	mov	r4, r1
 8005ef0:	b976      	cbnz	r6, 8005f10 <_Bfree+0x28>
 8005ef2:	2010      	movs	r0, #16
 8005ef4:	f7ff ff02 	bl	8005cfc <malloc>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	61e8      	str	r0, [r5, #28]
 8005efc:	b920      	cbnz	r0, 8005f08 <_Bfree+0x20>
 8005efe:	4b09      	ldr	r3, [pc, #36]	@ (8005f24 <_Bfree+0x3c>)
 8005f00:	4809      	ldr	r0, [pc, #36]	@ (8005f28 <_Bfree+0x40>)
 8005f02:	218f      	movs	r1, #143	@ 0x8f
 8005f04:	f000 fdca 	bl	8006a9c <__assert_func>
 8005f08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f0c:	6006      	str	r6, [r0, #0]
 8005f0e:	60c6      	str	r6, [r0, #12]
 8005f10:	b13c      	cbz	r4, 8005f22 <_Bfree+0x3a>
 8005f12:	69eb      	ldr	r3, [r5, #28]
 8005f14:	6862      	ldr	r2, [r4, #4]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f1c:	6021      	str	r1, [r4, #0]
 8005f1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f22:	bd70      	pop	{r4, r5, r6, pc}
 8005f24:	08006d9d 	.word	0x08006d9d
 8005f28:	08006e1d 	.word	0x08006e1d

08005f2c <__multadd>:
 8005f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f30:	690d      	ldr	r5, [r1, #16]
 8005f32:	4607      	mov	r7, r0
 8005f34:	460c      	mov	r4, r1
 8005f36:	461e      	mov	r6, r3
 8005f38:	f101 0c14 	add.w	ip, r1, #20
 8005f3c:	2000      	movs	r0, #0
 8005f3e:	f8dc 3000 	ldr.w	r3, [ip]
 8005f42:	b299      	uxth	r1, r3
 8005f44:	fb02 6101 	mla	r1, r2, r1, r6
 8005f48:	0c1e      	lsrs	r6, r3, #16
 8005f4a:	0c0b      	lsrs	r3, r1, #16
 8005f4c:	fb02 3306 	mla	r3, r2, r6, r3
 8005f50:	b289      	uxth	r1, r1
 8005f52:	3001      	adds	r0, #1
 8005f54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005f58:	4285      	cmp	r5, r0
 8005f5a:	f84c 1b04 	str.w	r1, [ip], #4
 8005f5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005f62:	dcec      	bgt.n	8005f3e <__multadd+0x12>
 8005f64:	b30e      	cbz	r6, 8005faa <__multadd+0x7e>
 8005f66:	68a3      	ldr	r3, [r4, #8]
 8005f68:	42ab      	cmp	r3, r5
 8005f6a:	dc19      	bgt.n	8005fa0 <__multadd+0x74>
 8005f6c:	6861      	ldr	r1, [r4, #4]
 8005f6e:	4638      	mov	r0, r7
 8005f70:	3101      	adds	r1, #1
 8005f72:	f7ff ff79 	bl	8005e68 <_Balloc>
 8005f76:	4680      	mov	r8, r0
 8005f78:	b928      	cbnz	r0, 8005f86 <__multadd+0x5a>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb0 <__multadd+0x84>)
 8005f7e:	480d      	ldr	r0, [pc, #52]	@ (8005fb4 <__multadd+0x88>)
 8005f80:	21ba      	movs	r1, #186	@ 0xba
 8005f82:	f000 fd8b 	bl	8006a9c <__assert_func>
 8005f86:	6922      	ldr	r2, [r4, #16]
 8005f88:	3202      	adds	r2, #2
 8005f8a:	f104 010c 	add.w	r1, r4, #12
 8005f8e:	0092      	lsls	r2, r2, #2
 8005f90:	300c      	adds	r0, #12
 8005f92:	f000 fd75 	bl	8006a80 <memcpy>
 8005f96:	4621      	mov	r1, r4
 8005f98:	4638      	mov	r0, r7
 8005f9a:	f7ff ffa5 	bl	8005ee8 <_Bfree>
 8005f9e:	4644      	mov	r4, r8
 8005fa0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005fa4:	3501      	adds	r5, #1
 8005fa6:	615e      	str	r6, [r3, #20]
 8005fa8:	6125      	str	r5, [r4, #16]
 8005faa:	4620      	mov	r0, r4
 8005fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fb0:	08006e0c 	.word	0x08006e0c
 8005fb4:	08006e1d 	.word	0x08006e1d

08005fb8 <__hi0bits>:
 8005fb8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	bf36      	itet	cc
 8005fc0:	0403      	lslcc	r3, r0, #16
 8005fc2:	2000      	movcs	r0, #0
 8005fc4:	2010      	movcc	r0, #16
 8005fc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fca:	bf3c      	itt	cc
 8005fcc:	021b      	lslcc	r3, r3, #8
 8005fce:	3008      	addcc	r0, #8
 8005fd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fd4:	bf3c      	itt	cc
 8005fd6:	011b      	lslcc	r3, r3, #4
 8005fd8:	3004      	addcc	r0, #4
 8005fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fde:	bf3c      	itt	cc
 8005fe0:	009b      	lslcc	r3, r3, #2
 8005fe2:	3002      	addcc	r0, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	db05      	blt.n	8005ff4 <__hi0bits+0x3c>
 8005fe8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005fec:	f100 0001 	add.w	r0, r0, #1
 8005ff0:	bf08      	it	eq
 8005ff2:	2020      	moveq	r0, #32
 8005ff4:	4770      	bx	lr

08005ff6 <__lo0bits>:
 8005ff6:	6803      	ldr	r3, [r0, #0]
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	f013 0007 	ands.w	r0, r3, #7
 8005ffe:	d00b      	beq.n	8006018 <__lo0bits+0x22>
 8006000:	07d9      	lsls	r1, r3, #31
 8006002:	d421      	bmi.n	8006048 <__lo0bits+0x52>
 8006004:	0798      	lsls	r0, r3, #30
 8006006:	bf49      	itett	mi
 8006008:	085b      	lsrmi	r3, r3, #1
 800600a:	089b      	lsrpl	r3, r3, #2
 800600c:	2001      	movmi	r0, #1
 800600e:	6013      	strmi	r3, [r2, #0]
 8006010:	bf5c      	itt	pl
 8006012:	6013      	strpl	r3, [r2, #0]
 8006014:	2002      	movpl	r0, #2
 8006016:	4770      	bx	lr
 8006018:	b299      	uxth	r1, r3
 800601a:	b909      	cbnz	r1, 8006020 <__lo0bits+0x2a>
 800601c:	0c1b      	lsrs	r3, r3, #16
 800601e:	2010      	movs	r0, #16
 8006020:	b2d9      	uxtb	r1, r3
 8006022:	b909      	cbnz	r1, 8006028 <__lo0bits+0x32>
 8006024:	3008      	adds	r0, #8
 8006026:	0a1b      	lsrs	r3, r3, #8
 8006028:	0719      	lsls	r1, r3, #28
 800602a:	bf04      	itt	eq
 800602c:	091b      	lsreq	r3, r3, #4
 800602e:	3004      	addeq	r0, #4
 8006030:	0799      	lsls	r1, r3, #30
 8006032:	bf04      	itt	eq
 8006034:	089b      	lsreq	r3, r3, #2
 8006036:	3002      	addeq	r0, #2
 8006038:	07d9      	lsls	r1, r3, #31
 800603a:	d403      	bmi.n	8006044 <__lo0bits+0x4e>
 800603c:	085b      	lsrs	r3, r3, #1
 800603e:	f100 0001 	add.w	r0, r0, #1
 8006042:	d003      	beq.n	800604c <__lo0bits+0x56>
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	4770      	bx	lr
 8006048:	2000      	movs	r0, #0
 800604a:	4770      	bx	lr
 800604c:	2020      	movs	r0, #32
 800604e:	4770      	bx	lr

08006050 <__i2b>:
 8006050:	b510      	push	{r4, lr}
 8006052:	460c      	mov	r4, r1
 8006054:	2101      	movs	r1, #1
 8006056:	f7ff ff07 	bl	8005e68 <_Balloc>
 800605a:	4602      	mov	r2, r0
 800605c:	b928      	cbnz	r0, 800606a <__i2b+0x1a>
 800605e:	4b05      	ldr	r3, [pc, #20]	@ (8006074 <__i2b+0x24>)
 8006060:	4805      	ldr	r0, [pc, #20]	@ (8006078 <__i2b+0x28>)
 8006062:	f240 1145 	movw	r1, #325	@ 0x145
 8006066:	f000 fd19 	bl	8006a9c <__assert_func>
 800606a:	2301      	movs	r3, #1
 800606c:	6144      	str	r4, [r0, #20]
 800606e:	6103      	str	r3, [r0, #16]
 8006070:	bd10      	pop	{r4, pc}
 8006072:	bf00      	nop
 8006074:	08006e0c 	.word	0x08006e0c
 8006078:	08006e1d 	.word	0x08006e1d

0800607c <__multiply>:
 800607c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006080:	4617      	mov	r7, r2
 8006082:	690a      	ldr	r2, [r1, #16]
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	429a      	cmp	r2, r3
 8006088:	bfa8      	it	ge
 800608a:	463b      	movge	r3, r7
 800608c:	4689      	mov	r9, r1
 800608e:	bfa4      	itt	ge
 8006090:	460f      	movge	r7, r1
 8006092:	4699      	movge	r9, r3
 8006094:	693d      	ldr	r5, [r7, #16]
 8006096:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	eb05 060a 	add.w	r6, r5, sl
 80060a2:	42b3      	cmp	r3, r6
 80060a4:	b085      	sub	sp, #20
 80060a6:	bfb8      	it	lt
 80060a8:	3101      	addlt	r1, #1
 80060aa:	f7ff fedd 	bl	8005e68 <_Balloc>
 80060ae:	b930      	cbnz	r0, 80060be <__multiply+0x42>
 80060b0:	4602      	mov	r2, r0
 80060b2:	4b41      	ldr	r3, [pc, #260]	@ (80061b8 <__multiply+0x13c>)
 80060b4:	4841      	ldr	r0, [pc, #260]	@ (80061bc <__multiply+0x140>)
 80060b6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80060ba:	f000 fcef 	bl	8006a9c <__assert_func>
 80060be:	f100 0414 	add.w	r4, r0, #20
 80060c2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80060c6:	4623      	mov	r3, r4
 80060c8:	2200      	movs	r2, #0
 80060ca:	4573      	cmp	r3, lr
 80060cc:	d320      	bcc.n	8006110 <__multiply+0x94>
 80060ce:	f107 0814 	add.w	r8, r7, #20
 80060d2:	f109 0114 	add.w	r1, r9, #20
 80060d6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80060da:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80060de:	9302      	str	r3, [sp, #8]
 80060e0:	1beb      	subs	r3, r5, r7
 80060e2:	3b15      	subs	r3, #21
 80060e4:	f023 0303 	bic.w	r3, r3, #3
 80060e8:	3304      	adds	r3, #4
 80060ea:	3715      	adds	r7, #21
 80060ec:	42bd      	cmp	r5, r7
 80060ee:	bf38      	it	cc
 80060f0:	2304      	movcc	r3, #4
 80060f2:	9301      	str	r3, [sp, #4]
 80060f4:	9b02      	ldr	r3, [sp, #8]
 80060f6:	9103      	str	r1, [sp, #12]
 80060f8:	428b      	cmp	r3, r1
 80060fa:	d80c      	bhi.n	8006116 <__multiply+0x9a>
 80060fc:	2e00      	cmp	r6, #0
 80060fe:	dd03      	ble.n	8006108 <__multiply+0x8c>
 8006100:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006104:	2b00      	cmp	r3, #0
 8006106:	d055      	beq.n	80061b4 <__multiply+0x138>
 8006108:	6106      	str	r6, [r0, #16]
 800610a:	b005      	add	sp, #20
 800610c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006110:	f843 2b04 	str.w	r2, [r3], #4
 8006114:	e7d9      	b.n	80060ca <__multiply+0x4e>
 8006116:	f8b1 a000 	ldrh.w	sl, [r1]
 800611a:	f1ba 0f00 	cmp.w	sl, #0
 800611e:	d01f      	beq.n	8006160 <__multiply+0xe4>
 8006120:	46c4      	mov	ip, r8
 8006122:	46a1      	mov	r9, r4
 8006124:	2700      	movs	r7, #0
 8006126:	f85c 2b04 	ldr.w	r2, [ip], #4
 800612a:	f8d9 3000 	ldr.w	r3, [r9]
 800612e:	fa1f fb82 	uxth.w	fp, r2
 8006132:	b29b      	uxth	r3, r3
 8006134:	fb0a 330b 	mla	r3, sl, fp, r3
 8006138:	443b      	add	r3, r7
 800613a:	f8d9 7000 	ldr.w	r7, [r9]
 800613e:	0c12      	lsrs	r2, r2, #16
 8006140:	0c3f      	lsrs	r7, r7, #16
 8006142:	fb0a 7202 	mla	r2, sl, r2, r7
 8006146:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800614a:	b29b      	uxth	r3, r3
 800614c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006150:	4565      	cmp	r5, ip
 8006152:	f849 3b04 	str.w	r3, [r9], #4
 8006156:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800615a:	d8e4      	bhi.n	8006126 <__multiply+0xaa>
 800615c:	9b01      	ldr	r3, [sp, #4]
 800615e:	50e7      	str	r7, [r4, r3]
 8006160:	9b03      	ldr	r3, [sp, #12]
 8006162:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006166:	3104      	adds	r1, #4
 8006168:	f1b9 0f00 	cmp.w	r9, #0
 800616c:	d020      	beq.n	80061b0 <__multiply+0x134>
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	4647      	mov	r7, r8
 8006172:	46a4      	mov	ip, r4
 8006174:	f04f 0a00 	mov.w	sl, #0
 8006178:	f8b7 b000 	ldrh.w	fp, [r7]
 800617c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006180:	fb09 220b 	mla	r2, r9, fp, r2
 8006184:	4452      	add	r2, sl
 8006186:	b29b      	uxth	r3, r3
 8006188:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800618c:	f84c 3b04 	str.w	r3, [ip], #4
 8006190:	f857 3b04 	ldr.w	r3, [r7], #4
 8006194:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006198:	f8bc 3000 	ldrh.w	r3, [ip]
 800619c:	fb09 330a 	mla	r3, r9, sl, r3
 80061a0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80061a4:	42bd      	cmp	r5, r7
 80061a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80061aa:	d8e5      	bhi.n	8006178 <__multiply+0xfc>
 80061ac:	9a01      	ldr	r2, [sp, #4]
 80061ae:	50a3      	str	r3, [r4, r2]
 80061b0:	3404      	adds	r4, #4
 80061b2:	e79f      	b.n	80060f4 <__multiply+0x78>
 80061b4:	3e01      	subs	r6, #1
 80061b6:	e7a1      	b.n	80060fc <__multiply+0x80>
 80061b8:	08006e0c 	.word	0x08006e0c
 80061bc:	08006e1d 	.word	0x08006e1d

080061c0 <__pow5mult>:
 80061c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061c4:	4615      	mov	r5, r2
 80061c6:	f012 0203 	ands.w	r2, r2, #3
 80061ca:	4607      	mov	r7, r0
 80061cc:	460e      	mov	r6, r1
 80061ce:	d007      	beq.n	80061e0 <__pow5mult+0x20>
 80061d0:	4c25      	ldr	r4, [pc, #148]	@ (8006268 <__pow5mult+0xa8>)
 80061d2:	3a01      	subs	r2, #1
 80061d4:	2300      	movs	r3, #0
 80061d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80061da:	f7ff fea7 	bl	8005f2c <__multadd>
 80061de:	4606      	mov	r6, r0
 80061e0:	10ad      	asrs	r5, r5, #2
 80061e2:	d03d      	beq.n	8006260 <__pow5mult+0xa0>
 80061e4:	69fc      	ldr	r4, [r7, #28]
 80061e6:	b97c      	cbnz	r4, 8006208 <__pow5mult+0x48>
 80061e8:	2010      	movs	r0, #16
 80061ea:	f7ff fd87 	bl	8005cfc <malloc>
 80061ee:	4602      	mov	r2, r0
 80061f0:	61f8      	str	r0, [r7, #28]
 80061f2:	b928      	cbnz	r0, 8006200 <__pow5mult+0x40>
 80061f4:	4b1d      	ldr	r3, [pc, #116]	@ (800626c <__pow5mult+0xac>)
 80061f6:	481e      	ldr	r0, [pc, #120]	@ (8006270 <__pow5mult+0xb0>)
 80061f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80061fc:	f000 fc4e 	bl	8006a9c <__assert_func>
 8006200:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006204:	6004      	str	r4, [r0, #0]
 8006206:	60c4      	str	r4, [r0, #12]
 8006208:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800620c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006210:	b94c      	cbnz	r4, 8006226 <__pow5mult+0x66>
 8006212:	f240 2171 	movw	r1, #625	@ 0x271
 8006216:	4638      	mov	r0, r7
 8006218:	f7ff ff1a 	bl	8006050 <__i2b>
 800621c:	2300      	movs	r3, #0
 800621e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006222:	4604      	mov	r4, r0
 8006224:	6003      	str	r3, [r0, #0]
 8006226:	f04f 0900 	mov.w	r9, #0
 800622a:	07eb      	lsls	r3, r5, #31
 800622c:	d50a      	bpl.n	8006244 <__pow5mult+0x84>
 800622e:	4631      	mov	r1, r6
 8006230:	4622      	mov	r2, r4
 8006232:	4638      	mov	r0, r7
 8006234:	f7ff ff22 	bl	800607c <__multiply>
 8006238:	4631      	mov	r1, r6
 800623a:	4680      	mov	r8, r0
 800623c:	4638      	mov	r0, r7
 800623e:	f7ff fe53 	bl	8005ee8 <_Bfree>
 8006242:	4646      	mov	r6, r8
 8006244:	106d      	asrs	r5, r5, #1
 8006246:	d00b      	beq.n	8006260 <__pow5mult+0xa0>
 8006248:	6820      	ldr	r0, [r4, #0]
 800624a:	b938      	cbnz	r0, 800625c <__pow5mult+0x9c>
 800624c:	4622      	mov	r2, r4
 800624e:	4621      	mov	r1, r4
 8006250:	4638      	mov	r0, r7
 8006252:	f7ff ff13 	bl	800607c <__multiply>
 8006256:	6020      	str	r0, [r4, #0]
 8006258:	f8c0 9000 	str.w	r9, [r0]
 800625c:	4604      	mov	r4, r0
 800625e:	e7e4      	b.n	800622a <__pow5mult+0x6a>
 8006260:	4630      	mov	r0, r6
 8006262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006266:	bf00      	nop
 8006268:	08006ed0 	.word	0x08006ed0
 800626c:	08006d9d 	.word	0x08006d9d
 8006270:	08006e1d 	.word	0x08006e1d

08006274 <__lshift>:
 8006274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006278:	460c      	mov	r4, r1
 800627a:	6849      	ldr	r1, [r1, #4]
 800627c:	6923      	ldr	r3, [r4, #16]
 800627e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006282:	68a3      	ldr	r3, [r4, #8]
 8006284:	4607      	mov	r7, r0
 8006286:	4691      	mov	r9, r2
 8006288:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800628c:	f108 0601 	add.w	r6, r8, #1
 8006290:	42b3      	cmp	r3, r6
 8006292:	db0b      	blt.n	80062ac <__lshift+0x38>
 8006294:	4638      	mov	r0, r7
 8006296:	f7ff fde7 	bl	8005e68 <_Balloc>
 800629a:	4605      	mov	r5, r0
 800629c:	b948      	cbnz	r0, 80062b2 <__lshift+0x3e>
 800629e:	4602      	mov	r2, r0
 80062a0:	4b28      	ldr	r3, [pc, #160]	@ (8006344 <__lshift+0xd0>)
 80062a2:	4829      	ldr	r0, [pc, #164]	@ (8006348 <__lshift+0xd4>)
 80062a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80062a8:	f000 fbf8 	bl	8006a9c <__assert_func>
 80062ac:	3101      	adds	r1, #1
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	e7ee      	b.n	8006290 <__lshift+0x1c>
 80062b2:	2300      	movs	r3, #0
 80062b4:	f100 0114 	add.w	r1, r0, #20
 80062b8:	f100 0210 	add.w	r2, r0, #16
 80062bc:	4618      	mov	r0, r3
 80062be:	4553      	cmp	r3, sl
 80062c0:	db33      	blt.n	800632a <__lshift+0xb6>
 80062c2:	6920      	ldr	r0, [r4, #16]
 80062c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062c8:	f104 0314 	add.w	r3, r4, #20
 80062cc:	f019 091f 	ands.w	r9, r9, #31
 80062d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80062d8:	d02b      	beq.n	8006332 <__lshift+0xbe>
 80062da:	f1c9 0e20 	rsb	lr, r9, #32
 80062de:	468a      	mov	sl, r1
 80062e0:	2200      	movs	r2, #0
 80062e2:	6818      	ldr	r0, [r3, #0]
 80062e4:	fa00 f009 	lsl.w	r0, r0, r9
 80062e8:	4310      	orrs	r0, r2
 80062ea:	f84a 0b04 	str.w	r0, [sl], #4
 80062ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80062f2:	459c      	cmp	ip, r3
 80062f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80062f8:	d8f3      	bhi.n	80062e2 <__lshift+0x6e>
 80062fa:	ebac 0304 	sub.w	r3, ip, r4
 80062fe:	3b15      	subs	r3, #21
 8006300:	f023 0303 	bic.w	r3, r3, #3
 8006304:	3304      	adds	r3, #4
 8006306:	f104 0015 	add.w	r0, r4, #21
 800630a:	4560      	cmp	r0, ip
 800630c:	bf88      	it	hi
 800630e:	2304      	movhi	r3, #4
 8006310:	50ca      	str	r2, [r1, r3]
 8006312:	b10a      	cbz	r2, 8006318 <__lshift+0xa4>
 8006314:	f108 0602 	add.w	r6, r8, #2
 8006318:	3e01      	subs	r6, #1
 800631a:	4638      	mov	r0, r7
 800631c:	612e      	str	r6, [r5, #16]
 800631e:	4621      	mov	r1, r4
 8006320:	f7ff fde2 	bl	8005ee8 <_Bfree>
 8006324:	4628      	mov	r0, r5
 8006326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800632a:	f842 0f04 	str.w	r0, [r2, #4]!
 800632e:	3301      	adds	r3, #1
 8006330:	e7c5      	b.n	80062be <__lshift+0x4a>
 8006332:	3904      	subs	r1, #4
 8006334:	f853 2b04 	ldr.w	r2, [r3], #4
 8006338:	f841 2f04 	str.w	r2, [r1, #4]!
 800633c:	459c      	cmp	ip, r3
 800633e:	d8f9      	bhi.n	8006334 <__lshift+0xc0>
 8006340:	e7ea      	b.n	8006318 <__lshift+0xa4>
 8006342:	bf00      	nop
 8006344:	08006e0c 	.word	0x08006e0c
 8006348:	08006e1d 	.word	0x08006e1d

0800634c <__mcmp>:
 800634c:	690a      	ldr	r2, [r1, #16]
 800634e:	4603      	mov	r3, r0
 8006350:	6900      	ldr	r0, [r0, #16]
 8006352:	1a80      	subs	r0, r0, r2
 8006354:	b530      	push	{r4, r5, lr}
 8006356:	d10e      	bne.n	8006376 <__mcmp+0x2a>
 8006358:	3314      	adds	r3, #20
 800635a:	3114      	adds	r1, #20
 800635c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006360:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006364:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006368:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800636c:	4295      	cmp	r5, r2
 800636e:	d003      	beq.n	8006378 <__mcmp+0x2c>
 8006370:	d205      	bcs.n	800637e <__mcmp+0x32>
 8006372:	f04f 30ff 	mov.w	r0, #4294967295
 8006376:	bd30      	pop	{r4, r5, pc}
 8006378:	42a3      	cmp	r3, r4
 800637a:	d3f3      	bcc.n	8006364 <__mcmp+0x18>
 800637c:	e7fb      	b.n	8006376 <__mcmp+0x2a>
 800637e:	2001      	movs	r0, #1
 8006380:	e7f9      	b.n	8006376 <__mcmp+0x2a>
	...

08006384 <__mdiff>:
 8006384:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006388:	4689      	mov	r9, r1
 800638a:	4606      	mov	r6, r0
 800638c:	4611      	mov	r1, r2
 800638e:	4648      	mov	r0, r9
 8006390:	4614      	mov	r4, r2
 8006392:	f7ff ffdb 	bl	800634c <__mcmp>
 8006396:	1e05      	subs	r5, r0, #0
 8006398:	d112      	bne.n	80063c0 <__mdiff+0x3c>
 800639a:	4629      	mov	r1, r5
 800639c:	4630      	mov	r0, r6
 800639e:	f7ff fd63 	bl	8005e68 <_Balloc>
 80063a2:	4602      	mov	r2, r0
 80063a4:	b928      	cbnz	r0, 80063b2 <__mdiff+0x2e>
 80063a6:	4b3f      	ldr	r3, [pc, #252]	@ (80064a4 <__mdiff+0x120>)
 80063a8:	f240 2137 	movw	r1, #567	@ 0x237
 80063ac:	483e      	ldr	r0, [pc, #248]	@ (80064a8 <__mdiff+0x124>)
 80063ae:	f000 fb75 	bl	8006a9c <__assert_func>
 80063b2:	2301      	movs	r3, #1
 80063b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80063b8:	4610      	mov	r0, r2
 80063ba:	b003      	add	sp, #12
 80063bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c0:	bfbc      	itt	lt
 80063c2:	464b      	movlt	r3, r9
 80063c4:	46a1      	movlt	r9, r4
 80063c6:	4630      	mov	r0, r6
 80063c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80063cc:	bfba      	itte	lt
 80063ce:	461c      	movlt	r4, r3
 80063d0:	2501      	movlt	r5, #1
 80063d2:	2500      	movge	r5, #0
 80063d4:	f7ff fd48 	bl	8005e68 <_Balloc>
 80063d8:	4602      	mov	r2, r0
 80063da:	b918      	cbnz	r0, 80063e4 <__mdiff+0x60>
 80063dc:	4b31      	ldr	r3, [pc, #196]	@ (80064a4 <__mdiff+0x120>)
 80063de:	f240 2145 	movw	r1, #581	@ 0x245
 80063e2:	e7e3      	b.n	80063ac <__mdiff+0x28>
 80063e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80063e8:	6926      	ldr	r6, [r4, #16]
 80063ea:	60c5      	str	r5, [r0, #12]
 80063ec:	f109 0310 	add.w	r3, r9, #16
 80063f0:	f109 0514 	add.w	r5, r9, #20
 80063f4:	f104 0e14 	add.w	lr, r4, #20
 80063f8:	f100 0b14 	add.w	fp, r0, #20
 80063fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006400:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006404:	9301      	str	r3, [sp, #4]
 8006406:	46d9      	mov	r9, fp
 8006408:	f04f 0c00 	mov.w	ip, #0
 800640c:	9b01      	ldr	r3, [sp, #4]
 800640e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006412:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006416:	9301      	str	r3, [sp, #4]
 8006418:	fa1f f38a 	uxth.w	r3, sl
 800641c:	4619      	mov	r1, r3
 800641e:	b283      	uxth	r3, r0
 8006420:	1acb      	subs	r3, r1, r3
 8006422:	0c00      	lsrs	r0, r0, #16
 8006424:	4463      	add	r3, ip
 8006426:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800642a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800642e:	b29b      	uxth	r3, r3
 8006430:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006434:	4576      	cmp	r6, lr
 8006436:	f849 3b04 	str.w	r3, [r9], #4
 800643a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800643e:	d8e5      	bhi.n	800640c <__mdiff+0x88>
 8006440:	1b33      	subs	r3, r6, r4
 8006442:	3b15      	subs	r3, #21
 8006444:	f023 0303 	bic.w	r3, r3, #3
 8006448:	3415      	adds	r4, #21
 800644a:	3304      	adds	r3, #4
 800644c:	42a6      	cmp	r6, r4
 800644e:	bf38      	it	cc
 8006450:	2304      	movcc	r3, #4
 8006452:	441d      	add	r5, r3
 8006454:	445b      	add	r3, fp
 8006456:	461e      	mov	r6, r3
 8006458:	462c      	mov	r4, r5
 800645a:	4544      	cmp	r4, r8
 800645c:	d30e      	bcc.n	800647c <__mdiff+0xf8>
 800645e:	f108 0103 	add.w	r1, r8, #3
 8006462:	1b49      	subs	r1, r1, r5
 8006464:	f021 0103 	bic.w	r1, r1, #3
 8006468:	3d03      	subs	r5, #3
 800646a:	45a8      	cmp	r8, r5
 800646c:	bf38      	it	cc
 800646e:	2100      	movcc	r1, #0
 8006470:	440b      	add	r3, r1
 8006472:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006476:	b191      	cbz	r1, 800649e <__mdiff+0x11a>
 8006478:	6117      	str	r7, [r2, #16]
 800647a:	e79d      	b.n	80063b8 <__mdiff+0x34>
 800647c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006480:	46e6      	mov	lr, ip
 8006482:	0c08      	lsrs	r0, r1, #16
 8006484:	fa1c fc81 	uxtah	ip, ip, r1
 8006488:	4471      	add	r1, lr
 800648a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800648e:	b289      	uxth	r1, r1
 8006490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006494:	f846 1b04 	str.w	r1, [r6], #4
 8006498:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800649c:	e7dd      	b.n	800645a <__mdiff+0xd6>
 800649e:	3f01      	subs	r7, #1
 80064a0:	e7e7      	b.n	8006472 <__mdiff+0xee>
 80064a2:	bf00      	nop
 80064a4:	08006e0c 	.word	0x08006e0c
 80064a8:	08006e1d 	.word	0x08006e1d

080064ac <__d2b>:
 80064ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80064b0:	460f      	mov	r7, r1
 80064b2:	2101      	movs	r1, #1
 80064b4:	ec59 8b10 	vmov	r8, r9, d0
 80064b8:	4616      	mov	r6, r2
 80064ba:	f7ff fcd5 	bl	8005e68 <_Balloc>
 80064be:	4604      	mov	r4, r0
 80064c0:	b930      	cbnz	r0, 80064d0 <__d2b+0x24>
 80064c2:	4602      	mov	r2, r0
 80064c4:	4b23      	ldr	r3, [pc, #140]	@ (8006554 <__d2b+0xa8>)
 80064c6:	4824      	ldr	r0, [pc, #144]	@ (8006558 <__d2b+0xac>)
 80064c8:	f240 310f 	movw	r1, #783	@ 0x30f
 80064cc:	f000 fae6 	bl	8006a9c <__assert_func>
 80064d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80064d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064d8:	b10d      	cbz	r5, 80064de <__d2b+0x32>
 80064da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064de:	9301      	str	r3, [sp, #4]
 80064e0:	f1b8 0300 	subs.w	r3, r8, #0
 80064e4:	d023      	beq.n	800652e <__d2b+0x82>
 80064e6:	4668      	mov	r0, sp
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	f7ff fd84 	bl	8005ff6 <__lo0bits>
 80064ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80064f2:	b1d0      	cbz	r0, 800652a <__d2b+0x7e>
 80064f4:	f1c0 0320 	rsb	r3, r0, #32
 80064f8:	fa02 f303 	lsl.w	r3, r2, r3
 80064fc:	430b      	orrs	r3, r1
 80064fe:	40c2      	lsrs	r2, r0
 8006500:	6163      	str	r3, [r4, #20]
 8006502:	9201      	str	r2, [sp, #4]
 8006504:	9b01      	ldr	r3, [sp, #4]
 8006506:	61a3      	str	r3, [r4, #24]
 8006508:	2b00      	cmp	r3, #0
 800650a:	bf0c      	ite	eq
 800650c:	2201      	moveq	r2, #1
 800650e:	2202      	movne	r2, #2
 8006510:	6122      	str	r2, [r4, #16]
 8006512:	b1a5      	cbz	r5, 800653e <__d2b+0x92>
 8006514:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006518:	4405      	add	r5, r0
 800651a:	603d      	str	r5, [r7, #0]
 800651c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006520:	6030      	str	r0, [r6, #0]
 8006522:	4620      	mov	r0, r4
 8006524:	b003      	add	sp, #12
 8006526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800652a:	6161      	str	r1, [r4, #20]
 800652c:	e7ea      	b.n	8006504 <__d2b+0x58>
 800652e:	a801      	add	r0, sp, #4
 8006530:	f7ff fd61 	bl	8005ff6 <__lo0bits>
 8006534:	9b01      	ldr	r3, [sp, #4]
 8006536:	6163      	str	r3, [r4, #20]
 8006538:	3020      	adds	r0, #32
 800653a:	2201      	movs	r2, #1
 800653c:	e7e8      	b.n	8006510 <__d2b+0x64>
 800653e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006542:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006546:	6038      	str	r0, [r7, #0]
 8006548:	6918      	ldr	r0, [r3, #16]
 800654a:	f7ff fd35 	bl	8005fb8 <__hi0bits>
 800654e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006552:	e7e5      	b.n	8006520 <__d2b+0x74>
 8006554:	08006e0c 	.word	0x08006e0c
 8006558:	08006e1d 	.word	0x08006e1d

0800655c <__sfputc_r>:
 800655c:	6893      	ldr	r3, [r2, #8]
 800655e:	3b01      	subs	r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	b410      	push	{r4}
 8006564:	6093      	str	r3, [r2, #8]
 8006566:	da08      	bge.n	800657a <__sfputc_r+0x1e>
 8006568:	6994      	ldr	r4, [r2, #24]
 800656a:	42a3      	cmp	r3, r4
 800656c:	db01      	blt.n	8006572 <__sfputc_r+0x16>
 800656e:	290a      	cmp	r1, #10
 8006570:	d103      	bne.n	800657a <__sfputc_r+0x1e>
 8006572:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006576:	f000 b9df 	b.w	8006938 <__swbuf_r>
 800657a:	6813      	ldr	r3, [r2, #0]
 800657c:	1c58      	adds	r0, r3, #1
 800657e:	6010      	str	r0, [r2, #0]
 8006580:	7019      	strb	r1, [r3, #0]
 8006582:	4608      	mov	r0, r1
 8006584:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006588:	4770      	bx	lr

0800658a <__sfputs_r>:
 800658a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800658c:	4606      	mov	r6, r0
 800658e:	460f      	mov	r7, r1
 8006590:	4614      	mov	r4, r2
 8006592:	18d5      	adds	r5, r2, r3
 8006594:	42ac      	cmp	r4, r5
 8006596:	d101      	bne.n	800659c <__sfputs_r+0x12>
 8006598:	2000      	movs	r0, #0
 800659a:	e007      	b.n	80065ac <__sfputs_r+0x22>
 800659c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065a0:	463a      	mov	r2, r7
 80065a2:	4630      	mov	r0, r6
 80065a4:	f7ff ffda 	bl	800655c <__sfputc_r>
 80065a8:	1c43      	adds	r3, r0, #1
 80065aa:	d1f3      	bne.n	8006594 <__sfputs_r+0xa>
 80065ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065b0 <_vfiprintf_r>:
 80065b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b4:	460d      	mov	r5, r1
 80065b6:	b09d      	sub	sp, #116	@ 0x74
 80065b8:	4614      	mov	r4, r2
 80065ba:	4698      	mov	r8, r3
 80065bc:	4606      	mov	r6, r0
 80065be:	b118      	cbz	r0, 80065c8 <_vfiprintf_r+0x18>
 80065c0:	6a03      	ldr	r3, [r0, #32]
 80065c2:	b90b      	cbnz	r3, 80065c8 <_vfiprintf_r+0x18>
 80065c4:	f7fe fbea 	bl	8004d9c <__sinit>
 80065c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065ca:	07d9      	lsls	r1, r3, #31
 80065cc:	d405      	bmi.n	80065da <_vfiprintf_r+0x2a>
 80065ce:	89ab      	ldrh	r3, [r5, #12]
 80065d0:	059a      	lsls	r2, r3, #22
 80065d2:	d402      	bmi.n	80065da <_vfiprintf_r+0x2a>
 80065d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065d6:	f7fe fcea 	bl	8004fae <__retarget_lock_acquire_recursive>
 80065da:	89ab      	ldrh	r3, [r5, #12]
 80065dc:	071b      	lsls	r3, r3, #28
 80065de:	d501      	bpl.n	80065e4 <_vfiprintf_r+0x34>
 80065e0:	692b      	ldr	r3, [r5, #16]
 80065e2:	b99b      	cbnz	r3, 800660c <_vfiprintf_r+0x5c>
 80065e4:	4629      	mov	r1, r5
 80065e6:	4630      	mov	r0, r6
 80065e8:	f000 f9e4 	bl	80069b4 <__swsetup_r>
 80065ec:	b170      	cbz	r0, 800660c <_vfiprintf_r+0x5c>
 80065ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065f0:	07dc      	lsls	r4, r3, #31
 80065f2:	d504      	bpl.n	80065fe <_vfiprintf_r+0x4e>
 80065f4:	f04f 30ff 	mov.w	r0, #4294967295
 80065f8:	b01d      	add	sp, #116	@ 0x74
 80065fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065fe:	89ab      	ldrh	r3, [r5, #12]
 8006600:	0598      	lsls	r0, r3, #22
 8006602:	d4f7      	bmi.n	80065f4 <_vfiprintf_r+0x44>
 8006604:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006606:	f7fe fcd3 	bl	8004fb0 <__retarget_lock_release_recursive>
 800660a:	e7f3      	b.n	80065f4 <_vfiprintf_r+0x44>
 800660c:	2300      	movs	r3, #0
 800660e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006610:	2320      	movs	r3, #32
 8006612:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006616:	f8cd 800c 	str.w	r8, [sp, #12]
 800661a:	2330      	movs	r3, #48	@ 0x30
 800661c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80067cc <_vfiprintf_r+0x21c>
 8006620:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006624:	f04f 0901 	mov.w	r9, #1
 8006628:	4623      	mov	r3, r4
 800662a:	469a      	mov	sl, r3
 800662c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006630:	b10a      	cbz	r2, 8006636 <_vfiprintf_r+0x86>
 8006632:	2a25      	cmp	r2, #37	@ 0x25
 8006634:	d1f9      	bne.n	800662a <_vfiprintf_r+0x7a>
 8006636:	ebba 0b04 	subs.w	fp, sl, r4
 800663a:	d00b      	beq.n	8006654 <_vfiprintf_r+0xa4>
 800663c:	465b      	mov	r3, fp
 800663e:	4622      	mov	r2, r4
 8006640:	4629      	mov	r1, r5
 8006642:	4630      	mov	r0, r6
 8006644:	f7ff ffa1 	bl	800658a <__sfputs_r>
 8006648:	3001      	adds	r0, #1
 800664a:	f000 80a7 	beq.w	800679c <_vfiprintf_r+0x1ec>
 800664e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006650:	445a      	add	r2, fp
 8006652:	9209      	str	r2, [sp, #36]	@ 0x24
 8006654:	f89a 3000 	ldrb.w	r3, [sl]
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 809f 	beq.w	800679c <_vfiprintf_r+0x1ec>
 800665e:	2300      	movs	r3, #0
 8006660:	f04f 32ff 	mov.w	r2, #4294967295
 8006664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006668:	f10a 0a01 	add.w	sl, sl, #1
 800666c:	9304      	str	r3, [sp, #16]
 800666e:	9307      	str	r3, [sp, #28]
 8006670:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006674:	931a      	str	r3, [sp, #104]	@ 0x68
 8006676:	4654      	mov	r4, sl
 8006678:	2205      	movs	r2, #5
 800667a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800667e:	4853      	ldr	r0, [pc, #332]	@ (80067cc <_vfiprintf_r+0x21c>)
 8006680:	f7f9 fda6 	bl	80001d0 <memchr>
 8006684:	9a04      	ldr	r2, [sp, #16]
 8006686:	b9d8      	cbnz	r0, 80066c0 <_vfiprintf_r+0x110>
 8006688:	06d1      	lsls	r1, r2, #27
 800668a:	bf44      	itt	mi
 800668c:	2320      	movmi	r3, #32
 800668e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006692:	0713      	lsls	r3, r2, #28
 8006694:	bf44      	itt	mi
 8006696:	232b      	movmi	r3, #43	@ 0x2b
 8006698:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800669c:	f89a 3000 	ldrb.w	r3, [sl]
 80066a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80066a2:	d015      	beq.n	80066d0 <_vfiprintf_r+0x120>
 80066a4:	9a07      	ldr	r2, [sp, #28]
 80066a6:	4654      	mov	r4, sl
 80066a8:	2000      	movs	r0, #0
 80066aa:	f04f 0c0a 	mov.w	ip, #10
 80066ae:	4621      	mov	r1, r4
 80066b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066b4:	3b30      	subs	r3, #48	@ 0x30
 80066b6:	2b09      	cmp	r3, #9
 80066b8:	d94b      	bls.n	8006752 <_vfiprintf_r+0x1a2>
 80066ba:	b1b0      	cbz	r0, 80066ea <_vfiprintf_r+0x13a>
 80066bc:	9207      	str	r2, [sp, #28]
 80066be:	e014      	b.n	80066ea <_vfiprintf_r+0x13a>
 80066c0:	eba0 0308 	sub.w	r3, r0, r8
 80066c4:	fa09 f303 	lsl.w	r3, r9, r3
 80066c8:	4313      	orrs	r3, r2
 80066ca:	9304      	str	r3, [sp, #16]
 80066cc:	46a2      	mov	sl, r4
 80066ce:	e7d2      	b.n	8006676 <_vfiprintf_r+0xc6>
 80066d0:	9b03      	ldr	r3, [sp, #12]
 80066d2:	1d19      	adds	r1, r3, #4
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	9103      	str	r1, [sp, #12]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	bfbb      	ittet	lt
 80066dc:	425b      	neglt	r3, r3
 80066de:	f042 0202 	orrlt.w	r2, r2, #2
 80066e2:	9307      	strge	r3, [sp, #28]
 80066e4:	9307      	strlt	r3, [sp, #28]
 80066e6:	bfb8      	it	lt
 80066e8:	9204      	strlt	r2, [sp, #16]
 80066ea:	7823      	ldrb	r3, [r4, #0]
 80066ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80066ee:	d10a      	bne.n	8006706 <_vfiprintf_r+0x156>
 80066f0:	7863      	ldrb	r3, [r4, #1]
 80066f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80066f4:	d132      	bne.n	800675c <_vfiprintf_r+0x1ac>
 80066f6:	9b03      	ldr	r3, [sp, #12]
 80066f8:	1d1a      	adds	r2, r3, #4
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	9203      	str	r2, [sp, #12]
 80066fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006702:	3402      	adds	r4, #2
 8006704:	9305      	str	r3, [sp, #20]
 8006706:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80067dc <_vfiprintf_r+0x22c>
 800670a:	7821      	ldrb	r1, [r4, #0]
 800670c:	2203      	movs	r2, #3
 800670e:	4650      	mov	r0, sl
 8006710:	f7f9 fd5e 	bl	80001d0 <memchr>
 8006714:	b138      	cbz	r0, 8006726 <_vfiprintf_r+0x176>
 8006716:	9b04      	ldr	r3, [sp, #16]
 8006718:	eba0 000a 	sub.w	r0, r0, sl
 800671c:	2240      	movs	r2, #64	@ 0x40
 800671e:	4082      	lsls	r2, r0
 8006720:	4313      	orrs	r3, r2
 8006722:	3401      	adds	r4, #1
 8006724:	9304      	str	r3, [sp, #16]
 8006726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800672a:	4829      	ldr	r0, [pc, #164]	@ (80067d0 <_vfiprintf_r+0x220>)
 800672c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006730:	2206      	movs	r2, #6
 8006732:	f7f9 fd4d 	bl	80001d0 <memchr>
 8006736:	2800      	cmp	r0, #0
 8006738:	d03f      	beq.n	80067ba <_vfiprintf_r+0x20a>
 800673a:	4b26      	ldr	r3, [pc, #152]	@ (80067d4 <_vfiprintf_r+0x224>)
 800673c:	bb1b      	cbnz	r3, 8006786 <_vfiprintf_r+0x1d6>
 800673e:	9b03      	ldr	r3, [sp, #12]
 8006740:	3307      	adds	r3, #7
 8006742:	f023 0307 	bic.w	r3, r3, #7
 8006746:	3308      	adds	r3, #8
 8006748:	9303      	str	r3, [sp, #12]
 800674a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800674c:	443b      	add	r3, r7
 800674e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006750:	e76a      	b.n	8006628 <_vfiprintf_r+0x78>
 8006752:	fb0c 3202 	mla	r2, ip, r2, r3
 8006756:	460c      	mov	r4, r1
 8006758:	2001      	movs	r0, #1
 800675a:	e7a8      	b.n	80066ae <_vfiprintf_r+0xfe>
 800675c:	2300      	movs	r3, #0
 800675e:	3401      	adds	r4, #1
 8006760:	9305      	str	r3, [sp, #20]
 8006762:	4619      	mov	r1, r3
 8006764:	f04f 0c0a 	mov.w	ip, #10
 8006768:	4620      	mov	r0, r4
 800676a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800676e:	3a30      	subs	r2, #48	@ 0x30
 8006770:	2a09      	cmp	r2, #9
 8006772:	d903      	bls.n	800677c <_vfiprintf_r+0x1cc>
 8006774:	2b00      	cmp	r3, #0
 8006776:	d0c6      	beq.n	8006706 <_vfiprintf_r+0x156>
 8006778:	9105      	str	r1, [sp, #20]
 800677a:	e7c4      	b.n	8006706 <_vfiprintf_r+0x156>
 800677c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006780:	4604      	mov	r4, r0
 8006782:	2301      	movs	r3, #1
 8006784:	e7f0      	b.n	8006768 <_vfiprintf_r+0x1b8>
 8006786:	ab03      	add	r3, sp, #12
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	462a      	mov	r2, r5
 800678c:	4b12      	ldr	r3, [pc, #72]	@ (80067d8 <_vfiprintf_r+0x228>)
 800678e:	a904      	add	r1, sp, #16
 8006790:	4630      	mov	r0, r6
 8006792:	f7fd fec1 	bl	8004518 <_printf_float>
 8006796:	4607      	mov	r7, r0
 8006798:	1c78      	adds	r0, r7, #1
 800679a:	d1d6      	bne.n	800674a <_vfiprintf_r+0x19a>
 800679c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800679e:	07d9      	lsls	r1, r3, #31
 80067a0:	d405      	bmi.n	80067ae <_vfiprintf_r+0x1fe>
 80067a2:	89ab      	ldrh	r3, [r5, #12]
 80067a4:	059a      	lsls	r2, r3, #22
 80067a6:	d402      	bmi.n	80067ae <_vfiprintf_r+0x1fe>
 80067a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067aa:	f7fe fc01 	bl	8004fb0 <__retarget_lock_release_recursive>
 80067ae:	89ab      	ldrh	r3, [r5, #12]
 80067b0:	065b      	lsls	r3, r3, #25
 80067b2:	f53f af1f 	bmi.w	80065f4 <_vfiprintf_r+0x44>
 80067b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067b8:	e71e      	b.n	80065f8 <_vfiprintf_r+0x48>
 80067ba:	ab03      	add	r3, sp, #12
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	462a      	mov	r2, r5
 80067c0:	4b05      	ldr	r3, [pc, #20]	@ (80067d8 <_vfiprintf_r+0x228>)
 80067c2:	a904      	add	r1, sp, #16
 80067c4:	4630      	mov	r0, r6
 80067c6:	f7fe f93f 	bl	8004a48 <_printf_i>
 80067ca:	e7e4      	b.n	8006796 <_vfiprintf_r+0x1e6>
 80067cc:	08006e76 	.word	0x08006e76
 80067d0:	08006e80 	.word	0x08006e80
 80067d4:	08004519 	.word	0x08004519
 80067d8:	0800658b 	.word	0x0800658b
 80067dc:	08006e7c 	.word	0x08006e7c

080067e0 <__sflush_r>:
 80067e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80067e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067e8:	0716      	lsls	r6, r2, #28
 80067ea:	4605      	mov	r5, r0
 80067ec:	460c      	mov	r4, r1
 80067ee:	d454      	bmi.n	800689a <__sflush_r+0xba>
 80067f0:	684b      	ldr	r3, [r1, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	dc02      	bgt.n	80067fc <__sflush_r+0x1c>
 80067f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	dd48      	ble.n	800688e <__sflush_r+0xae>
 80067fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80067fe:	2e00      	cmp	r6, #0
 8006800:	d045      	beq.n	800688e <__sflush_r+0xae>
 8006802:	2300      	movs	r3, #0
 8006804:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006808:	682f      	ldr	r7, [r5, #0]
 800680a:	6a21      	ldr	r1, [r4, #32]
 800680c:	602b      	str	r3, [r5, #0]
 800680e:	d030      	beq.n	8006872 <__sflush_r+0x92>
 8006810:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006812:	89a3      	ldrh	r3, [r4, #12]
 8006814:	0759      	lsls	r1, r3, #29
 8006816:	d505      	bpl.n	8006824 <__sflush_r+0x44>
 8006818:	6863      	ldr	r3, [r4, #4]
 800681a:	1ad2      	subs	r2, r2, r3
 800681c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800681e:	b10b      	cbz	r3, 8006824 <__sflush_r+0x44>
 8006820:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006822:	1ad2      	subs	r2, r2, r3
 8006824:	2300      	movs	r3, #0
 8006826:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006828:	6a21      	ldr	r1, [r4, #32]
 800682a:	4628      	mov	r0, r5
 800682c:	47b0      	blx	r6
 800682e:	1c43      	adds	r3, r0, #1
 8006830:	89a3      	ldrh	r3, [r4, #12]
 8006832:	d106      	bne.n	8006842 <__sflush_r+0x62>
 8006834:	6829      	ldr	r1, [r5, #0]
 8006836:	291d      	cmp	r1, #29
 8006838:	d82b      	bhi.n	8006892 <__sflush_r+0xb2>
 800683a:	4a2a      	ldr	r2, [pc, #168]	@ (80068e4 <__sflush_r+0x104>)
 800683c:	40ca      	lsrs	r2, r1
 800683e:	07d6      	lsls	r6, r2, #31
 8006840:	d527      	bpl.n	8006892 <__sflush_r+0xb2>
 8006842:	2200      	movs	r2, #0
 8006844:	6062      	str	r2, [r4, #4]
 8006846:	04d9      	lsls	r1, r3, #19
 8006848:	6922      	ldr	r2, [r4, #16]
 800684a:	6022      	str	r2, [r4, #0]
 800684c:	d504      	bpl.n	8006858 <__sflush_r+0x78>
 800684e:	1c42      	adds	r2, r0, #1
 8006850:	d101      	bne.n	8006856 <__sflush_r+0x76>
 8006852:	682b      	ldr	r3, [r5, #0]
 8006854:	b903      	cbnz	r3, 8006858 <__sflush_r+0x78>
 8006856:	6560      	str	r0, [r4, #84]	@ 0x54
 8006858:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800685a:	602f      	str	r7, [r5, #0]
 800685c:	b1b9      	cbz	r1, 800688e <__sflush_r+0xae>
 800685e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006862:	4299      	cmp	r1, r3
 8006864:	d002      	beq.n	800686c <__sflush_r+0x8c>
 8006866:	4628      	mov	r0, r5
 8006868:	f7ff f9fe 	bl	8005c68 <_free_r>
 800686c:	2300      	movs	r3, #0
 800686e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006870:	e00d      	b.n	800688e <__sflush_r+0xae>
 8006872:	2301      	movs	r3, #1
 8006874:	4628      	mov	r0, r5
 8006876:	47b0      	blx	r6
 8006878:	4602      	mov	r2, r0
 800687a:	1c50      	adds	r0, r2, #1
 800687c:	d1c9      	bne.n	8006812 <__sflush_r+0x32>
 800687e:	682b      	ldr	r3, [r5, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d0c6      	beq.n	8006812 <__sflush_r+0x32>
 8006884:	2b1d      	cmp	r3, #29
 8006886:	d001      	beq.n	800688c <__sflush_r+0xac>
 8006888:	2b16      	cmp	r3, #22
 800688a:	d11e      	bne.n	80068ca <__sflush_r+0xea>
 800688c:	602f      	str	r7, [r5, #0]
 800688e:	2000      	movs	r0, #0
 8006890:	e022      	b.n	80068d8 <__sflush_r+0xf8>
 8006892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006896:	b21b      	sxth	r3, r3
 8006898:	e01b      	b.n	80068d2 <__sflush_r+0xf2>
 800689a:	690f      	ldr	r7, [r1, #16]
 800689c:	2f00      	cmp	r7, #0
 800689e:	d0f6      	beq.n	800688e <__sflush_r+0xae>
 80068a0:	0793      	lsls	r3, r2, #30
 80068a2:	680e      	ldr	r6, [r1, #0]
 80068a4:	bf08      	it	eq
 80068a6:	694b      	ldreq	r3, [r1, #20]
 80068a8:	600f      	str	r7, [r1, #0]
 80068aa:	bf18      	it	ne
 80068ac:	2300      	movne	r3, #0
 80068ae:	eba6 0807 	sub.w	r8, r6, r7
 80068b2:	608b      	str	r3, [r1, #8]
 80068b4:	f1b8 0f00 	cmp.w	r8, #0
 80068b8:	dde9      	ble.n	800688e <__sflush_r+0xae>
 80068ba:	6a21      	ldr	r1, [r4, #32]
 80068bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80068be:	4643      	mov	r3, r8
 80068c0:	463a      	mov	r2, r7
 80068c2:	4628      	mov	r0, r5
 80068c4:	47b0      	blx	r6
 80068c6:	2800      	cmp	r0, #0
 80068c8:	dc08      	bgt.n	80068dc <__sflush_r+0xfc>
 80068ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068d2:	81a3      	strh	r3, [r4, #12]
 80068d4:	f04f 30ff 	mov.w	r0, #4294967295
 80068d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068dc:	4407      	add	r7, r0
 80068de:	eba8 0800 	sub.w	r8, r8, r0
 80068e2:	e7e7      	b.n	80068b4 <__sflush_r+0xd4>
 80068e4:	20400001 	.word	0x20400001

080068e8 <_fflush_r>:
 80068e8:	b538      	push	{r3, r4, r5, lr}
 80068ea:	690b      	ldr	r3, [r1, #16]
 80068ec:	4605      	mov	r5, r0
 80068ee:	460c      	mov	r4, r1
 80068f0:	b913      	cbnz	r3, 80068f8 <_fflush_r+0x10>
 80068f2:	2500      	movs	r5, #0
 80068f4:	4628      	mov	r0, r5
 80068f6:	bd38      	pop	{r3, r4, r5, pc}
 80068f8:	b118      	cbz	r0, 8006902 <_fflush_r+0x1a>
 80068fa:	6a03      	ldr	r3, [r0, #32]
 80068fc:	b90b      	cbnz	r3, 8006902 <_fflush_r+0x1a>
 80068fe:	f7fe fa4d 	bl	8004d9c <__sinit>
 8006902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d0f3      	beq.n	80068f2 <_fflush_r+0xa>
 800690a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800690c:	07d0      	lsls	r0, r2, #31
 800690e:	d404      	bmi.n	800691a <_fflush_r+0x32>
 8006910:	0599      	lsls	r1, r3, #22
 8006912:	d402      	bmi.n	800691a <_fflush_r+0x32>
 8006914:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006916:	f7fe fb4a 	bl	8004fae <__retarget_lock_acquire_recursive>
 800691a:	4628      	mov	r0, r5
 800691c:	4621      	mov	r1, r4
 800691e:	f7ff ff5f 	bl	80067e0 <__sflush_r>
 8006922:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006924:	07da      	lsls	r2, r3, #31
 8006926:	4605      	mov	r5, r0
 8006928:	d4e4      	bmi.n	80068f4 <_fflush_r+0xc>
 800692a:	89a3      	ldrh	r3, [r4, #12]
 800692c:	059b      	lsls	r3, r3, #22
 800692e:	d4e1      	bmi.n	80068f4 <_fflush_r+0xc>
 8006930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006932:	f7fe fb3d 	bl	8004fb0 <__retarget_lock_release_recursive>
 8006936:	e7dd      	b.n	80068f4 <_fflush_r+0xc>

08006938 <__swbuf_r>:
 8006938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693a:	460e      	mov	r6, r1
 800693c:	4614      	mov	r4, r2
 800693e:	4605      	mov	r5, r0
 8006940:	b118      	cbz	r0, 800694a <__swbuf_r+0x12>
 8006942:	6a03      	ldr	r3, [r0, #32]
 8006944:	b90b      	cbnz	r3, 800694a <__swbuf_r+0x12>
 8006946:	f7fe fa29 	bl	8004d9c <__sinit>
 800694a:	69a3      	ldr	r3, [r4, #24]
 800694c:	60a3      	str	r3, [r4, #8]
 800694e:	89a3      	ldrh	r3, [r4, #12]
 8006950:	071a      	lsls	r2, r3, #28
 8006952:	d501      	bpl.n	8006958 <__swbuf_r+0x20>
 8006954:	6923      	ldr	r3, [r4, #16]
 8006956:	b943      	cbnz	r3, 800696a <__swbuf_r+0x32>
 8006958:	4621      	mov	r1, r4
 800695a:	4628      	mov	r0, r5
 800695c:	f000 f82a 	bl	80069b4 <__swsetup_r>
 8006960:	b118      	cbz	r0, 800696a <__swbuf_r+0x32>
 8006962:	f04f 37ff 	mov.w	r7, #4294967295
 8006966:	4638      	mov	r0, r7
 8006968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	6922      	ldr	r2, [r4, #16]
 800696e:	1a98      	subs	r0, r3, r2
 8006970:	6963      	ldr	r3, [r4, #20]
 8006972:	b2f6      	uxtb	r6, r6
 8006974:	4283      	cmp	r3, r0
 8006976:	4637      	mov	r7, r6
 8006978:	dc05      	bgt.n	8006986 <__swbuf_r+0x4e>
 800697a:	4621      	mov	r1, r4
 800697c:	4628      	mov	r0, r5
 800697e:	f7ff ffb3 	bl	80068e8 <_fflush_r>
 8006982:	2800      	cmp	r0, #0
 8006984:	d1ed      	bne.n	8006962 <__swbuf_r+0x2a>
 8006986:	68a3      	ldr	r3, [r4, #8]
 8006988:	3b01      	subs	r3, #1
 800698a:	60a3      	str	r3, [r4, #8]
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	6022      	str	r2, [r4, #0]
 8006992:	701e      	strb	r6, [r3, #0]
 8006994:	6962      	ldr	r2, [r4, #20]
 8006996:	1c43      	adds	r3, r0, #1
 8006998:	429a      	cmp	r2, r3
 800699a:	d004      	beq.n	80069a6 <__swbuf_r+0x6e>
 800699c:	89a3      	ldrh	r3, [r4, #12]
 800699e:	07db      	lsls	r3, r3, #31
 80069a0:	d5e1      	bpl.n	8006966 <__swbuf_r+0x2e>
 80069a2:	2e0a      	cmp	r6, #10
 80069a4:	d1df      	bne.n	8006966 <__swbuf_r+0x2e>
 80069a6:	4621      	mov	r1, r4
 80069a8:	4628      	mov	r0, r5
 80069aa:	f7ff ff9d 	bl	80068e8 <_fflush_r>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d0d9      	beq.n	8006966 <__swbuf_r+0x2e>
 80069b2:	e7d6      	b.n	8006962 <__swbuf_r+0x2a>

080069b4 <__swsetup_r>:
 80069b4:	b538      	push	{r3, r4, r5, lr}
 80069b6:	4b29      	ldr	r3, [pc, #164]	@ (8006a5c <__swsetup_r+0xa8>)
 80069b8:	4605      	mov	r5, r0
 80069ba:	6818      	ldr	r0, [r3, #0]
 80069bc:	460c      	mov	r4, r1
 80069be:	b118      	cbz	r0, 80069c8 <__swsetup_r+0x14>
 80069c0:	6a03      	ldr	r3, [r0, #32]
 80069c2:	b90b      	cbnz	r3, 80069c8 <__swsetup_r+0x14>
 80069c4:	f7fe f9ea 	bl	8004d9c <__sinit>
 80069c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069cc:	0719      	lsls	r1, r3, #28
 80069ce:	d422      	bmi.n	8006a16 <__swsetup_r+0x62>
 80069d0:	06da      	lsls	r2, r3, #27
 80069d2:	d407      	bmi.n	80069e4 <__swsetup_r+0x30>
 80069d4:	2209      	movs	r2, #9
 80069d6:	602a      	str	r2, [r5, #0]
 80069d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069dc:	81a3      	strh	r3, [r4, #12]
 80069de:	f04f 30ff 	mov.w	r0, #4294967295
 80069e2:	e033      	b.n	8006a4c <__swsetup_r+0x98>
 80069e4:	0758      	lsls	r0, r3, #29
 80069e6:	d512      	bpl.n	8006a0e <__swsetup_r+0x5a>
 80069e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069ea:	b141      	cbz	r1, 80069fe <__swsetup_r+0x4a>
 80069ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069f0:	4299      	cmp	r1, r3
 80069f2:	d002      	beq.n	80069fa <__swsetup_r+0x46>
 80069f4:	4628      	mov	r0, r5
 80069f6:	f7ff f937 	bl	8005c68 <_free_r>
 80069fa:	2300      	movs	r3, #0
 80069fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80069fe:	89a3      	ldrh	r3, [r4, #12]
 8006a00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a04:	81a3      	strh	r3, [r4, #12]
 8006a06:	2300      	movs	r3, #0
 8006a08:	6063      	str	r3, [r4, #4]
 8006a0a:	6923      	ldr	r3, [r4, #16]
 8006a0c:	6023      	str	r3, [r4, #0]
 8006a0e:	89a3      	ldrh	r3, [r4, #12]
 8006a10:	f043 0308 	orr.w	r3, r3, #8
 8006a14:	81a3      	strh	r3, [r4, #12]
 8006a16:	6923      	ldr	r3, [r4, #16]
 8006a18:	b94b      	cbnz	r3, 8006a2e <__swsetup_r+0x7a>
 8006a1a:	89a3      	ldrh	r3, [r4, #12]
 8006a1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a24:	d003      	beq.n	8006a2e <__swsetup_r+0x7a>
 8006a26:	4621      	mov	r1, r4
 8006a28:	4628      	mov	r0, r5
 8006a2a:	f000 f8c1 	bl	8006bb0 <__smakebuf_r>
 8006a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a32:	f013 0201 	ands.w	r2, r3, #1
 8006a36:	d00a      	beq.n	8006a4e <__swsetup_r+0x9a>
 8006a38:	2200      	movs	r2, #0
 8006a3a:	60a2      	str	r2, [r4, #8]
 8006a3c:	6962      	ldr	r2, [r4, #20]
 8006a3e:	4252      	negs	r2, r2
 8006a40:	61a2      	str	r2, [r4, #24]
 8006a42:	6922      	ldr	r2, [r4, #16]
 8006a44:	b942      	cbnz	r2, 8006a58 <__swsetup_r+0xa4>
 8006a46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006a4a:	d1c5      	bne.n	80069d8 <__swsetup_r+0x24>
 8006a4c:	bd38      	pop	{r3, r4, r5, pc}
 8006a4e:	0799      	lsls	r1, r3, #30
 8006a50:	bf58      	it	pl
 8006a52:	6962      	ldrpl	r2, [r4, #20]
 8006a54:	60a2      	str	r2, [r4, #8]
 8006a56:	e7f4      	b.n	8006a42 <__swsetup_r+0x8e>
 8006a58:	2000      	movs	r0, #0
 8006a5a:	e7f7      	b.n	8006a4c <__swsetup_r+0x98>
 8006a5c:	20000018 	.word	0x20000018

08006a60 <_sbrk_r>:
 8006a60:	b538      	push	{r3, r4, r5, lr}
 8006a62:	4d06      	ldr	r5, [pc, #24]	@ (8006a7c <_sbrk_r+0x1c>)
 8006a64:	2300      	movs	r3, #0
 8006a66:	4604      	mov	r4, r0
 8006a68:	4608      	mov	r0, r1
 8006a6a:	602b      	str	r3, [r5, #0]
 8006a6c:	f7fa fe6c 	bl	8001748 <_sbrk>
 8006a70:	1c43      	adds	r3, r0, #1
 8006a72:	d102      	bne.n	8006a7a <_sbrk_r+0x1a>
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	b103      	cbz	r3, 8006a7a <_sbrk_r+0x1a>
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	bd38      	pop	{r3, r4, r5, pc}
 8006a7c:	20000418 	.word	0x20000418

08006a80 <memcpy>:
 8006a80:	440a      	add	r2, r1
 8006a82:	4291      	cmp	r1, r2
 8006a84:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a88:	d100      	bne.n	8006a8c <memcpy+0xc>
 8006a8a:	4770      	bx	lr
 8006a8c:	b510      	push	{r4, lr}
 8006a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a96:	4291      	cmp	r1, r2
 8006a98:	d1f9      	bne.n	8006a8e <memcpy+0xe>
 8006a9a:	bd10      	pop	{r4, pc}

08006a9c <__assert_func>:
 8006a9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a9e:	4614      	mov	r4, r2
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	4b09      	ldr	r3, [pc, #36]	@ (8006ac8 <__assert_func+0x2c>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4605      	mov	r5, r0
 8006aa8:	68d8      	ldr	r0, [r3, #12]
 8006aaa:	b14c      	cbz	r4, 8006ac0 <__assert_func+0x24>
 8006aac:	4b07      	ldr	r3, [pc, #28]	@ (8006acc <__assert_func+0x30>)
 8006aae:	9100      	str	r1, [sp, #0]
 8006ab0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ab4:	4906      	ldr	r1, [pc, #24]	@ (8006ad0 <__assert_func+0x34>)
 8006ab6:	462b      	mov	r3, r5
 8006ab8:	f000 f842 	bl	8006b40 <fiprintf>
 8006abc:	f000 f8d6 	bl	8006c6c <abort>
 8006ac0:	4b04      	ldr	r3, [pc, #16]	@ (8006ad4 <__assert_func+0x38>)
 8006ac2:	461c      	mov	r4, r3
 8006ac4:	e7f3      	b.n	8006aae <__assert_func+0x12>
 8006ac6:	bf00      	nop
 8006ac8:	20000018 	.word	0x20000018
 8006acc:	08006e91 	.word	0x08006e91
 8006ad0:	08006e9e 	.word	0x08006e9e
 8006ad4:	08006ecc 	.word	0x08006ecc

08006ad8 <_calloc_r>:
 8006ad8:	b570      	push	{r4, r5, r6, lr}
 8006ada:	fba1 5402 	umull	r5, r4, r1, r2
 8006ade:	b934      	cbnz	r4, 8006aee <_calloc_r+0x16>
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	f7ff f935 	bl	8005d50 <_malloc_r>
 8006ae6:	4606      	mov	r6, r0
 8006ae8:	b928      	cbnz	r0, 8006af6 <_calloc_r+0x1e>
 8006aea:	4630      	mov	r0, r6
 8006aec:	bd70      	pop	{r4, r5, r6, pc}
 8006aee:	220c      	movs	r2, #12
 8006af0:	6002      	str	r2, [r0, #0]
 8006af2:	2600      	movs	r6, #0
 8006af4:	e7f9      	b.n	8006aea <_calloc_r+0x12>
 8006af6:	462a      	mov	r2, r5
 8006af8:	4621      	mov	r1, r4
 8006afa:	f7fe f9da 	bl	8004eb2 <memset>
 8006afe:	e7f4      	b.n	8006aea <_calloc_r+0x12>

08006b00 <__ascii_mbtowc>:
 8006b00:	b082      	sub	sp, #8
 8006b02:	b901      	cbnz	r1, 8006b06 <__ascii_mbtowc+0x6>
 8006b04:	a901      	add	r1, sp, #4
 8006b06:	b142      	cbz	r2, 8006b1a <__ascii_mbtowc+0x1a>
 8006b08:	b14b      	cbz	r3, 8006b1e <__ascii_mbtowc+0x1e>
 8006b0a:	7813      	ldrb	r3, [r2, #0]
 8006b0c:	600b      	str	r3, [r1, #0]
 8006b0e:	7812      	ldrb	r2, [r2, #0]
 8006b10:	1e10      	subs	r0, r2, #0
 8006b12:	bf18      	it	ne
 8006b14:	2001      	movne	r0, #1
 8006b16:	b002      	add	sp, #8
 8006b18:	4770      	bx	lr
 8006b1a:	4610      	mov	r0, r2
 8006b1c:	e7fb      	b.n	8006b16 <__ascii_mbtowc+0x16>
 8006b1e:	f06f 0001 	mvn.w	r0, #1
 8006b22:	e7f8      	b.n	8006b16 <__ascii_mbtowc+0x16>

08006b24 <__ascii_wctomb>:
 8006b24:	4603      	mov	r3, r0
 8006b26:	4608      	mov	r0, r1
 8006b28:	b141      	cbz	r1, 8006b3c <__ascii_wctomb+0x18>
 8006b2a:	2aff      	cmp	r2, #255	@ 0xff
 8006b2c:	d904      	bls.n	8006b38 <__ascii_wctomb+0x14>
 8006b2e:	228a      	movs	r2, #138	@ 0x8a
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	f04f 30ff 	mov.w	r0, #4294967295
 8006b36:	4770      	bx	lr
 8006b38:	700a      	strb	r2, [r1, #0]
 8006b3a:	2001      	movs	r0, #1
 8006b3c:	4770      	bx	lr
	...

08006b40 <fiprintf>:
 8006b40:	b40e      	push	{r1, r2, r3}
 8006b42:	b503      	push	{r0, r1, lr}
 8006b44:	4601      	mov	r1, r0
 8006b46:	ab03      	add	r3, sp, #12
 8006b48:	4805      	ldr	r0, [pc, #20]	@ (8006b60 <fiprintf+0x20>)
 8006b4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b4e:	6800      	ldr	r0, [r0, #0]
 8006b50:	9301      	str	r3, [sp, #4]
 8006b52:	f7ff fd2d 	bl	80065b0 <_vfiprintf_r>
 8006b56:	b002      	add	sp, #8
 8006b58:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b5c:	b003      	add	sp, #12
 8006b5e:	4770      	bx	lr
 8006b60:	20000018 	.word	0x20000018

08006b64 <__swhatbuf_r>:
 8006b64:	b570      	push	{r4, r5, r6, lr}
 8006b66:	460c      	mov	r4, r1
 8006b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b6c:	2900      	cmp	r1, #0
 8006b6e:	b096      	sub	sp, #88	@ 0x58
 8006b70:	4615      	mov	r5, r2
 8006b72:	461e      	mov	r6, r3
 8006b74:	da0d      	bge.n	8006b92 <__swhatbuf_r+0x2e>
 8006b76:	89a3      	ldrh	r3, [r4, #12]
 8006b78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b7c:	f04f 0100 	mov.w	r1, #0
 8006b80:	bf14      	ite	ne
 8006b82:	2340      	movne	r3, #64	@ 0x40
 8006b84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b88:	2000      	movs	r0, #0
 8006b8a:	6031      	str	r1, [r6, #0]
 8006b8c:	602b      	str	r3, [r5, #0]
 8006b8e:	b016      	add	sp, #88	@ 0x58
 8006b90:	bd70      	pop	{r4, r5, r6, pc}
 8006b92:	466a      	mov	r2, sp
 8006b94:	f000 f848 	bl	8006c28 <_fstat_r>
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	dbec      	blt.n	8006b76 <__swhatbuf_r+0x12>
 8006b9c:	9901      	ldr	r1, [sp, #4]
 8006b9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006ba2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006ba6:	4259      	negs	r1, r3
 8006ba8:	4159      	adcs	r1, r3
 8006baa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006bae:	e7eb      	b.n	8006b88 <__swhatbuf_r+0x24>

08006bb0 <__smakebuf_r>:
 8006bb0:	898b      	ldrh	r3, [r1, #12]
 8006bb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bb4:	079d      	lsls	r5, r3, #30
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	460c      	mov	r4, r1
 8006bba:	d507      	bpl.n	8006bcc <__smakebuf_r+0x1c>
 8006bbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006bc0:	6023      	str	r3, [r4, #0]
 8006bc2:	6123      	str	r3, [r4, #16]
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	6163      	str	r3, [r4, #20]
 8006bc8:	b003      	add	sp, #12
 8006bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bcc:	ab01      	add	r3, sp, #4
 8006bce:	466a      	mov	r2, sp
 8006bd0:	f7ff ffc8 	bl	8006b64 <__swhatbuf_r>
 8006bd4:	9f00      	ldr	r7, [sp, #0]
 8006bd6:	4605      	mov	r5, r0
 8006bd8:	4639      	mov	r1, r7
 8006bda:	4630      	mov	r0, r6
 8006bdc:	f7ff f8b8 	bl	8005d50 <_malloc_r>
 8006be0:	b948      	cbnz	r0, 8006bf6 <__smakebuf_r+0x46>
 8006be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006be6:	059a      	lsls	r2, r3, #22
 8006be8:	d4ee      	bmi.n	8006bc8 <__smakebuf_r+0x18>
 8006bea:	f023 0303 	bic.w	r3, r3, #3
 8006bee:	f043 0302 	orr.w	r3, r3, #2
 8006bf2:	81a3      	strh	r3, [r4, #12]
 8006bf4:	e7e2      	b.n	8006bbc <__smakebuf_r+0xc>
 8006bf6:	89a3      	ldrh	r3, [r4, #12]
 8006bf8:	6020      	str	r0, [r4, #0]
 8006bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bfe:	81a3      	strh	r3, [r4, #12]
 8006c00:	9b01      	ldr	r3, [sp, #4]
 8006c02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006c06:	b15b      	cbz	r3, 8006c20 <__smakebuf_r+0x70>
 8006c08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c0c:	4630      	mov	r0, r6
 8006c0e:	f000 f81d 	bl	8006c4c <_isatty_r>
 8006c12:	b128      	cbz	r0, 8006c20 <__smakebuf_r+0x70>
 8006c14:	89a3      	ldrh	r3, [r4, #12]
 8006c16:	f023 0303 	bic.w	r3, r3, #3
 8006c1a:	f043 0301 	orr.w	r3, r3, #1
 8006c1e:	81a3      	strh	r3, [r4, #12]
 8006c20:	89a3      	ldrh	r3, [r4, #12]
 8006c22:	431d      	orrs	r5, r3
 8006c24:	81a5      	strh	r5, [r4, #12]
 8006c26:	e7cf      	b.n	8006bc8 <__smakebuf_r+0x18>

08006c28 <_fstat_r>:
 8006c28:	b538      	push	{r3, r4, r5, lr}
 8006c2a:	4d07      	ldr	r5, [pc, #28]	@ (8006c48 <_fstat_r+0x20>)
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	4604      	mov	r4, r0
 8006c30:	4608      	mov	r0, r1
 8006c32:	4611      	mov	r1, r2
 8006c34:	602b      	str	r3, [r5, #0]
 8006c36:	f7fa fd5e 	bl	80016f6 <_fstat>
 8006c3a:	1c43      	adds	r3, r0, #1
 8006c3c:	d102      	bne.n	8006c44 <_fstat_r+0x1c>
 8006c3e:	682b      	ldr	r3, [r5, #0]
 8006c40:	b103      	cbz	r3, 8006c44 <_fstat_r+0x1c>
 8006c42:	6023      	str	r3, [r4, #0]
 8006c44:	bd38      	pop	{r3, r4, r5, pc}
 8006c46:	bf00      	nop
 8006c48:	20000418 	.word	0x20000418

08006c4c <_isatty_r>:
 8006c4c:	b538      	push	{r3, r4, r5, lr}
 8006c4e:	4d06      	ldr	r5, [pc, #24]	@ (8006c68 <_isatty_r+0x1c>)
 8006c50:	2300      	movs	r3, #0
 8006c52:	4604      	mov	r4, r0
 8006c54:	4608      	mov	r0, r1
 8006c56:	602b      	str	r3, [r5, #0]
 8006c58:	f7fa fd5d 	bl	8001716 <_isatty>
 8006c5c:	1c43      	adds	r3, r0, #1
 8006c5e:	d102      	bne.n	8006c66 <_isatty_r+0x1a>
 8006c60:	682b      	ldr	r3, [r5, #0]
 8006c62:	b103      	cbz	r3, 8006c66 <_isatty_r+0x1a>
 8006c64:	6023      	str	r3, [r4, #0]
 8006c66:	bd38      	pop	{r3, r4, r5, pc}
 8006c68:	20000418 	.word	0x20000418

08006c6c <abort>:
 8006c6c:	b508      	push	{r3, lr}
 8006c6e:	2006      	movs	r0, #6
 8006c70:	f000 f82c 	bl	8006ccc <raise>
 8006c74:	2001      	movs	r0, #1
 8006c76:	f7fa fcee 	bl	8001656 <_exit>

08006c7a <_raise_r>:
 8006c7a:	291f      	cmp	r1, #31
 8006c7c:	b538      	push	{r3, r4, r5, lr}
 8006c7e:	4605      	mov	r5, r0
 8006c80:	460c      	mov	r4, r1
 8006c82:	d904      	bls.n	8006c8e <_raise_r+0x14>
 8006c84:	2316      	movs	r3, #22
 8006c86:	6003      	str	r3, [r0, #0]
 8006c88:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8c:	bd38      	pop	{r3, r4, r5, pc}
 8006c8e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006c90:	b112      	cbz	r2, 8006c98 <_raise_r+0x1e>
 8006c92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c96:	b94b      	cbnz	r3, 8006cac <_raise_r+0x32>
 8006c98:	4628      	mov	r0, r5
 8006c9a:	f000 f831 	bl	8006d00 <_getpid_r>
 8006c9e:	4622      	mov	r2, r4
 8006ca0:	4601      	mov	r1, r0
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ca8:	f000 b818 	b.w	8006cdc <_kill_r>
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d00a      	beq.n	8006cc6 <_raise_r+0x4c>
 8006cb0:	1c59      	adds	r1, r3, #1
 8006cb2:	d103      	bne.n	8006cbc <_raise_r+0x42>
 8006cb4:	2316      	movs	r3, #22
 8006cb6:	6003      	str	r3, [r0, #0]
 8006cb8:	2001      	movs	r0, #1
 8006cba:	e7e7      	b.n	8006c8c <_raise_r+0x12>
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	4798      	blx	r3
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	e7e0      	b.n	8006c8c <_raise_r+0x12>
	...

08006ccc <raise>:
 8006ccc:	4b02      	ldr	r3, [pc, #8]	@ (8006cd8 <raise+0xc>)
 8006cce:	4601      	mov	r1, r0
 8006cd0:	6818      	ldr	r0, [r3, #0]
 8006cd2:	f7ff bfd2 	b.w	8006c7a <_raise_r>
 8006cd6:	bf00      	nop
 8006cd8:	20000018 	.word	0x20000018

08006cdc <_kill_r>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	4d07      	ldr	r5, [pc, #28]	@ (8006cfc <_kill_r+0x20>)
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	4608      	mov	r0, r1
 8006ce6:	4611      	mov	r1, r2
 8006ce8:	602b      	str	r3, [r5, #0]
 8006cea:	f7fa fca4 	bl	8001636 <_kill>
 8006cee:	1c43      	adds	r3, r0, #1
 8006cf0:	d102      	bne.n	8006cf8 <_kill_r+0x1c>
 8006cf2:	682b      	ldr	r3, [r5, #0]
 8006cf4:	b103      	cbz	r3, 8006cf8 <_kill_r+0x1c>
 8006cf6:	6023      	str	r3, [r4, #0]
 8006cf8:	bd38      	pop	{r3, r4, r5, pc}
 8006cfa:	bf00      	nop
 8006cfc:	20000418 	.word	0x20000418

08006d00 <_getpid_r>:
 8006d00:	f7fa bc91 	b.w	8001626 <_getpid>

08006d04 <_init>:
 8006d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d06:	bf00      	nop
 8006d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d0a:	bc08      	pop	{r3}
 8006d0c:	469e      	mov	lr, r3
 8006d0e:	4770      	bx	lr

08006d10 <_fini>:
 8006d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d12:	bf00      	nop
 8006d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d16:	bc08      	pop	{r3}
 8006d18:	469e      	mov	lr, r3
 8006d1a:	4770      	bx	lr
