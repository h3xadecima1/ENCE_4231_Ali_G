
2025_STM32F407_ADC_SingleBattery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000daf8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  0800dc88  0800dc88  0000ec88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e104  0800e104  000101f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e104  0800e104  0000f104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e10c  0800e10c  000101f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e10c  0800e10c  0000f10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e110  0800e110  0000f110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800e114  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000101f4  2**0
                  CONTENTS
 10 .bss          00000b20  200001f4  200001f4  000101f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000d14  20000d14  000101f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001de1b  00000000  00000000  00010224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004430  00000000  00000000  0002e03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019f0  00000000  00000000  00032470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001436  00000000  00000000  00033e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002709c  00000000  00000000  00035296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021017  00000000  00000000  0005c332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3459  00000000  00000000  0007d349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001607a2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f98  00000000  00000000  001607e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00168780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dc70 	.word	0x0800dc70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800dc70 	.word	0x0800dc70

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <__io_putchar>:
void rotateMotorCW(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000edc:	1d39      	adds	r1, r7, #4
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4803      	ldr	r0, [pc, #12]	@ (8000ef4 <__io_putchar+0x20>)
 8000ee6:	f006 f909 	bl	80070fc <HAL_UART_Transmit>
  return ch;
 8000eea:	687b      	ldr	r3, [r7, #4]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200003ac 	.word	0x200003ac

08000ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efe:	f000 ffb7 	bl	8001e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f02:	f000 f855 	bl	8000fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f06:	f000 fa3f 	bl	8001388 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f0a:	f000 fa1d 	bl	8001348 <MX_DMA_Init>
  MX_I2C1_Init();
 8000f0e:	f000 f90b 	bl	8001128 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f12:	f000 f937 	bl	8001184 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000f16:	f009 fea7 	bl	800ac68 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8000f1a:	f000 f969 	bl	80011f0 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000f1e:	f000 f8b1 	bl	8001084 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000f22:	f000 f9e7 	bl	80012f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_value, 1);
 8000f26:	2201      	movs	r2, #1
 8000f28:	491a      	ldr	r1, [pc, #104]	@ (8000f94 <main+0x9c>)
 8000f2a:	481b      	ldr	r0, [pc, #108]	@ (8000f98 <main+0xa0>)
 8000f2c:	f001 f98a 	bl	8002244 <HAL_ADC_Start_DMA>
   printf("Battery monitor started (ADC1 CH1 / PA1)...\r\n");
 8000f30:	481a      	ldr	r0, [pc, #104]	@ (8000f9c <main+0xa4>)
 8000f32:	f00a ffe1 	bl	800bef8 <puts>

   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_value, 1);
 8000f36:	2201      	movs	r2, #1
 8000f38:	4916      	ldr	r1, [pc, #88]	@ (8000f94 <main+0x9c>)
 8000f3a:	4817      	ldr	r0, [pc, #92]	@ (8000f98 <main+0xa0>)
 8000f3c:	f001 f982 	bl	8002244 <HAL_ADC_Start_DMA>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f40:	2100      	movs	r1, #0
 8000f42:	4817      	ldr	r0, [pc, #92]	@ (8000fa0 <main+0xa8>)
 8000f44:	f005 fbb6 	bl	80066b4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_USB_HOST_Process();  // Keep if you're using USB
 8000f48:	f009 feb4 	bl	800acb4 <MX_USB_HOST_Process>

	  float vbat = getBatteryVoltage();
 8000f4c:	f000 fb40 	bl	80015d0 <getBatteryVoltage>
 8000f50:	ed87 0a01 	vstr	s0, [r7, #4]
	  updateMotorControl(vbat);
 8000f54:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f58:	f000 fb5e 	bl	8001618 <updateMotorControl>
	  printf("Battery Voltage: %.2f V | ADC: %lu | Mode: %d\r\n", vbat, adc_value, motor_direction);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff faf3 	bl	8000548 <__aeabi_f2d>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	490b      	ldr	r1, [pc, #44]	@ (8000f94 <main+0x9c>)
 8000f68:	6809      	ldr	r1, [r1, #0]
 8000f6a:	480e      	ldr	r0, [pc, #56]	@ (8000fa4 <main+0xac>)
 8000f6c:	7800      	ldrb	r0, [r0, #0]
 8000f6e:	b2c0      	uxtb	r0, r0
 8000f70:	9001      	str	r0, [sp, #4]
 8000f72:	9100      	str	r1, [sp, #0]
 8000f74:	480c      	ldr	r0, [pc, #48]	@ (8000fa8 <main+0xb0>)
 8000f76:	f00a ff57 	bl	800be28 <iprintf>
	  HAL_GPIO_TogglePin(GPIOD, LD3_Pin); // blink LED
 8000f7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f7e:	480b      	ldr	r0, [pc, #44]	@ (8000fac <main+0xb4>)
 8000f80:	f002 fb7d 	bl	800367e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000f84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f88:	f000 ffe4 	bl	8001f54 <HAL_Delay>
	    /* USER CODE END 3 */

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000f8c:	f009 fe92 	bl	800acb4 <MX_USB_HOST_Process>
  {
 8000f90:	bf00      	nop
 8000f92:	e7d9      	b.n	8000f48 <main+0x50>
 8000f94:	200003f4 	.word	0x200003f4
 8000f98:	20000210 	.word	0x20000210
 8000f9c:	0800dc88 	.word	0x0800dc88
 8000fa0:	20000364 	.word	0x20000364
 8000fa4:	200003f8 	.word	0x200003f8
 8000fa8:	0800dcb8 	.word	0x0800dcb8
 8000fac:	40020c00 	.word	0x40020c00

08000fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b094      	sub	sp, #80	@ 0x50
 8000fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	f107 0320 	add.w	r3, r7, #32
 8000fba:	2230      	movs	r2, #48	@ 0x30
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f00b f87a 	bl	800c0b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	4b28      	ldr	r3, [pc, #160]	@ (800107c <SystemClock_Config+0xcc>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fdc:	4a27      	ldr	r2, [pc, #156]	@ (800107c <SystemClock_Config+0xcc>)
 8000fde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe4:	4b25      	ldr	r3, [pc, #148]	@ (800107c <SystemClock_Config+0xcc>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	4b22      	ldr	r3, [pc, #136]	@ (8001080 <SystemClock_Config+0xd0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a21      	ldr	r2, [pc, #132]	@ (8001080 <SystemClock_Config+0xd0>)
 8000ffa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	4b1f      	ldr	r3, [pc, #124]	@ (8001080 <SystemClock_Config+0xd0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800100c:	2301      	movs	r3, #1
 800100e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001010:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001016:	2302      	movs	r3, #2
 8001018:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800101a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800101e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001020:	2308      	movs	r3, #8
 8001022:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001024:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001028:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800102a:	2302      	movs	r3, #2
 800102c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800102e:	2307      	movs	r3, #7
 8001030:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001032:	f107 0320 	add.w	r3, r7, #32
 8001036:	4618      	mov	r0, r3
 8001038:	f004 fdcc 	bl	8005bd4 <HAL_RCC_OscConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001042:	f000 fbdd 	bl	8001800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001046:	230f      	movs	r3, #15
 8001048:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104a:	2302      	movs	r3, #2
 800104c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001052:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001056:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001058:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800105c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	2105      	movs	r1, #5
 8001064:	4618      	mov	r0, r3
 8001066:	f005 f82d 	bl	80060c4 <HAL_RCC_ClockConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001070:	f000 fbc6 	bl	8001800 <Error_Handler>
  }
}
 8001074:	bf00      	nop
 8001076:	3750      	adds	r7, #80	@ 0x50
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40023800 	.word	0x40023800
 8001080:	40007000 	.word	0x40007000

08001084 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800108a:	463b      	mov	r3, r7
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001096:	4b21      	ldr	r3, [pc, #132]	@ (800111c <MX_ADC1_Init+0x98>)
 8001098:	4a21      	ldr	r2, [pc, #132]	@ (8001120 <MX_ADC1_Init+0x9c>)
 800109a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800109c:	4b1f      	ldr	r3, [pc, #124]	@ (800111c <MX_ADC1_Init+0x98>)
 800109e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010a4:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_ADC1_Init+0x98>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010aa:	4b1c      	ldr	r3, [pc, #112]	@ (800111c <MX_ADC1_Init+0x98>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010b0:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <MX_ADC1_Init+0x98>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b6:	4b19      	ldr	r3, [pc, #100]	@ (800111c <MX_ADC1_Init+0x98>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010be:	4b17      	ldr	r3, [pc, #92]	@ (800111c <MX_ADC1_Init+0x98>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c4:	4b15      	ldr	r3, [pc, #84]	@ (800111c <MX_ADC1_Init+0x98>)
 80010c6:	4a17      	ldr	r2, [pc, #92]	@ (8001124 <MX_ADC1_Init+0xa0>)
 80010c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ca:	4b14      	ldr	r3, [pc, #80]	@ (800111c <MX_ADC1_Init+0x98>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010d0:	4b12      	ldr	r3, [pc, #72]	@ (800111c <MX_ADC1_Init+0x98>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010d6:	4b11      	ldr	r3, [pc, #68]	@ (800111c <MX_ADC1_Init+0x98>)
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <MX_ADC1_Init+0x98>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e4:	480d      	ldr	r0, [pc, #52]	@ (800111c <MX_ADC1_Init+0x98>)
 80010e6:	f000 ff59 	bl	8001f9c <HAL_ADC_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010f0:	f000 fb86 	bl	8001800 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010f8:	2301      	movs	r3, #1
 80010fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80010fc:	2307      	movs	r3, #7
 80010fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001100:	463b      	mov	r3, r7
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	@ (800111c <MX_ADC1_Init+0x98>)
 8001106:	f001 f9d9 	bl	80024bc <HAL_ADC_ConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001110:	f000 fb76 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000210 	.word	0x20000210
 8001120:	40012000 	.word	0x40012000
 8001124:	0f000001 	.word	0x0f000001

08001128 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800112c:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <MX_I2C1_Init+0x50>)
 800112e:	4a13      	ldr	r2, [pc, #76]	@ (800117c <MX_I2C1_Init+0x54>)
 8001130:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001132:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <MX_I2C1_Init+0x50>)
 8001134:	4a12      	ldr	r2, [pc, #72]	@ (8001180 <MX_I2C1_Init+0x58>)
 8001136:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001138:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <MX_I2C1_Init+0x50>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <MX_I2C1_Init+0x50>)
 8001140:	2200      	movs	r2, #0
 8001142:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001144:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <MX_I2C1_Init+0x50>)
 8001146:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800114a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800114c:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <MX_I2C1_Init+0x50>)
 800114e:	2200      	movs	r2, #0
 8001150:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001152:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <MX_I2C1_Init+0x50>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001158:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <MX_I2C1_Init+0x50>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800115e:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <MX_I2C1_Init+0x50>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001164:	4804      	ldr	r0, [pc, #16]	@ (8001178 <MX_I2C1_Init+0x50>)
 8001166:	f004 fbf1 	bl	800594c <HAL_I2C_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001170:	f000 fb46 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200002b8 	.word	0x200002b8
 800117c:	40005400 	.word	0x40005400
 8001180:	000186a0 	.word	0x000186a0

08001184 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001188:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <MX_SPI1_Init+0x64>)
 800118a:	4a18      	ldr	r2, [pc, #96]	@ (80011ec <MX_SPI1_Init+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800118e:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <MX_SPI1_Init+0x64>)
 8001190:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001194:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001196:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <MX_SPI1_Init+0x64>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800119c:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <MX_SPI1_Init+0x64>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011a2:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011b6:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011be:	2200      	movs	r2, #0
 80011c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011c2:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011c8:	4b07      	ldr	r3, [pc, #28]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011ce:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011d0:	220a      	movs	r2, #10
 80011d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011d6:	f005 f995 	bl	8006504 <HAL_SPI_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011e0:	f000 fb0e 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2000030c 	.word	0x2000030c
 80011ec:	40013000 	.word	0x40013000

080011f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b092      	sub	sp, #72	@ 0x48
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001200:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
 8001210:	615a      	str	r2, [r3, #20]
 8001212:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2220      	movs	r2, #32
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f00a ff4c 	bl	800c0b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001220:	4b32      	ldr	r3, [pc, #200]	@ (80012ec <MX_TIM1_Init+0xfc>)
 8001222:	4a33      	ldr	r2, [pc, #204]	@ (80012f0 <MX_TIM1_Init+0x100>)
 8001224:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001226:	4b31      	ldr	r3, [pc, #196]	@ (80012ec <MX_TIM1_Init+0xfc>)
 8001228:	2253      	movs	r2, #83	@ 0x53
 800122a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122c:	4b2f      	ldr	r3, [pc, #188]	@ (80012ec <MX_TIM1_Init+0xfc>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8001232:	4b2e      	ldr	r3, [pc, #184]	@ (80012ec <MX_TIM1_Init+0xfc>)
 8001234:	2264      	movs	r2, #100	@ 0x64
 8001236:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001238:	4b2c      	ldr	r3, [pc, #176]	@ (80012ec <MX_TIM1_Init+0xfc>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800123e:	4b2b      	ldr	r3, [pc, #172]	@ (80012ec <MX_TIM1_Init+0xfc>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001244:	4b29      	ldr	r3, [pc, #164]	@ (80012ec <MX_TIM1_Init+0xfc>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800124a:	4828      	ldr	r0, [pc, #160]	@ (80012ec <MX_TIM1_Init+0xfc>)
 800124c:	f005 f9e3 	bl	8006616 <HAL_TIM_PWM_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001256:	f000 fad3 	bl	8001800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001262:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001266:	4619      	mov	r1, r3
 8001268:	4820      	ldr	r0, [pc, #128]	@ (80012ec <MX_TIM1_Init+0xfc>)
 800126a:	f005 fe29 	bl	8006ec0 <HAL_TIMEx_MasterConfigSynchronization>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001274:	f000 fac4 	bl	8001800 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001278:	2360      	movs	r3, #96	@ 0x60
 800127a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001284:	2300      	movs	r3, #0
 8001286:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001298:	2200      	movs	r2, #0
 800129a:	4619      	mov	r1, r3
 800129c:	4813      	ldr	r0, [pc, #76]	@ (80012ec <MX_TIM1_Init+0xfc>)
 800129e:	f005 fad1 	bl	8006844 <HAL_TIM_PWM_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80012a8:	f000 faaa 	bl	8001800 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	4619      	mov	r1, r3
 80012ce:	4807      	ldr	r0, [pc, #28]	@ (80012ec <MX_TIM1_Init+0xfc>)
 80012d0:	f005 fe72 	bl	8006fb8 <HAL_TIMEx_ConfigBreakDeadTime>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80012da:	f000 fa91 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012de:	4803      	ldr	r0, [pc, #12]	@ (80012ec <MX_TIM1_Init+0xfc>)
 80012e0:	f000 fbee 	bl	8001ac0 <HAL_TIM_MspPostInit>

}
 80012e4:	bf00      	nop
 80012e6:	3748      	adds	r7, #72	@ 0x48
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000364 	.word	0x20000364
 80012f0:	40010000 	.word	0x40010000

080012f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f8:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	@ (8001344 <MX_USART2_UART_Init+0x50>)
 80012fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 8001300:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001304:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001312:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001318:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 800131a:	220c      	movs	r2, #12
 800131c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131e:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800132a:	4805      	ldr	r0, [pc, #20]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 800132c:	f005 fe96 	bl	800705c <HAL_UART_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001336:	f000 fa63 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200003ac 	.word	0x200003ac
 8001344:	40004400 	.word	0x40004400

08001348 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	4b0c      	ldr	r3, [pc, #48]	@ (8001384 <MX_DMA_Init+0x3c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	4a0b      	ldr	r2, [pc, #44]	@ (8001384 <MX_DMA_Init+0x3c>)
 8001358:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800135c:	6313      	str	r3, [r2, #48]	@ 0x30
 800135e:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <MX_DMA_Init+0x3c>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2100      	movs	r1, #0
 800136e:	2038      	movs	r0, #56	@ 0x38
 8001370:	f001 fc29 	bl	8002bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001374:	2038      	movs	r0, #56	@ 0x38
 8001376:	f001 fc42 	bl	8002bfe <HAL_NVIC_EnableIRQ>

}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800

08001388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	@ 0x30
 800138c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
 80013a2:	4b7e      	ldr	r3, [pc, #504]	@ (800159c <MX_GPIO_Init+0x214>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a7d      	ldr	r2, [pc, #500]	@ (800159c <MX_GPIO_Init+0x214>)
 80013a8:	f043 0310 	orr.w	r3, r3, #16
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b7b      	ldr	r3, [pc, #492]	@ (800159c <MX_GPIO_Init+0x214>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0310 	and.w	r3, r3, #16
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	4b77      	ldr	r3, [pc, #476]	@ (800159c <MX_GPIO_Init+0x214>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a76      	ldr	r2, [pc, #472]	@ (800159c <MX_GPIO_Init+0x214>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b74      	ldr	r3, [pc, #464]	@ (800159c <MX_GPIO_Init+0x214>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b70      	ldr	r3, [pc, #448]	@ (800159c <MX_GPIO_Init+0x214>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a6f      	ldr	r2, [pc, #444]	@ (800159c <MX_GPIO_Init+0x214>)
 80013e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b6d      	ldr	r3, [pc, #436]	@ (800159c <MX_GPIO_Init+0x214>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b69      	ldr	r3, [pc, #420]	@ (800159c <MX_GPIO_Init+0x214>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a68      	ldr	r2, [pc, #416]	@ (800159c <MX_GPIO_Init+0x214>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b66      	ldr	r3, [pc, #408]	@ (800159c <MX_GPIO_Init+0x214>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	4b62      	ldr	r3, [pc, #392]	@ (800159c <MX_GPIO_Init+0x214>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	4a61      	ldr	r2, [pc, #388]	@ (800159c <MX_GPIO_Init+0x214>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6313      	str	r3, [r2, #48]	@ 0x30
 800141e:	4b5f      	ldr	r3, [pc, #380]	@ (800159c <MX_GPIO_Init+0x214>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b5b      	ldr	r3, [pc, #364]	@ (800159c <MX_GPIO_Init+0x214>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a5a      	ldr	r2, [pc, #360]	@ (800159c <MX_GPIO_Init+0x214>)
 8001434:	f043 0308 	orr.w	r3, r3, #8
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b58      	ldr	r3, [pc, #352]	@ (800159c <MX_GPIO_Init+0x214>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	2108      	movs	r1, #8
 800144a:	4855      	ldr	r0, [pc, #340]	@ (80015a0 <MX_GPIO_Init+0x218>)
 800144c:	f002 f8fe 	bl	800364c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001450:	2201      	movs	r2, #1
 8001452:	2101      	movs	r1, #1
 8001454:	4853      	ldr	r0, [pc, #332]	@ (80015a4 <MX_GPIO_Init+0x21c>)
 8001456:	f002 f8f9 	bl	800364c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800145a:	2200      	movs	r2, #0
 800145c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001460:	4851      	ldr	r0, [pc, #324]	@ (80015a8 <MX_GPIO_Init+0x220>)
 8001462:	f002 f8f3 	bl	800364c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001466:	2308      	movs	r3, #8
 8001468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146a:	2301      	movs	r3, #1
 800146c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	4619      	mov	r1, r3
 800147c:	4848      	ldr	r0, [pc, #288]	@ (80015a0 <MX_GPIO_Init+0x218>)
 800147e:	f001 ff49 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001482:	2301      	movs	r3, #1
 8001484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001486:	2301      	movs	r3, #1
 8001488:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148e:	2300      	movs	r3, #0
 8001490:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 031c 	add.w	r3, r7, #28
 8001496:	4619      	mov	r1, r3
 8001498:	4842      	ldr	r0, [pc, #264]	@ (80015a4 <MX_GPIO_Init+0x21c>)
 800149a:	f001 ff3b 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800149e:	2308      	movs	r3, #8
 80014a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014ae:	2305      	movs	r3, #5
 80014b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80014b2:	f107 031c 	add.w	r3, r7, #28
 80014b6:	4619      	mov	r1, r3
 80014b8:	483a      	ldr	r0, [pc, #232]	@ (80015a4 <MX_GPIO_Init+0x21c>)
 80014ba:	f001 ff2b 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014be:	2301      	movs	r3, #1
 80014c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014cc:	f107 031c 	add.w	r3, r7, #28
 80014d0:	4619      	mov	r1, r3
 80014d2:	4836      	ldr	r0, [pc, #216]	@ (80015ac <MX_GPIO_Init+0x224>)
 80014d4:	f001 ff1e 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80014d8:	2304      	movs	r3, #4
 80014da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	4619      	mov	r1, r3
 80014ea:	4831      	ldr	r0, [pc, #196]	@ (80015b0 <MX_GPIO_Init+0x228>)
 80014ec:	f001 ff12 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80014f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001502:	2305      	movs	r3, #5
 8001504:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	4619      	mov	r1, r3
 800150c:	4828      	ldr	r0, [pc, #160]	@ (80015b0 <MX_GPIO_Init+0x228>)
 800150e:	f001 ff01 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001512:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001516:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001518:	2301      	movs	r3, #1
 800151a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	2300      	movs	r3, #0
 8001522:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001524:	f107 031c 	add.w	r3, r7, #28
 8001528:	4619      	mov	r1, r3
 800152a:	481f      	ldr	r0, [pc, #124]	@ (80015a8 <MX_GPIO_Init+0x220>)
 800152c:	f001 fef2 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001530:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001542:	2306      	movs	r3, #6
 8001544:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	4619      	mov	r1, r3
 800154c:	4815      	ldr	r0, [pc, #84]	@ (80015a4 <MX_GPIO_Init+0x21c>)
 800154e:	f001 fee1 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001552:	2320      	movs	r3, #32
 8001554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	4619      	mov	r1, r3
 8001564:	4810      	ldr	r0, [pc, #64]	@ (80015a8 <MX_GPIO_Init+0x220>)
 8001566:	f001 fed5 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800156a:	2302      	movs	r3, #2
 800156c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800156e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001572:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001578:	f107 031c 	add.w	r3, r7, #28
 800157c:	4619      	mov	r1, r3
 800157e:	4808      	ldr	r0, [pc, #32]	@ (80015a0 <MX_GPIO_Init+0x218>)
 8001580:	f001 fec8 	bl	8003314 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001584:	2200      	movs	r2, #0
 8001586:	2100      	movs	r1, #0
 8001588:	2006      	movs	r0, #6
 800158a:	f001 fb1c 	bl	8002bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800158e:	2006      	movs	r0, #6
 8001590:	f001 fb35 	bl	8002bfe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001594:	bf00      	nop
 8001596:	3730      	adds	r7, #48	@ 0x30
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40023800 	.word	0x40023800
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40020800 	.word	0x40020800
 80015a8:	40020c00 	.word	0x40020c00
 80015ac:	40020000 	.word	0x40020000
 80015b0:	40020400 	.word	0x40020400

080015b4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)  // PA0
 80015be:	88fb      	ldrh	r3, [r7, #6]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <HAL_GPIO_EXTI_Callback+0x14>
    {
        handleButtonClick();
 80015c4:	f000 f886 	bl	80016d4 <handleButtonClick>
    }
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <getBatteryVoltage>:
float getBatteryVoltage(void) {
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
  float voltage = (3.3f * adc_value) / 4095.0f;
 80015d6:	4b0d      	ldr	r3, [pc, #52]	@ (800160c <getBatteryVoltage+0x3c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	ee07 3a90 	vmov	s15, r3
 80015de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015e2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001610 <getBatteryVoltage+0x40>
 80015e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015ea:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001614 <getBatteryVoltage+0x44>
 80015ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015f2:	edc7 7a01 	vstr	s15, [r7, #4]
  return voltage * 2.0f;
 80015f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80015fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
}
 80015fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	200003f4 	.word	0x200003f4
 8001610:	40533333 	.word	0x40533333
 8001614:	457ff000 	.word	0x457ff000

08001618 <updateMotorControl>:

void updateMotorControl(float battery_voltage) {
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	ed87 0a01 	vstr	s0, [r7, #4]
  if (battery_voltage < 6.5f) {
 8001622:	edd7 7a01 	vldr	s15, [r7, #4]
 8001626:	eeb1 7a0a 	vmov.f32	s14, #26	@ 0x40d00000  6.5
 800162a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800162e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001632:	d503      	bpl.n	800163c <updateMotorControl+0x24>
    motor_direction = 0;
 8001634:	4b23      	ldr	r3, [pc, #140]	@ (80016c4 <updateMotorControl+0xac>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	e010      	b.n	800165e <updateMotorControl+0x46>
  } else if (battery_voltage > 7.0f && motor_direction == 0) {
 800163c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001640:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8001644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164c:	dd07      	ble.n	800165e <updateMotorControl+0x46>
 800164e:	4b1d      	ldr	r3, [pc, #116]	@ (80016c4 <updateMotorControl+0xac>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d102      	bne.n	800165e <updateMotorControl+0x46>
    motor_direction = 1;
 8001658:	4b1a      	ldr	r3, [pc, #104]	@ (80016c4 <updateMotorControl+0xac>)
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]
  }

  uint32_t pwm_duty = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]

  if (battery_voltage >= 6.5f && battery_voltage <= 7.0f) {
 8001662:	edd7 7a01 	vldr	s15, [r7, #4]
 8001666:	eeb1 7a0a 	vmov.f32	s14, #26	@ 0x40d00000  6.5
 800166a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800166e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001672:	db15      	blt.n	80016a0 <updateMotorControl+0x88>
 8001674:	edd7 7a01 	vldr	s15, [r7, #4]
 8001678:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 800167c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001684:	d80c      	bhi.n	80016a0 <updateMotorControl+0x88>
    pwm_duty = (adc_value * 100) / 4095;
 8001686:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <updateMotorControl+0xb0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2264      	movs	r2, #100	@ 0x64
 800168c:	fb03 f202 	mul.w	r2, r3, r2
 8001690:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <updateMotorControl+0xb4>)
 8001692:	fba3 1302 	umull	r1, r3, r3, r2
 8001696:	1ad2      	subs	r2, r2, r3
 8001698:	0852      	lsrs	r2, r2, #1
 800169a:	4413      	add	r3, r2
 800169c:	0adb      	lsrs	r3, r3, #11
 800169e:	60fb      	str	r3, [r7, #12]
  }

  if (motor_direction == 0) pwm_duty = 0;
 80016a0:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <updateMotorControl+0xac>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <updateMotorControl+0x96>
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_duty);
 80016ae:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <updateMotorControl+0xb8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	200003f8 	.word	0x200003f8
 80016c8:	200003f4 	.word	0x200003f4
 80016cc:	00100101 	.word	0x00100101
 80016d0:	20000364 	.word	0x20000364

080016d4 <handleButtonClick>:

void handleButtonClick(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
    static uint32_t last_click_time = 0;
    static uint8_t click_count = 0;

    uint32_t current_time = HAL_GetTick();
 80016da:	f000 fc2f 	bl	8001f3c <HAL_GetTick>
 80016de:	6078      	str	r0, [r7, #4]

    if ((current_time - last_click_time) > 400) {
 80016e0:	4b20      	ldr	r3, [pc, #128]	@ (8001764 <handleButtonClick+0x90>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80016ec:	d902      	bls.n	80016f4 <handleButtonClick+0x20>
        click_count = 0;
 80016ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001768 <handleButtonClick+0x94>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
    }

    click_count++;
 80016f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001768 <handleButtonClick+0x94>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	3301      	adds	r3, #1
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <handleButtonClick+0x94>)
 80016fe:	701a      	strb	r2, [r3, #0]
    last_click_time = current_time;
 8001700:	4a18      	ldr	r2, [pc, #96]	@ (8001764 <handleButtonClick+0x90>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6013      	str	r3, [r2, #0]

    HAL_Delay(50); // optional debounce
 8001706:	2032      	movs	r0, #50	@ 0x32
 8001708:	f000 fc24 	bl	8001f54 <HAL_Delay>
    HAL_Delay(450); // wait for possible additional clicks
 800170c:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8001710:	f000 fc20 	bl	8001f54 <HAL_Delay>

    switch (click_count) {
 8001714:	4b14      	ldr	r3, [pc, #80]	@ (8001768 <handleButtonClick+0x94>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b03      	cmp	r3, #3
 800171a:	d012      	beq.n	8001742 <handleButtonClick+0x6e>
 800171c:	2b03      	cmp	r3, #3
 800171e:	dc16      	bgt.n	800174e <handleButtonClick+0x7a>
 8001720:	2b01      	cmp	r3, #1
 8001722:	d002      	beq.n	800172a <handleButtonClick+0x56>
 8001724:	2b02      	cmp	r3, #2
 8001726:	d006      	beq.n	8001736 <handleButtonClick+0x62>
 8001728:	e011      	b.n	800174e <handleButtonClick+0x7a>
        case 1:
            stopMotors();
 800172a:	f000 f827 	bl	800177c <stopMotors>
            printf("Button: 1 click → Motor STOP\r\n");
 800172e:	480f      	ldr	r0, [pc, #60]	@ (800176c <handleButtonClick+0x98>)
 8001730:	f00a fbe2 	bl	800bef8 <puts>
            break;
 8001734:	e012      	b.n	800175c <handleButtonClick+0x88>
        case 2:
            rotateMotorCCW();
 8001736:	f000 f82f 	bl	8001798 <rotateMotorCCW>
            printf("Button: 2 clicks → Motor CCW\r\n");
 800173a:	480d      	ldr	r0, [pc, #52]	@ (8001770 <handleButtonClick+0x9c>)
 800173c:	f00a fbdc 	bl	800bef8 <puts>
            break;
 8001740:	e00c      	b.n	800175c <handleButtonClick+0x88>
        case 3:
            rotateMotorCW();
 8001742:	f000 f843 	bl	80017cc <rotateMotorCW>
            printf("Button: 3 clicks → Motor CW\r\n");
 8001746:	480b      	ldr	r0, [pc, #44]	@ (8001774 <handleButtonClick+0xa0>)
 8001748:	f00a fbd6 	bl	800bef8 <puts>
            break;
 800174c:	e006      	b.n	800175c <handleButtonClick+0x88>
        default:
            printf("Button: %d clicks (ignored)\r\n", click_count);
 800174e:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <handleButtonClick+0x94>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	4619      	mov	r1, r3
 8001754:	4808      	ldr	r0, [pc, #32]	@ (8001778 <handleButtonClick+0xa4>)
 8001756:	f00a fb67 	bl	800be28 <iprintf>
            break;
 800175a:	bf00      	nop
    }
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200003fc 	.word	0x200003fc
 8001768:	20000400 	.word	0x20000400
 800176c:	0800dce8 	.word	0x0800dce8
 8001770:	0800dd08 	.word	0x0800dd08
 8001774:	0800dd28 	.word	0x0800dd28
 8001778:	0800dd48 	.word	0x0800dd48

0800177c <stopMotors>:


void stopMotors() {
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);  // PWM = 0
 8001780:	4b04      	ldr	r3, [pc, #16]	@ (8001794 <stopMotors+0x18>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2200      	movs	r2, #0
 8001786:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20000364 	.word	0x20000364

08001798 <rotateMotorCCW>:

void rotateMotorCCW() {
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
    uint32_t pwm_value = __HAL_TIM_GET_AUTORELOAD(&htim1) / 2;
 800179e:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <rotateMotorCCW+0x2c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a4:	085b      	lsrs	r3, r3, #1
 80017a6:	607b      	str	r3, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_value);
 80017a8:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <rotateMotorCCW+0x2c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // Example: CCW direction
 80017b0:	2200      	movs	r2, #0
 80017b2:	2101      	movs	r1, #1
 80017b4:	4804      	ldr	r0, [pc, #16]	@ (80017c8 <rotateMotorCCW+0x30>)
 80017b6:	f001 ff49 	bl	800364c <HAL_GPIO_WritePin>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000364 	.word	0x20000364
 80017c8:	40020400 	.word	0x40020400

080017cc <rotateMotorCW>:

void rotateMotorCW() {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
    uint32_t pwm_value = __HAL_TIM_GET_AUTORELOAD(&htim1) / 2;
 80017d2:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <rotateMotorCW+0x2c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d8:	085b      	lsrs	r3, r3, #1
 80017da:	607b      	str	r3, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_value);
 80017dc:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <rotateMotorCW+0x2c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // Example: CW direction
 80017e4:	2201      	movs	r2, #1
 80017e6:	2101      	movs	r1, #1
 80017e8:	4804      	ldr	r0, [pc, #16]	@ (80017fc <rotateMotorCW+0x30>)
 80017ea:	f001 ff2f 	bl	800364c <HAL_GPIO_WritePin>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000364 	.word	0x20000364
 80017fc:	40020400 	.word	0x40020400

08001800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001804:	b672      	cpsid	i
}
 8001806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <Error_Handler+0x8>

0800180c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <HAL_MspInit+0x4c>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181a:	4a0f      	ldr	r2, [pc, #60]	@ (8001858 <HAL_MspInit+0x4c>)
 800181c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001820:	6453      	str	r3, [r2, #68]	@ 0x44
 8001822:	4b0d      	ldr	r3, [pc, #52]	@ (8001858 <HAL_MspInit+0x4c>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <HAL_MspInit+0x4c>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	4a08      	ldr	r2, [pc, #32]	@ (8001858 <HAL_MspInit+0x4c>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800183c:	6413      	str	r3, [r2, #64]	@ 0x40
 800183e:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <HAL_MspInit+0x4c>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800184a:	2007      	movs	r0, #7
 800184c:	f001 f9b0 	bl	8002bb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40023800 	.word	0x40023800

0800185c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	@ 0x28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a33      	ldr	r2, [pc, #204]	@ (8001948 <HAL_ADC_MspInit+0xec>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d15f      	bne.n	800193e <HAL_ADC_MspInit+0xe2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	4b32      	ldr	r3, [pc, #200]	@ (800194c <HAL_ADC_MspInit+0xf0>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001886:	4a31      	ldr	r2, [pc, #196]	@ (800194c <HAL_ADC_MspInit+0xf0>)
 8001888:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800188c:	6453      	str	r3, [r2, #68]	@ 0x44
 800188e:	4b2f      	ldr	r3, [pc, #188]	@ (800194c <HAL_ADC_MspInit+0xf0>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b2b      	ldr	r3, [pc, #172]	@ (800194c <HAL_ADC_MspInit+0xf0>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	4a2a      	ldr	r2, [pc, #168]	@ (800194c <HAL_ADC_MspInit+0xf0>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018aa:	4b28      	ldr	r3, [pc, #160]	@ (800194c <HAL_ADC_MspInit+0xf0>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80018b6:	2312      	movs	r3, #18
 80018b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ba:	2303      	movs	r3, #3
 80018bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4619      	mov	r1, r3
 80018c8:	4821      	ldr	r0, [pc, #132]	@ (8001950 <HAL_ADC_MspInit+0xf4>)
 80018ca:	f001 fd23 	bl	8003314 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80018ce:	4b21      	ldr	r3, [pc, #132]	@ (8001954 <HAL_ADC_MspInit+0xf8>)
 80018d0:	4a21      	ldr	r2, [pc, #132]	@ (8001958 <HAL_ADC_MspInit+0xfc>)
 80018d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80018d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001954 <HAL_ADC_MspInit+0xf8>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018da:	4b1e      	ldr	r3, [pc, #120]	@ (8001954 <HAL_ADC_MspInit+0xf8>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001954 <HAL_ADC_MspInit+0xf8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001954 <HAL_ADC_MspInit+0xf8>)
 80018e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018ee:	4b19      	ldr	r3, [pc, #100]	@ (8001954 <HAL_ADC_MspInit+0xf8>)
 80018f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018f6:	4b17      	ldr	r3, [pc, #92]	@ (8001954 <HAL_ADC_MspInit+0xf8>)
 80018f8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018fe:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <HAL_ADC_MspInit+0xf8>)
 8001900:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001904:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001906:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <HAL_ADC_MspInit+0xf8>)
 8001908:	2200      	movs	r2, #0
 800190a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <HAL_ADC_MspInit+0xf8>)
 800190e:	2200      	movs	r2, #0
 8001910:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001912:	4810      	ldr	r0, [pc, #64]	@ (8001954 <HAL_ADC_MspInit+0xf8>)
 8001914:	f001 f98e 	bl	8002c34 <HAL_DMA_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800191e:	f7ff ff6f 	bl	8001800 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a0b      	ldr	r2, [pc, #44]	@ (8001954 <HAL_ADC_MspInit+0xf8>)
 8001926:	639a      	str	r2, [r3, #56]	@ 0x38
 8001928:	4a0a      	ldr	r2, [pc, #40]	@ (8001954 <HAL_ADC_MspInit+0xf8>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	2100      	movs	r1, #0
 8001932:	2012      	movs	r0, #18
 8001934:	f001 f947 	bl	8002bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001938:	2012      	movs	r0, #18
 800193a:	f001 f960 	bl	8002bfe <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800193e:	bf00      	nop
 8001940:	3728      	adds	r7, #40	@ 0x28
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40012000 	.word	0x40012000
 800194c:	40023800 	.word	0x40023800
 8001950:	40020000 	.word	0x40020000
 8001954:	20000258 	.word	0x20000258
 8001958:	40026410 	.word	0x40026410

0800195c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	@ 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a19      	ldr	r2, [pc, #100]	@ (80019e0 <HAL_I2C_MspInit+0x84>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d12c      	bne.n	80019d8 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	4b18      	ldr	r3, [pc, #96]	@ (80019e4 <HAL_I2C_MspInit+0x88>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	4a17      	ldr	r2, [pc, #92]	@ (80019e4 <HAL_I2C_MspInit+0x88>)
 8001988:	f043 0302 	orr.w	r3, r3, #2
 800198c:	6313      	str	r3, [r2, #48]	@ 0x30
 800198e:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <HAL_I2C_MspInit+0x88>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800199a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800199e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a0:	2312      	movs	r3, #18
 80019a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019a4:	2301      	movs	r3, #1
 80019a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019ac:	2304      	movs	r3, #4
 80019ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	4619      	mov	r1, r3
 80019b6:	480c      	ldr	r0, [pc, #48]	@ (80019e8 <HAL_I2C_MspInit+0x8c>)
 80019b8:	f001 fcac 	bl	8003314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	4b08      	ldr	r3, [pc, #32]	@ (80019e4 <HAL_I2C_MspInit+0x88>)
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	4a07      	ldr	r2, [pc, #28]	@ (80019e4 <HAL_I2C_MspInit+0x88>)
 80019c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80019cc:	4b05      	ldr	r3, [pc, #20]	@ (80019e4 <HAL_I2C_MspInit+0x88>)
 80019ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80019d8:	bf00      	nop
 80019da:	3728      	adds	r7, #40	@ 0x28
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40005400 	.word	0x40005400
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40020400 	.word	0x40020400

080019ec <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	@ 0x28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a19      	ldr	r2, [pc, #100]	@ (8001a70 <HAL_SPI_MspInit+0x84>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d12b      	bne.n	8001a66 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	4b18      	ldr	r3, [pc, #96]	@ (8001a74 <HAL_SPI_MspInit+0x88>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a16:	4a17      	ldr	r2, [pc, #92]	@ (8001a74 <HAL_SPI_MspInit+0x88>)
 8001a18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a1e:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <HAL_SPI_MspInit+0x88>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <HAL_SPI_MspInit+0x88>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	4a10      	ldr	r2, [pc, #64]	@ (8001a74 <HAL_SPI_MspInit+0x88>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a74 <HAL_SPI_MspInit+0x88>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001a46:	23e0      	movs	r3, #224	@ 0xe0
 8001a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a56:	2305      	movs	r3, #5
 8001a58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4805      	ldr	r0, [pc, #20]	@ (8001a78 <HAL_SPI_MspInit+0x8c>)
 8001a62:	f001 fc57 	bl	8003314 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001a66:	bf00      	nop
 8001a68:	3728      	adds	r7, #40	@ 0x28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40013000 	.word	0x40013000
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40020000 	.word	0x40020000

08001a7c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0b      	ldr	r2, [pc, #44]	@ (8001ab8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d10d      	bne.n	8001aaa <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b0a      	ldr	r3, [pc, #40]	@ (8001abc <HAL_TIM_PWM_MspInit+0x40>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a96:	4a09      	ldr	r2, [pc, #36]	@ (8001abc <HAL_TIM_PWM_MspInit+0x40>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a9e:	4b07      	ldr	r3, [pc, #28]	@ (8001abc <HAL_TIM_PWM_MspInit+0x40>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40010000 	.word	0x40010000
 8001abc:	40023800 	.word	0x40023800

08001ac0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a12      	ldr	r2, [pc, #72]	@ (8001b28 <HAL_TIM_MspPostInit+0x68>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d11e      	bne.n	8001b20 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <HAL_TIM_MspPostInit+0x6c>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	4a10      	ldr	r2, [pc, #64]	@ (8001b2c <HAL_TIM_MspPostInit+0x6c>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b2c <HAL_TIM_MspPostInit+0x6c>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001afe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b10:	2301      	movs	r3, #1
 8001b12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	f107 030c 	add.w	r3, r7, #12
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4805      	ldr	r0, [pc, #20]	@ (8001b30 <HAL_TIM_MspPostInit+0x70>)
 8001b1c:	f001 fbfa 	bl	8003314 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b20:	bf00      	nop
 8001b22:	3720      	adds	r7, #32
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40010000 	.word	0x40010000
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40020000 	.word	0x40020000

08001b34 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	@ 0x28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a19      	ldr	r2, [pc, #100]	@ (8001bb8 <HAL_UART_MspInit+0x84>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d12b      	bne.n	8001bae <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	4b18      	ldr	r3, [pc, #96]	@ (8001bbc <HAL_UART_MspInit+0x88>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5e:	4a17      	ldr	r2, [pc, #92]	@ (8001bbc <HAL_UART_MspInit+0x88>)
 8001b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b66:	4b15      	ldr	r3, [pc, #84]	@ (8001bbc <HAL_UART_MspInit+0x88>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <HAL_UART_MspInit+0x88>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	4a10      	ldr	r2, [pc, #64]	@ (8001bbc <HAL_UART_MspInit+0x88>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <HAL_UART_MspInit+0x88>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b8e:	230c      	movs	r3, #12
 8001b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba2:	f107 0314 	add.w	r3, r7, #20
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4805      	ldr	r0, [pc, #20]	@ (8001bc0 <HAL_UART_MspInit+0x8c>)
 8001baa:	f001 fbb3 	bl	8003314 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001bae:	bf00      	nop
 8001bb0:	3728      	adds	r7, #40	@ 0x28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40004400 	.word	0x40004400
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40020000 	.word	0x40020000

08001bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <NMI_Handler+0x4>

08001bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <HardFault_Handler+0x4>

08001bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <MemManage_Handler+0x4>

08001bdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <BusFault_Handler+0x4>

08001be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <UsageFault_Handler+0x4>

08001bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c1a:	f000 f97b 	bl	8001f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001c26:	2001      	movs	r0, #1
 8001c28:	f001 fd44 	bl	80036b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c34:	4802      	ldr	r0, [pc, #8]	@ (8001c40 <ADC_IRQHandler+0x10>)
 8001c36:	f000 f9f4 	bl	8002022 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000210 	.word	0x20000210

08001c44 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c48:	4802      	ldr	r0, [pc, #8]	@ (8001c54 <DMA2_Stream0_IRQHandler+0x10>)
 8001c4a:	f001 f8f9 	bl	8002e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000258 	.word	0x20000258

08001c58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001c5c:	4802      	ldr	r0, [pc, #8]	@ (8001c68 <OTG_FS_IRQHandler+0x10>)
 8001c5e:	f002 f821 	bl	8003ca4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200007e8 	.word	0x200007e8

08001c6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return 1;
 8001c70:	2301      	movs	r3, #1
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <_kill>:

int _kill(int pid, int sig)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c86:	f00a fa79 	bl	800c17c <__errno>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2216      	movs	r2, #22
 8001c8e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <_exit>:

void _exit (int status)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff ffe7 	bl	8001c7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cae:	bf00      	nop
 8001cb0:	e7fd      	b.n	8001cae <_exit+0x12>

08001cb2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b086      	sub	sp, #24
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	e00a      	b.n	8001cda <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cc4:	f3af 8000 	nop.w
 8001cc8:	4601      	mov	r1, r0
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	60ba      	str	r2, [r7, #8]
 8001cd0:	b2ca      	uxtb	r2, r1
 8001cd2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	dbf0      	blt.n	8001cc4 <_read+0x12>
  }

  return len;
 8001ce2:	687b      	ldr	r3, [r7, #4]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	e009      	b.n	8001d12 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	60ba      	str	r2, [r7, #8]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff f8e4 	bl	8000ed4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	dbf1      	blt.n	8001cfe <_write+0x12>
  }
  return len;
 8001d1a:	687b      	ldr	r3, [r7, #4]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <_close>:

int _close(int file)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d4c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <_isatty>:

int _isatty(int file)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d64:	2301      	movs	r3, #1
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b085      	sub	sp, #20
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	60f8      	str	r0, [r7, #12]
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d94:	4a14      	ldr	r2, [pc, #80]	@ (8001de8 <_sbrk+0x5c>)
 8001d96:	4b15      	ldr	r3, [pc, #84]	@ (8001dec <_sbrk+0x60>)
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da0:	4b13      	ldr	r3, [pc, #76]	@ (8001df0 <_sbrk+0x64>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d102      	bne.n	8001dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da8:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <_sbrk+0x64>)
 8001daa:	4a12      	ldr	r2, [pc, #72]	@ (8001df4 <_sbrk+0x68>)
 8001dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dae:	4b10      	ldr	r3, [pc, #64]	@ (8001df0 <_sbrk+0x64>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d207      	bcs.n	8001dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dbc:	f00a f9de 	bl	800c17c <__errno>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	220c      	movs	r2, #12
 8001dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dca:	e009      	b.n	8001de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dcc:	4b08      	ldr	r3, [pc, #32]	@ (8001df0 <_sbrk+0x64>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dd2:	4b07      	ldr	r3, [pc, #28]	@ (8001df0 <_sbrk+0x64>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	4a05      	ldr	r2, [pc, #20]	@ (8001df0 <_sbrk+0x64>)
 8001ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dde:	68fb      	ldr	r3, [r7, #12]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20020000 	.word	0x20020000
 8001dec:	00000400 	.word	0x00000400
 8001df0:	20000404 	.word	0x20000404
 8001df4:	20000d18 	.word	0x20000d18

08001df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dfc:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <SystemInit+0x20>)
 8001dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e02:	4a05      	ldr	r2, [pc, #20]	@ (8001e18 <SystemInit+0x20>)
 8001e04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e20:	f7ff ffea 	bl	8001df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e24:	480c      	ldr	r0, [pc, #48]	@ (8001e58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e26:	490d      	ldr	r1, [pc, #52]	@ (8001e5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e28:	4a0d      	ldr	r2, [pc, #52]	@ (8001e60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e2c:	e002      	b.n	8001e34 <LoopCopyDataInit>

08001e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e32:	3304      	adds	r3, #4

08001e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e38:	d3f9      	bcc.n	8001e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e3c:	4c0a      	ldr	r4, [pc, #40]	@ (8001e68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e40:	e001      	b.n	8001e46 <LoopFillZerobss>

08001e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e44:	3204      	adds	r2, #4

08001e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e48:	d3fb      	bcc.n	8001e42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e4a:	f00a f99d 	bl	800c188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e4e:	f7ff f853 	bl	8000ef8 <main>
  bx  lr    
 8001e52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e5c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001e60:	0800e114 	.word	0x0800e114
  ldr r2, =_sbss
 8001e64:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001e68:	20000d14 	.word	0x20000d14

08001e6c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e6c:	e7fe      	b.n	8001e6c <CAN1_RX0_IRQHandler>
	...

08001e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e74:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <HAL_Init+0x40>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb0 <HAL_Init+0x40>)
 8001e7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e80:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb0 <HAL_Init+0x40>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb0 <HAL_Init+0x40>)
 8001e86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e8c:	4b08      	ldr	r3, [pc, #32]	@ (8001eb0 <HAL_Init+0x40>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a07      	ldr	r2, [pc, #28]	@ (8001eb0 <HAL_Init+0x40>)
 8001e92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f000 fe89 	bl	8002bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f000 f808 	bl	8001eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea4:	f7ff fcb2 	bl	800180c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023c00 	.word	0x40023c00

08001eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ebc:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <HAL_InitTick+0x54>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b12      	ldr	r3, [pc, #72]	@ (8001f0c <HAL_InitTick+0x58>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 fea1 	bl	8002c1a <HAL_SYSTICK_Config>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00e      	b.n	8001f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b0f      	cmp	r3, #15
 8001ee6:	d80a      	bhi.n	8001efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef0:	f000 fe69 	bl	8002bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef4:	4a06      	ldr	r2, [pc, #24]	@ (8001f10 <HAL_InitTick+0x5c>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e000      	b.n	8001f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	20000008 	.word	0x20000008
 8001f10:	20000004 	.word	0x20000004

08001f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f18:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <HAL_IncTick+0x20>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b06      	ldr	r3, [pc, #24]	@ (8001f38 <HAL_IncTick+0x24>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	4a04      	ldr	r2, [pc, #16]	@ (8001f38 <HAL_IncTick+0x24>)
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000008 	.word	0x20000008
 8001f38:	20000408 	.word	0x20000408

08001f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f40:	4b03      	ldr	r3, [pc, #12]	@ (8001f50 <HAL_GetTick+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20000408 	.word	0x20000408

08001f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f5c:	f7ff ffee 	bl	8001f3c <HAL_GetTick>
 8001f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6c:	d005      	beq.n	8001f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <HAL_Delay+0x44>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4413      	add	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f7a:	bf00      	nop
 8001f7c:	f7ff ffde 	bl	8001f3c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d8f7      	bhi.n	8001f7c <HAL_Delay+0x28>
  {
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000008 	.word	0x20000008

08001f9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e033      	b.n	800201a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d109      	bne.n	8001fce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff fc4e 	bl	800185c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d118      	bne.n	800200c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001fe2:	f023 0302 	bic.w	r3, r3, #2
 8001fe6:	f043 0202 	orr.w	r2, r3, #2
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 fb86 	bl	8002700 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	f023 0303 	bic.w	r3, r3, #3
 8002002:	f043 0201 	orr.w	r2, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	641a      	str	r2, [r3, #64]	@ 0x40
 800200a:	e001      	b.n	8002010 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002018:	7bfb      	ldrb	r3, [r7, #15]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	f003 0320 	and.w	r3, r3, #32
 8002050:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d049      	beq.n	80020ec <HAL_ADC_IRQHandler+0xca>
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d046      	beq.n	80020ec <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	2b00      	cmp	r3, #0
 8002068:	d105      	bne.n	8002076 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d12b      	bne.n	80020dc <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002088:	2b00      	cmp	r3, #0
 800208a:	d127      	bne.n	80020dc <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002092:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002096:	2b00      	cmp	r3, #0
 8002098:	d006      	beq.n	80020a8 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d119      	bne.n	80020dc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0220 	bic.w	r2, r2, #32
 80020b6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d105      	bne.n	80020dc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d4:	f043 0201 	orr.w	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f9c5 	bl	800246c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f06f 0212 	mvn.w	r2, #18
 80020ea:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020fa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d057      	beq.n	80021b2 <HAL_ADC_IRQHandler+0x190>
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d054      	beq.n	80021b2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	2b00      	cmp	r3, #0
 8002112:	d105      	bne.n	8002120 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002118:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d139      	bne.n	80021a2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002134:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002138:	2b00      	cmp	r3, #0
 800213a:	d006      	beq.n	800214a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002146:	2b00      	cmp	r3, #0
 8002148:	d12b      	bne.n	80021a2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002154:	2b00      	cmp	r3, #0
 8002156:	d124      	bne.n	80021a2 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002162:	2b00      	cmp	r3, #0
 8002164:	d11d      	bne.n	80021a2 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800216a:	2b00      	cmp	r3, #0
 800216c:	d119      	bne.n	80021a2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800217c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002192:	2b00      	cmp	r3, #0
 8002194:	d105      	bne.n	80021a2 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	f043 0201 	orr.w	r2, r3, #1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 fc2a 	bl	80029fc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 020c 	mvn.w	r2, #12
 80021b0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d017      	beq.n	80021f8 <HAL_ADC_IRQHandler+0x1d6>
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d014      	beq.n	80021f8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d10d      	bne.n	80021f8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f953 	bl	8002494 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f06f 0201 	mvn.w	r2, #1
 80021f6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002206:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d015      	beq.n	800223a <HAL_ADC_IRQHandler+0x218>
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d012      	beq.n	800223a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002218:	f043 0202 	orr.w	r2, r3, #2
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f06f 0220 	mvn.w	r2, #32
 8002228:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f93c 	bl	80024a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 0220 	mvn.w	r2, #32
 8002238:	601a      	str	r2, [r3, #0]
  }
}
 800223a:	bf00      	nop
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_ADC_Start_DMA+0x22>
 8002262:	2302      	movs	r3, #2
 8002264:	e0eb      	b.n	800243e <HAL_ADC_Start_DMA+0x1fa>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b01      	cmp	r3, #1
 800227a:	d018      	beq.n	80022ae <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0201 	orr.w	r2, r2, #1
 800228a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800228c:	4b6e      	ldr	r3, [pc, #440]	@ (8002448 <HAL_ADC_Start_DMA+0x204>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a6e      	ldr	r2, [pc, #440]	@ (800244c <HAL_ADC_Start_DMA+0x208>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	0c9a      	lsrs	r2, r3, #18
 8002298:	4613      	mov	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4413      	add	r3, r2
 800229e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80022a0:	e002      	b.n	80022a8 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f9      	bne.n	80022a2 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022bc:	d107      	bne.n	80022ce <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022cc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b01      	cmp	r3, #1
 80022da:	f040 80a3 	bne.w	8002424 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002308:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002314:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800231c:	d106      	bne.n	800232c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	f023 0206 	bic.w	r2, r3, #6
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	645a      	str	r2, [r3, #68]	@ 0x44
 800232a:	e002      	b.n	8002332 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800233a:	4b45      	ldr	r3, [pc, #276]	@ (8002450 <HAL_ADC_Start_DMA+0x20c>)
 800233c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002342:	4a44      	ldr	r2, [pc, #272]	@ (8002454 <HAL_ADC_Start_DMA+0x210>)
 8002344:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800234a:	4a43      	ldr	r2, [pc, #268]	@ (8002458 <HAL_ADC_Start_DMA+0x214>)
 800234c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002352:	4a42      	ldr	r2, [pc, #264]	@ (800245c <HAL_ADC_Start_DMA+0x218>)
 8002354:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800235e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800236e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800237e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	334c      	adds	r3, #76	@ 0x4c
 800238a:	4619      	mov	r1, r3
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f000 fcfe 	bl	8002d90 <HAL_DMA_Start_IT>
 8002394:	4603      	mov	r3, r0
 8002396:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 031f 	and.w	r3, r3, #31
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d12a      	bne.n	80023fa <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002460 <HAL_ADC_Start_DMA+0x21c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d015      	beq.n	80023da <HAL_ADC_Start_DMA+0x196>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a2c      	ldr	r2, [pc, #176]	@ (8002464 <HAL_ADC_Start_DMA+0x220>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d105      	bne.n	80023c4 <HAL_ADC_Start_DMA+0x180>
 80023b8:	4b25      	ldr	r3, [pc, #148]	@ (8002450 <HAL_ADC_Start_DMA+0x20c>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 031f 	and.w	r3, r3, #31
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00a      	beq.n	80023da <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a27      	ldr	r2, [pc, #156]	@ (8002468 <HAL_ADC_Start_DMA+0x224>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d136      	bne.n	800243c <HAL_ADC_Start_DMA+0x1f8>
 80023ce:	4b20      	ldr	r3, [pc, #128]	@ (8002450 <HAL_ADC_Start_DMA+0x20c>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d130      	bne.n	800243c <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d129      	bne.n	800243c <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	e020      	b.n	800243c <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a18      	ldr	r2, [pc, #96]	@ (8002460 <HAL_ADC_Start_DMA+0x21c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d11b      	bne.n	800243c <HAL_ADC_Start_DMA+0x1f8>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d114      	bne.n	800243c <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002420:	609a      	str	r2, [r3, #8]
 8002422:	e00b      	b.n	800243c <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002428:	f043 0210 	orr.w	r2, r3, #16
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800243c:	7ffb      	ldrb	r3, [r7, #31]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3720      	adds	r7, #32
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000000 	.word	0x20000000
 800244c:	431bde83 	.word	0x431bde83
 8002450:	40012300 	.word	0x40012300
 8002454:	080028f9 	.word	0x080028f9
 8002458:	080029b3 	.word	0x080029b3
 800245c:	080029cf 	.word	0x080029cf
 8002460:	40012000 	.word	0x40012000
 8002464:	40012100 	.word	0x40012100
 8002468:	40012200 	.word	0x40012200

0800246c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x1c>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e105      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x228>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b09      	cmp	r3, #9
 80024e6:	d925      	bls.n	8002534 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68d9      	ldr	r1, [r3, #12]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	4613      	mov	r3, r2
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	4413      	add	r3, r2
 80024fc:	3b1e      	subs	r3, #30
 80024fe:	2207      	movs	r2, #7
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43da      	mvns	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	400a      	ands	r2, r1
 800250c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68d9      	ldr	r1, [r3, #12]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	b29b      	uxth	r3, r3
 800251e:	4618      	mov	r0, r3
 8002520:	4603      	mov	r3, r0
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4403      	add	r3, r0
 8002526:	3b1e      	subs	r3, #30
 8002528:	409a      	lsls	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	e022      	b.n	800257a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6919      	ldr	r1, [r3, #16]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	4613      	mov	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	4413      	add	r3, r2
 8002548:	2207      	movs	r2, #7
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43da      	mvns	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	400a      	ands	r2, r1
 8002556:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6919      	ldr	r1, [r3, #16]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	b29b      	uxth	r3, r3
 8002568:	4618      	mov	r0, r3
 800256a:	4603      	mov	r3, r0
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4403      	add	r3, r0
 8002570:	409a      	lsls	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b06      	cmp	r3, #6
 8002580:	d824      	bhi.n	80025cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	3b05      	subs	r3, #5
 8002594:	221f      	movs	r2, #31
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43da      	mvns	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	400a      	ands	r2, r1
 80025a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	4618      	mov	r0, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	3b05      	subs	r3, #5
 80025be:	fa00 f203 	lsl.w	r2, r0, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80025ca:	e04c      	b.n	8002666 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b0c      	cmp	r3, #12
 80025d2:	d824      	bhi.n	800261e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	3b23      	subs	r3, #35	@ 0x23
 80025e6:	221f      	movs	r2, #31
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43da      	mvns	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	400a      	ands	r2, r1
 80025f4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	b29b      	uxth	r3, r3
 8002602:	4618      	mov	r0, r3
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	3b23      	subs	r3, #35	@ 0x23
 8002610:	fa00 f203 	lsl.w	r2, r0, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	631a      	str	r2, [r3, #48]	@ 0x30
 800261c:	e023      	b.n	8002666 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	3b41      	subs	r3, #65	@ 0x41
 8002630:	221f      	movs	r2, #31
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43da      	mvns	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	400a      	ands	r2, r1
 800263e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	4618      	mov	r0, r3
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	3b41      	subs	r3, #65	@ 0x41
 800265a:	fa00 f203 	lsl.w	r2, r0, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002666:	4b22      	ldr	r3, [pc, #136]	@ (80026f0 <HAL_ADC_ConfigChannel+0x234>)
 8002668:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a21      	ldr	r2, [pc, #132]	@ (80026f4 <HAL_ADC_ConfigChannel+0x238>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d109      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x1cc>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b12      	cmp	r3, #18
 800267a:	d105      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a19      	ldr	r2, [pc, #100]	@ (80026f4 <HAL_ADC_ConfigChannel+0x238>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d123      	bne.n	80026da <HAL_ADC_ConfigChannel+0x21e>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b10      	cmp	r3, #16
 8002698:	d003      	beq.n	80026a2 <HAL_ADC_ConfigChannel+0x1e6>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b11      	cmp	r3, #17
 80026a0:	d11b      	bne.n	80026da <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b10      	cmp	r3, #16
 80026b4:	d111      	bne.n	80026da <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026b6:	4b10      	ldr	r3, [pc, #64]	@ (80026f8 <HAL_ADC_ConfigChannel+0x23c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a10      	ldr	r2, [pc, #64]	@ (80026fc <HAL_ADC_ConfigChannel+0x240>)
 80026bc:	fba2 2303 	umull	r2, r3, r2, r3
 80026c0:	0c9a      	lsrs	r2, r3, #18
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026cc:	e002      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f9      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	40012300 	.word	0x40012300
 80026f4:	40012000 	.word	0x40012000
 80026f8:	20000000 	.word	0x20000000
 80026fc:	431bde83 	.word	0x431bde83

08002700 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002708:	4b79      	ldr	r3, [pc, #484]	@ (80028f0 <ADC_Init+0x1f0>)
 800270a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	431a      	orrs	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002734:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6859      	ldr	r1, [r3, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	021a      	lsls	r2, r3, #8
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002758:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6859      	ldr	r1, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800277a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6899      	ldr	r1, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002792:	4a58      	ldr	r2, [pc, #352]	@ (80028f4 <ADC_Init+0x1f4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d022      	beq.n	80027de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6899      	ldr	r1, [r3, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6899      	ldr	r1, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	e00f      	b.n	80027fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027fc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0202 	bic.w	r2, r2, #2
 800280c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6899      	ldr	r1, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	7e1b      	ldrb	r3, [r3, #24]
 8002818:	005a      	lsls	r2, r3, #1
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01b      	beq.n	8002864 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800283a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800284a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6859      	ldr	r1, [r3, #4]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002856:	3b01      	subs	r3, #1
 8002858:	035a      	lsls	r2, r3, #13
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	e007      	b.n	8002874 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002872:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002882:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	3b01      	subs	r3, #1
 8002890:	051a      	lsls	r2, r3, #20
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6899      	ldr	r1, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028b6:	025a      	lsls	r2, r3, #9
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6899      	ldr	r1, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	029a      	lsls	r2, r3, #10
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	609a      	str	r2, [r3, #8]
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	40012300 	.word	0x40012300
 80028f4:	0f000001 	.word	0x0f000001

080028f8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002904:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800290e:	2b00      	cmp	r3, #0
 8002910:	d13c      	bne.n	800298c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d12b      	bne.n	8002984 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002930:	2b00      	cmp	r3, #0
 8002932:	d127      	bne.n	8002984 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800293e:	2b00      	cmp	r3, #0
 8002940:	d006      	beq.n	8002950 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800294c:	2b00      	cmp	r3, #0
 800294e:	d119      	bne.n	8002984 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0220 	bic.w	r2, r2, #32
 800295e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002964:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002970:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d105      	bne.n	8002984 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297c:	f043 0201 	orr.w	r2, r3, #1
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f7ff fd71 	bl	800246c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800298a:	e00e      	b.n	80029aa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002990:	f003 0310 	and.w	r3, r3, #16
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f7ff fd85 	bl	80024a8 <HAL_ADC_ErrorCallback>
}
 800299e:	e004      	b.n	80029aa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	4798      	blx	r3
}
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029be:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f7ff fd5d 	bl	8002480 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b084      	sub	sp, #16
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029da:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2240      	movs	r2, #64	@ 0x40
 80029e0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e6:	f043 0204 	orr.w	r2, r3, #4
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f7ff fd5a 	bl	80024a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029f4:	bf00      	nop
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a20:	4b0c      	ldr	r3, [pc, #48]	@ (8002a54 <__NVIC_SetPriorityGrouping+0x44>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a42:	4a04      	ldr	r2, [pc, #16]	@ (8002a54 <__NVIC_SetPriorityGrouping+0x44>)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	60d3      	str	r3, [r2, #12]
}
 8002a48:	bf00      	nop
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a5c:	4b04      	ldr	r3, [pc, #16]	@ (8002a70 <__NVIC_GetPriorityGrouping+0x18>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	0a1b      	lsrs	r3, r3, #8
 8002a62:	f003 0307 	and.w	r3, r3, #7
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	db0b      	blt.n	8002a9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	f003 021f 	and.w	r2, r3, #31
 8002a8c:	4907      	ldr	r1, [pc, #28]	@ (8002aac <__NVIC_EnableIRQ+0x38>)
 8002a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	2001      	movs	r0, #1
 8002a96:	fa00 f202 	lsl.w	r2, r0, r2
 8002a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	e000e100 	.word	0xe000e100

08002ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	6039      	str	r1, [r7, #0]
 8002aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	db0a      	blt.n	8002ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	490c      	ldr	r1, [pc, #48]	@ (8002afc <__NVIC_SetPriority+0x4c>)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	0112      	lsls	r2, r2, #4
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ad8:	e00a      	b.n	8002af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	4908      	ldr	r1, [pc, #32]	@ (8002b00 <__NVIC_SetPriority+0x50>)
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	3b04      	subs	r3, #4
 8002ae8:	0112      	lsls	r2, r2, #4
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	440b      	add	r3, r1
 8002aee:	761a      	strb	r2, [r3, #24]
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000e100 	.word	0xe000e100
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b089      	sub	sp, #36	@ 0x24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f1c3 0307 	rsb	r3, r3, #7
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	bf28      	it	cs
 8002b22:	2304      	movcs	r3, #4
 8002b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	2b06      	cmp	r3, #6
 8002b2c:	d902      	bls.n	8002b34 <NVIC_EncodePriority+0x30>
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3b03      	subs	r3, #3
 8002b32:	e000      	b.n	8002b36 <NVIC_EncodePriority+0x32>
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b38:	f04f 32ff 	mov.w	r2, #4294967295
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43da      	mvns	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	401a      	ands	r2, r3
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	fa01 f303 	lsl.w	r3, r1, r3
 8002b56:	43d9      	mvns	r1, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b5c:	4313      	orrs	r3, r2
         );
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3724      	adds	r7, #36	@ 0x24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
	...

08002b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b7c:	d301      	bcc.n	8002b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e00f      	b.n	8002ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b82:	4a0a      	ldr	r2, [pc, #40]	@ (8002bac <SysTick_Config+0x40>)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b8a:	210f      	movs	r1, #15
 8002b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b90:	f7ff ff8e 	bl	8002ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b94:	4b05      	ldr	r3, [pc, #20]	@ (8002bac <SysTick_Config+0x40>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b9a:	4b04      	ldr	r3, [pc, #16]	@ (8002bac <SysTick_Config+0x40>)
 8002b9c:	2207      	movs	r2, #7
 8002b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	e000e010 	.word	0xe000e010

08002bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff ff29 	bl	8002a10 <__NVIC_SetPriorityGrouping>
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b086      	sub	sp, #24
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	4603      	mov	r3, r0
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	607a      	str	r2, [r7, #4]
 8002bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bd8:	f7ff ff3e 	bl	8002a58 <__NVIC_GetPriorityGrouping>
 8002bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	6978      	ldr	r0, [r7, #20]
 8002be4:	f7ff ff8e 	bl	8002b04 <NVIC_EncodePriority>
 8002be8:	4602      	mov	r2, r0
 8002bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bee:	4611      	mov	r1, r2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff5d 	bl	8002ab0 <__NVIC_SetPriority>
}
 8002bf6:	bf00      	nop
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	4603      	mov	r3, r0
 8002c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff31 	bl	8002a74 <__NVIC_EnableIRQ>
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff ffa2 	bl	8002b6c <SysTick_Config>
 8002c28:	4603      	mov	r3, r0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c40:	f7ff f97c 	bl	8001f3c <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e099      	b.n	8002d84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0201 	bic.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c70:	e00f      	b.n	8002c92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c72:	f7ff f963 	bl	8001f3c <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b05      	cmp	r3, #5
 8002c7e:	d908      	bls.n	8002c92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2220      	movs	r2, #32
 8002c84:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2203      	movs	r2, #3
 8002c8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e078      	b.n	8002d84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e8      	bne.n	8002c72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	4b38      	ldr	r3, [pc, #224]	@ (8002d8c <HAL_DMA_Init+0x158>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d107      	bne.n	8002cfc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f023 0307 	bic.w	r3, r3, #7
 8002d12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d117      	bne.n	8002d56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00e      	beq.n	8002d56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 fa6f 	bl	800321c <DMA_CheckFifoParam>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d008      	beq.n	8002d56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2240      	movs	r2, #64	@ 0x40
 8002d48:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002d52:	2301      	movs	r3, #1
 8002d54:	e016      	b.n	8002d84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fa26 	bl	80031b0 <DMA_CalcBaseAndBitshift>
 8002d64:	4603      	mov	r3, r0
 8002d66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6c:	223f      	movs	r2, #63	@ 0x3f
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	f010803f 	.word	0xf010803f

08002d90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_DMA_Start_IT+0x26>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e040      	b.n	8002e38 <HAL_DMA_Start_IT+0xa8>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d12f      	bne.n	8002e2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2202      	movs	r2, #2
 8002dce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	68b9      	ldr	r1, [r7, #8]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f9b8 	bl	8003154 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de8:	223f      	movs	r2, #63	@ 0x3f
 8002dea:	409a      	lsls	r2, r3
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0216 	orr.w	r2, r2, #22
 8002dfe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d007      	beq.n	8002e18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0208 	orr.w	r2, r2, #8
 8002e16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	e005      	b.n	8002e36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e32:	2302      	movs	r3, #2
 8002e34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e4c:	4b8e      	ldr	r3, [pc, #568]	@ (8003088 <HAL_DMA_IRQHandler+0x248>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a8e      	ldr	r2, [pc, #568]	@ (800308c <HAL_DMA_IRQHandler+0x24c>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	0a9b      	lsrs	r3, r3, #10
 8002e58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6a:	2208      	movs	r2, #8
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d01a      	beq.n	8002eac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d013      	beq.n	8002eac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0204 	bic.w	r2, r2, #4
 8002e92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e98:	2208      	movs	r2, #8
 8002e9a:	409a      	lsls	r2, r3
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea4:	f043 0201 	orr.w	r2, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	409a      	lsls	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d012      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00b      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ece:	2201      	movs	r2, #1
 8002ed0:	409a      	lsls	r2, r3
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eda:	f043 0202 	orr.w	r2, r3, #2
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee6:	2204      	movs	r2, #4
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d012      	beq.n	8002f18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00b      	beq.n	8002f18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f04:	2204      	movs	r2, #4
 8002f06:	409a      	lsls	r2, r3
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f10:	f043 0204 	orr.w	r2, r3, #4
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1c:	2210      	movs	r2, #16
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d043      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d03c      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3a:	2210      	movs	r2, #16
 8002f3c:	409a      	lsls	r2, r3
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d018      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d108      	bne.n	8002f70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d024      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	4798      	blx	r3
 8002f6e:	e01f      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d01b      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	4798      	blx	r3
 8002f80:	e016      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d107      	bne.n	8002fa0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0208 	bic.w	r2, r2, #8
 8002f9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 808f 	beq.w	80030e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 8087 	beq.w	80030e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	409a      	lsls	r2, r3
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b05      	cmp	r3, #5
 8002fe8:	d136      	bne.n	8003058 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0216 	bic.w	r2, r2, #22
 8002ff8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695a      	ldr	r2, [r3, #20]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003008:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d103      	bne.n	800301a <HAL_DMA_IRQHandler+0x1da>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003016:	2b00      	cmp	r3, #0
 8003018:	d007      	beq.n	800302a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0208 	bic.w	r2, r2, #8
 8003028:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302e:	223f      	movs	r2, #63	@ 0x3f
 8003030:	409a      	lsls	r2, r3
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800304a:	2b00      	cmp	r3, #0
 800304c:	d07e      	beq.n	800314c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	4798      	blx	r3
        }
        return;
 8003056:	e079      	b.n	800314c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d01d      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10d      	bne.n	8003090 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003078:	2b00      	cmp	r3, #0
 800307a:	d031      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	4798      	blx	r3
 8003084:	e02c      	b.n	80030e0 <HAL_DMA_IRQHandler+0x2a0>
 8003086:	bf00      	nop
 8003088:	20000000 	.word	0x20000000
 800308c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003094:	2b00      	cmp	r3, #0
 8003096:	d023      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	4798      	blx	r3
 80030a0:	e01e      	b.n	80030e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10f      	bne.n	80030d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0210 	bic.w	r2, r2, #16
 80030be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d032      	beq.n	800314e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d022      	beq.n	800313a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2205      	movs	r2, #5
 80030f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0201 	bic.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	3301      	adds	r3, #1
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	429a      	cmp	r2, r3
 8003116:	d307      	bcc.n	8003128 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f2      	bne.n	800310c <HAL_DMA_IRQHandler+0x2cc>
 8003126:	e000      	b.n	800312a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003128:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800313e:	2b00      	cmp	r3, #0
 8003140:	d005      	beq.n	800314e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	4798      	blx	r3
 800314a:	e000      	b.n	800314e <HAL_DMA_IRQHandler+0x30e>
        return;
 800314c:	bf00      	nop
    }
  }
}
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003170:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b40      	cmp	r3, #64	@ 0x40
 8003180:	d108      	bne.n	8003194 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003192:	e007      	b.n	80031a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	60da      	str	r2, [r3, #12]
}
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	3b10      	subs	r3, #16
 80031c0:	4a14      	ldr	r2, [pc, #80]	@ (8003214 <DMA_CalcBaseAndBitshift+0x64>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	091b      	lsrs	r3, r3, #4
 80031c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031ca:	4a13      	ldr	r2, [pc, #76]	@ (8003218 <DMA_CalcBaseAndBitshift+0x68>)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4413      	add	r3, r2
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d909      	bls.n	80031f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80031e6:	f023 0303 	bic.w	r3, r3, #3
 80031ea:	1d1a      	adds	r2, r3, #4
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80031f0:	e007      	b.n	8003202 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80031fa:	f023 0303 	bic.w	r3, r3, #3
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003206:	4618      	mov	r0, r3
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	aaaaaaab 	.word	0xaaaaaaab
 8003218:	0800dd84 	.word	0x0800dd84

0800321c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d11f      	bne.n	8003276 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2b03      	cmp	r3, #3
 800323a:	d856      	bhi.n	80032ea <DMA_CheckFifoParam+0xce>
 800323c:	a201      	add	r2, pc, #4	@ (adr r2, 8003244 <DMA_CheckFifoParam+0x28>)
 800323e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003242:	bf00      	nop
 8003244:	08003255 	.word	0x08003255
 8003248:	08003267 	.word	0x08003267
 800324c:	08003255 	.word	0x08003255
 8003250:	080032eb 	.word	0x080032eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003258:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d046      	beq.n	80032ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003264:	e043      	b.n	80032ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800326e:	d140      	bne.n	80032f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003274:	e03d      	b.n	80032f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800327e:	d121      	bne.n	80032c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b03      	cmp	r3, #3
 8003284:	d837      	bhi.n	80032f6 <DMA_CheckFifoParam+0xda>
 8003286:	a201      	add	r2, pc, #4	@ (adr r2, 800328c <DMA_CheckFifoParam+0x70>)
 8003288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328c:	0800329d 	.word	0x0800329d
 8003290:	080032a3 	.word	0x080032a3
 8003294:	0800329d 	.word	0x0800329d
 8003298:	080032b5 	.word	0x080032b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
      break;
 80032a0:	e030      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d025      	beq.n	80032fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032b2:	e022      	b.n	80032fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032bc:	d11f      	bne.n	80032fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032c2:	e01c      	b.n	80032fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d903      	bls.n	80032d2 <DMA_CheckFifoParam+0xb6>
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d003      	beq.n	80032d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032d0:	e018      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	73fb      	strb	r3, [r7, #15]
      break;
 80032d6:	e015      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00e      	beq.n	8003302 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	73fb      	strb	r3, [r7, #15]
      break;
 80032e8:	e00b      	b.n	8003302 <DMA_CheckFifoParam+0xe6>
      break;
 80032ea:	bf00      	nop
 80032ec:	e00a      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
      break;
 80032ee:	bf00      	nop
 80032f0:	e008      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
      break;
 80032f2:	bf00      	nop
 80032f4:	e006      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
      break;
 80032f6:	bf00      	nop
 80032f8:	e004      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
      break;
 80032fa:	bf00      	nop
 80032fc:	e002      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
      break;   
 80032fe:	bf00      	nop
 8003300:	e000      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
      break;
 8003302:	bf00      	nop
    }
  } 
  
  return status; 
 8003304:	7bfb      	ldrb	r3, [r7, #15]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop

08003314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003314:	b480      	push	{r7}
 8003316:	b089      	sub	sp, #36	@ 0x24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003322:	2300      	movs	r3, #0
 8003324:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003326:	2300      	movs	r3, #0
 8003328:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800332a:	2300      	movs	r3, #0
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	e16b      	b.n	8003608 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003330:	2201      	movs	r2, #1
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	4013      	ands	r3, r2
 8003342:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	429a      	cmp	r2, r3
 800334a:	f040 815a 	bne.w	8003602 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b01      	cmp	r3, #1
 8003358:	d005      	beq.n	8003366 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003362:	2b02      	cmp	r3, #2
 8003364:	d130      	bne.n	80033c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	2203      	movs	r2, #3
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	43db      	mvns	r3, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4013      	ands	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800339c:	2201      	movs	r2, #1
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4013      	ands	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	091b      	lsrs	r3, r3, #4
 80033b2:	f003 0201 	and.w	r2, r3, #1
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	2b03      	cmp	r3, #3
 80033d2:	d017      	beq.n	8003404 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	2203      	movs	r2, #3
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	43db      	mvns	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 0303 	and.w	r3, r3, #3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d123      	bne.n	8003458 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	08da      	lsrs	r2, r3, #3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3208      	adds	r2, #8
 8003418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	220f      	movs	r2, #15
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	08da      	lsrs	r2, r3, #3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3208      	adds	r2, #8
 8003452:	69b9      	ldr	r1, [r7, #24]
 8003454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	2203      	movs	r2, #3
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4013      	ands	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 0203 	and.w	r2, r3, #3
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 80b4 	beq.w	8003602 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	4b60      	ldr	r3, [pc, #384]	@ (8003620 <HAL_GPIO_Init+0x30c>)
 80034a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a2:	4a5f      	ldr	r2, [pc, #380]	@ (8003620 <HAL_GPIO_Init+0x30c>)
 80034a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80034aa:	4b5d      	ldr	r3, [pc, #372]	@ (8003620 <HAL_GPIO_Init+0x30c>)
 80034ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034b6:	4a5b      	ldr	r2, [pc, #364]	@ (8003624 <HAL_GPIO_Init+0x310>)
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	089b      	lsrs	r3, r3, #2
 80034bc:	3302      	adds	r3, #2
 80034be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	220f      	movs	r2, #15
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	43db      	mvns	r3, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4013      	ands	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a52      	ldr	r2, [pc, #328]	@ (8003628 <HAL_GPIO_Init+0x314>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d02b      	beq.n	800353a <HAL_GPIO_Init+0x226>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a51      	ldr	r2, [pc, #324]	@ (800362c <HAL_GPIO_Init+0x318>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d025      	beq.n	8003536 <HAL_GPIO_Init+0x222>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a50      	ldr	r2, [pc, #320]	@ (8003630 <HAL_GPIO_Init+0x31c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d01f      	beq.n	8003532 <HAL_GPIO_Init+0x21e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a4f      	ldr	r2, [pc, #316]	@ (8003634 <HAL_GPIO_Init+0x320>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d019      	beq.n	800352e <HAL_GPIO_Init+0x21a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a4e      	ldr	r2, [pc, #312]	@ (8003638 <HAL_GPIO_Init+0x324>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d013      	beq.n	800352a <HAL_GPIO_Init+0x216>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a4d      	ldr	r2, [pc, #308]	@ (800363c <HAL_GPIO_Init+0x328>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d00d      	beq.n	8003526 <HAL_GPIO_Init+0x212>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a4c      	ldr	r2, [pc, #304]	@ (8003640 <HAL_GPIO_Init+0x32c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d007      	beq.n	8003522 <HAL_GPIO_Init+0x20e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a4b      	ldr	r2, [pc, #300]	@ (8003644 <HAL_GPIO_Init+0x330>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d101      	bne.n	800351e <HAL_GPIO_Init+0x20a>
 800351a:	2307      	movs	r3, #7
 800351c:	e00e      	b.n	800353c <HAL_GPIO_Init+0x228>
 800351e:	2308      	movs	r3, #8
 8003520:	e00c      	b.n	800353c <HAL_GPIO_Init+0x228>
 8003522:	2306      	movs	r3, #6
 8003524:	e00a      	b.n	800353c <HAL_GPIO_Init+0x228>
 8003526:	2305      	movs	r3, #5
 8003528:	e008      	b.n	800353c <HAL_GPIO_Init+0x228>
 800352a:	2304      	movs	r3, #4
 800352c:	e006      	b.n	800353c <HAL_GPIO_Init+0x228>
 800352e:	2303      	movs	r3, #3
 8003530:	e004      	b.n	800353c <HAL_GPIO_Init+0x228>
 8003532:	2302      	movs	r3, #2
 8003534:	e002      	b.n	800353c <HAL_GPIO_Init+0x228>
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <HAL_GPIO_Init+0x228>
 800353a:	2300      	movs	r3, #0
 800353c:	69fa      	ldr	r2, [r7, #28]
 800353e:	f002 0203 	and.w	r2, r2, #3
 8003542:	0092      	lsls	r2, r2, #2
 8003544:	4093      	lsls	r3, r2
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4313      	orrs	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800354c:	4935      	ldr	r1, [pc, #212]	@ (8003624 <HAL_GPIO_Init+0x310>)
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	089b      	lsrs	r3, r3, #2
 8003552:	3302      	adds	r3, #2
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800355a:	4b3b      	ldr	r3, [pc, #236]	@ (8003648 <HAL_GPIO_Init+0x334>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	43db      	mvns	r3, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4013      	ands	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800357e:	4a32      	ldr	r2, [pc, #200]	@ (8003648 <HAL_GPIO_Init+0x334>)
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003584:	4b30      	ldr	r3, [pc, #192]	@ (8003648 <HAL_GPIO_Init+0x334>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	43db      	mvns	r3, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4013      	ands	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035a8:	4a27      	ldr	r2, [pc, #156]	@ (8003648 <HAL_GPIO_Init+0x334>)
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035ae:	4b26      	ldr	r3, [pc, #152]	@ (8003648 <HAL_GPIO_Init+0x334>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	43db      	mvns	r3, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4013      	ands	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003648 <HAL_GPIO_Init+0x334>)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003648 <HAL_GPIO_Init+0x334>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	43db      	mvns	r3, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4013      	ands	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035fc:	4a12      	ldr	r2, [pc, #72]	@ (8003648 <HAL_GPIO_Init+0x334>)
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3301      	adds	r3, #1
 8003606:	61fb      	str	r3, [r7, #28]
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	2b0f      	cmp	r3, #15
 800360c:	f67f ae90 	bls.w	8003330 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003610:	bf00      	nop
 8003612:	bf00      	nop
 8003614:	3724      	adds	r7, #36	@ 0x24
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40023800 	.word	0x40023800
 8003624:	40013800 	.word	0x40013800
 8003628:	40020000 	.word	0x40020000
 800362c:	40020400 	.word	0x40020400
 8003630:	40020800 	.word	0x40020800
 8003634:	40020c00 	.word	0x40020c00
 8003638:	40021000 	.word	0x40021000
 800363c:	40021400 	.word	0x40021400
 8003640:	40021800 	.word	0x40021800
 8003644:	40021c00 	.word	0x40021c00
 8003648:	40013c00 	.word	0x40013c00

0800364c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	807b      	strh	r3, [r7, #2]
 8003658:	4613      	mov	r3, r2
 800365a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800365c:	787b      	ldrb	r3, [r7, #1]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003662:	887a      	ldrh	r2, [r7, #2]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003668:	e003      	b.n	8003672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800366a:	887b      	ldrh	r3, [r7, #2]
 800366c:	041a      	lsls	r2, r3, #16
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	619a      	str	r2, [r3, #24]
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800367e:	b480      	push	{r7}
 8003680:	b085      	sub	sp, #20
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	460b      	mov	r3, r1
 8003688:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003690:	887a      	ldrh	r2, [r7, #2]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4013      	ands	r3, r2
 8003696:	041a      	lsls	r2, r3, #16
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	43d9      	mvns	r1, r3
 800369c:	887b      	ldrh	r3, [r7, #2]
 800369e:	400b      	ands	r3, r1
 80036a0:	431a      	orrs	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	619a      	str	r2, [r3, #24]
}
 80036a6:	bf00      	nop
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036be:	4b08      	ldr	r3, [pc, #32]	@ (80036e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036c0:	695a      	ldr	r2, [r3, #20]
 80036c2:	88fb      	ldrh	r3, [r7, #6]
 80036c4:	4013      	ands	r3, r2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d006      	beq.n	80036d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036ca:	4a05      	ldr	r2, [pc, #20]	@ (80036e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fd ff6e 	bl	80015b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80036d8:	bf00      	nop
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40013c00 	.word	0x40013c00

080036e4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e059      	b.n	80037aa <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d106      	bne.n	8003716 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f007 fb07 	bl	800ad24 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2203      	movs	r2, #3
 800371a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003724:	d102      	bne.n	800372c <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f004 f914 	bl	800795e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	7c1a      	ldrb	r2, [r3, #16]
 800373e:	f88d 2000 	strb.w	r2, [sp]
 8003742:	3304      	adds	r3, #4
 8003744:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003746:	f004 f895 	bl	8007874 <USB_CoreInit>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e026      	b.n	80037aa <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2101      	movs	r1, #1
 8003762:	4618      	mov	r0, r3
 8003764:	f004 f90c 	bl	8007980 <USB_SetCurrentMode>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2202      	movs	r2, #2
 8003772:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e017      	b.n	80037aa <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	7c1a      	ldrb	r2, [r3, #16]
 8003782:	f88d 2000 	strb.w	r2, [sp]
 8003786:	3304      	adds	r3, #4
 8003788:	cb0e      	ldmia	r3, {r1, r2, r3}
 800378a:	f004 fab5 	bl	8007cf8 <USB_HostInit>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e004      	b.n	80037aa <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80037b2:	b590      	push	{r4, r7, lr}
 80037b4:	b08b      	sub	sp, #44	@ 0x2c
 80037b6:	af04      	add	r7, sp, #16
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	4608      	mov	r0, r1
 80037bc:	4611      	mov	r1, r2
 80037be:	461a      	mov	r2, r3
 80037c0:	4603      	mov	r3, r0
 80037c2:	70fb      	strb	r3, [r7, #3]
 80037c4:	460b      	mov	r3, r1
 80037c6:	70bb      	strb	r3, [r7, #2]
 80037c8:	4613      	mov	r3, r2
 80037ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80037cc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80037ce:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <HAL_HCD_HC_Init+0x2c>
 80037da:	2302      	movs	r3, #2
 80037dc:	e09d      	b.n	800391a <HAL_HCD_HC_Init+0x168>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80037e6:	78fa      	ldrb	r2, [r7, #3]
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	4613      	mov	r3, r2
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	1a9b      	subs	r3, r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	440b      	add	r3, r1
 80037f4:	3319      	adds	r3, #25
 80037f6:	2200      	movs	r2, #0
 80037f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80037fa:	78fa      	ldrb	r2, [r7, #3]
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	3314      	adds	r3, #20
 800380a:	787a      	ldrb	r2, [r7, #1]
 800380c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	1a9b      	subs	r3, r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	3315      	adds	r3, #21
 800381e:	78fa      	ldrb	r2, [r7, #3]
 8003820:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	3326      	adds	r3, #38	@ 0x26
 8003832:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003836:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003838:	78fa      	ldrb	r2, [r7, #3]
 800383a:	78bb      	ldrb	r3, [r7, #2]
 800383c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003840:	b2d8      	uxtb	r0, r3
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	1a9b      	subs	r3, r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	3316      	adds	r3, #22
 8003850:	4602      	mov	r2, r0
 8003852:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	4619      	mov	r1, r3
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 fbc7 	bl	8003fec <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800385e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003862:	2b00      	cmp	r3, #0
 8003864:	da0a      	bge.n	800387c <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003866:	78fa      	ldrb	r2, [r7, #3]
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	3317      	adds	r3, #23
 8003876:	2201      	movs	r2, #1
 8003878:	701a      	strb	r2, [r3, #0]
 800387a:	e009      	b.n	8003890 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800387c:	78fa      	ldrb	r2, [r7, #3]
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	1a9b      	subs	r3, r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	3317      	adds	r3, #23
 800388c:	2200      	movs	r2, #0
 800388e:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f004 fb93 	bl	8007fc0 <USB_GetHostSpeed>
 800389a:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800389c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d10b      	bne.n	80038bc <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80038a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d107      	bne.n	80038bc <HAL_HCD_HC_Init+0x10a>
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d104      	bne.n	80038bc <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2bbc      	cmp	r3, #188	@ 0xbc
 80038b6:	d901      	bls.n	80038bc <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80038b8:	23bc      	movs	r3, #188	@ 0xbc
 80038ba:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80038bc:	78fa      	ldrb	r2, [r7, #3]
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	3318      	adds	r3, #24
 80038cc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80038d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80038d2:	78fa      	ldrb	r2, [r7, #3]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	b298      	uxth	r0, r3
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	3328      	adds	r3, #40	@ 0x28
 80038e6:	4602      	mov	r2, r0
 80038e8:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	787c      	ldrb	r4, [r7, #1]
 80038f4:	78ba      	ldrb	r2, [r7, #2]
 80038f6:	78f9      	ldrb	r1, [r7, #3]
 80038f8:	9302      	str	r3, [sp, #8]
 80038fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80038fe:	9301      	str	r3, [sp, #4]
 8003900:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	4623      	mov	r3, r4
 8003908:	f004 fb82 	bl	8008010 <USB_HC_Init>
 800390c:	4603      	mov	r3, r0
 800390e:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003918:	7bfb      	ldrb	r3, [r7, #15]
}
 800391a:	4618      	mov	r0, r3
 800391c:	371c      	adds	r7, #28
 800391e:	46bd      	mov	sp, r7
 8003920:	bd90      	pop	{r4, r7, pc}

08003922 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b084      	sub	sp, #16
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	460b      	mov	r3, r1
 800392c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_HCD_HC_Halt+0x1e>
 800393c:	2302      	movs	r3, #2
 800393e:	e00f      	b.n	8003960 <HAL_HCD_HC_Halt+0x3e>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	78fa      	ldrb	r2, [r7, #3]
 800394e:	4611      	mov	r1, r2
 8003950:	4618      	mov	r0, r3
 8003952:	f004 ff14 	bl	800877e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800395e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	4608      	mov	r0, r1
 8003972:	4611      	mov	r1, r2
 8003974:	461a      	mov	r2, r3
 8003976:	4603      	mov	r3, r0
 8003978:	70fb      	strb	r3, [r7, #3]
 800397a:	460b      	mov	r3, r1
 800397c:	70bb      	strb	r3, [r7, #2]
 800397e:	4613      	mov	r3, r2
 8003980:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003982:	78fa      	ldrb	r2, [r7, #3]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	3317      	adds	r3, #23
 8003992:	78ba      	ldrb	r2, [r7, #2]
 8003994:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003996:	78fa      	ldrb	r2, [r7, #3]
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	1a9b      	subs	r3, r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	440b      	add	r3, r1
 80039a4:	3326      	adds	r3, #38	@ 0x26
 80039a6:	787a      	ldrb	r2, [r7, #1]
 80039a8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80039aa:	7c3b      	ldrb	r3, [r7, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d114      	bne.n	80039da <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80039b0:	78fa      	ldrb	r2, [r7, #3]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	332a      	adds	r3, #42	@ 0x2a
 80039c0:	2203      	movs	r2, #3
 80039c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	3319      	adds	r3, #25
 80039d4:	7f3a      	ldrb	r2, [r7, #28]
 80039d6:	701a      	strb	r2, [r3, #0]
 80039d8:	e009      	b.n	80039ee <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039da:	78fa      	ldrb	r2, [r7, #3]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	1a9b      	subs	r3, r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	332a      	adds	r3, #42	@ 0x2a
 80039ea:	2202      	movs	r2, #2
 80039ec:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80039ee:	787b      	ldrb	r3, [r7, #1]
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	f200 8102 	bhi.w	8003bfa <HAL_HCD_HC_SubmitRequest+0x292>
 80039f6:	a201      	add	r2, pc, #4	@ (adr r2, 80039fc <HAL_HCD_HC_SubmitRequest+0x94>)
 80039f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fc:	08003a0d 	.word	0x08003a0d
 8003a00:	08003be5 	.word	0x08003be5
 8003a04:	08003ad1 	.word	0x08003ad1
 8003a08:	08003b5b 	.word	0x08003b5b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003a0c:	7c3b      	ldrb	r3, [r7, #16]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	f040 80f5 	bne.w	8003bfe <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003a14:	78bb      	ldrb	r3, [r7, #2]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d12d      	bne.n	8003a76 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003a1a:	8b3b      	ldrh	r3, [r7, #24]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d109      	bne.n	8003a34 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003a20:	78fa      	ldrb	r2, [r7, #3]
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	4613      	mov	r3, r2
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	1a9b      	subs	r3, r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	333d      	adds	r3, #61	@ 0x3d
 8003a30:	2201      	movs	r2, #1
 8003a32:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003a34:	78fa      	ldrb	r2, [r7, #3]
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	333d      	adds	r3, #61	@ 0x3d
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10a      	bne.n	8003a60 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a4a:	78fa      	ldrb	r2, [r7, #3]
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	1a9b      	subs	r3, r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	440b      	add	r3, r1
 8003a58:	332a      	adds	r3, #42	@ 0x2a
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003a5e:	e0ce      	b.n	8003bfe <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a60:	78fa      	ldrb	r2, [r7, #3]
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	1a9b      	subs	r3, r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	332a      	adds	r3, #42	@ 0x2a
 8003a70:	2202      	movs	r2, #2
 8003a72:	701a      	strb	r2, [r3, #0]
      break;
 8003a74:	e0c3      	b.n	8003bfe <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003a76:	78fa      	ldrb	r2, [r7, #3]
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	1a9b      	subs	r3, r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	440b      	add	r3, r1
 8003a84:	331a      	adds	r3, #26
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	f040 80b8 	bne.w	8003bfe <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	333c      	adds	r3, #60	@ 0x3c
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10a      	bne.n	8003aba <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003aa4:	78fa      	ldrb	r2, [r7, #3]
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	1a9b      	subs	r3, r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	332a      	adds	r3, #42	@ 0x2a
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	701a      	strb	r2, [r3, #0]
      break;
 8003ab8:	e0a1      	b.n	8003bfe <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	332a      	adds	r3, #42	@ 0x2a
 8003aca:	2202      	movs	r2, #2
 8003acc:	701a      	strb	r2, [r3, #0]
      break;
 8003ace:	e096      	b.n	8003bfe <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003ad0:	78bb      	ldrb	r3, [r7, #2]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d120      	bne.n	8003b18 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ad6:	78fa      	ldrb	r2, [r7, #3]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	333d      	adds	r3, #61	@ 0x3d
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10a      	bne.n	8003b02 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003aec:	78fa      	ldrb	r2, [r7, #3]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	332a      	adds	r3, #42	@ 0x2a
 8003afc:	2200      	movs	r2, #0
 8003afe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003b00:	e07e      	b.n	8003c00 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b02:	78fa      	ldrb	r2, [r7, #3]
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	4613      	mov	r3, r2
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	1a9b      	subs	r3, r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	440b      	add	r3, r1
 8003b10:	332a      	adds	r3, #42	@ 0x2a
 8003b12:	2202      	movs	r2, #2
 8003b14:	701a      	strb	r2, [r3, #0]
      break;
 8003b16:	e073      	b.n	8003c00 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003b18:	78fa      	ldrb	r2, [r7, #3]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	333c      	adds	r3, #60	@ 0x3c
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10a      	bne.n	8003b44 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b2e:	78fa      	ldrb	r2, [r7, #3]
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	1a9b      	subs	r3, r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	332a      	adds	r3, #42	@ 0x2a
 8003b3e:	2200      	movs	r2, #0
 8003b40:	701a      	strb	r2, [r3, #0]
      break;
 8003b42:	e05d      	b.n	8003c00 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b44:	78fa      	ldrb	r2, [r7, #3]
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	011b      	lsls	r3, r3, #4
 8003b4c:	1a9b      	subs	r3, r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	332a      	adds	r3, #42	@ 0x2a
 8003b54:	2202      	movs	r2, #2
 8003b56:	701a      	strb	r2, [r3, #0]
      break;
 8003b58:	e052      	b.n	8003c00 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003b5a:	78bb      	ldrb	r3, [r7, #2]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d120      	bne.n	8003ba2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b60:	78fa      	ldrb	r2, [r7, #3]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	333d      	adds	r3, #61	@ 0x3d
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10a      	bne.n	8003b8c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b76:	78fa      	ldrb	r2, [r7, #3]
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	1a9b      	subs	r3, r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	332a      	adds	r3, #42	@ 0x2a
 8003b86:	2200      	movs	r2, #0
 8003b88:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003b8a:	e039      	b.n	8003c00 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b8c:	78fa      	ldrb	r2, [r7, #3]
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	1a9b      	subs	r3, r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	332a      	adds	r3, #42	@ 0x2a
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	701a      	strb	r2, [r3, #0]
      break;
 8003ba0:	e02e      	b.n	8003c00 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003ba2:	78fa      	ldrb	r2, [r7, #3]
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	440b      	add	r3, r1
 8003bb0:	333c      	adds	r3, #60	@ 0x3c
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10a      	bne.n	8003bce <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bb8:	78fa      	ldrb	r2, [r7, #3]
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	332a      	adds	r3, #42	@ 0x2a
 8003bc8:	2200      	movs	r2, #0
 8003bca:	701a      	strb	r2, [r3, #0]
      break;
 8003bcc:	e018      	b.n	8003c00 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bce:	78fa      	ldrb	r2, [r7, #3]
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	1a9b      	subs	r3, r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	332a      	adds	r3, #42	@ 0x2a
 8003bde:	2202      	movs	r2, #2
 8003be0:	701a      	strb	r2, [r3, #0]
      break;
 8003be2:	e00d      	b.n	8003c00 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003be4:	78fa      	ldrb	r2, [r7, #3]
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	4613      	mov	r3, r2
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	1a9b      	subs	r3, r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	332a      	adds	r3, #42	@ 0x2a
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	701a      	strb	r2, [r3, #0]
      break;
 8003bf8:	e002      	b.n	8003c00 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003bfa:	bf00      	nop
 8003bfc:	e000      	b.n	8003c00 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003bfe:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003c00:	78fa      	ldrb	r2, [r7, #3]
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	332c      	adds	r3, #44	@ 0x2c
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003c14:	78fa      	ldrb	r2, [r7, #3]
 8003c16:	8b39      	ldrh	r1, [r7, #24]
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4403      	add	r3, r0
 8003c24:	3334      	adds	r3, #52	@ 0x34
 8003c26:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003c28:	78fa      	ldrb	r2, [r7, #3]
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	1a9b      	subs	r3, r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	334c      	adds	r3, #76	@ 0x4c
 8003c38:	2200      	movs	r2, #0
 8003c3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003c3c:	78fa      	ldrb	r2, [r7, #3]
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	4613      	mov	r3, r2
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	1a9b      	subs	r3, r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	3338      	adds	r3, #56	@ 0x38
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	1a9b      	subs	r3, r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	3315      	adds	r3, #21
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003c64:	78fa      	ldrb	r2, [r7, #3]
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	1a9b      	subs	r3, r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	334d      	adds	r3, #77	@ 0x4d
 8003c74:	2200      	movs	r2, #0
 8003c76:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	78fa      	ldrb	r2, [r7, #3]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	1a9b      	subs	r3, r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	3310      	adds	r3, #16
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	1d19      	adds	r1, r3, #4
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	799b      	ldrb	r3, [r3, #6]
 8003c92:	461a      	mov	r2, r3
 8003c94:	f004 fae8 	bl	8008268 <USB_HC_StartXfer>
 8003c98:	4603      	mov	r3, r0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop

08003ca4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f003 ffd6 	bl	8007c6c <USB_GetMode>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	f040 80fb 	bne.w	8003ebe <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f003 ff99 	bl	8007c04 <USB_ReadInterrupts>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80f1 	beq.w	8003ebc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f003 ff90 	bl	8007c04 <USB_ReadInterrupts>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cee:	d104      	bne.n	8003cfa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003cf8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f003 ff80 	bl	8007c04 <USB_ReadInterrupts>
 8003d04:	4603      	mov	r3, r0
 8003d06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d0e:	d104      	bne.n	8003d1a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003d18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f003 ff70 	bl	8007c04 <USB_ReadInterrupts>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d2e:	d104      	bne.n	8003d3a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003d38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f003 ff60 	bl	8007c04 <USB_ReadInterrupts>
 8003d44:	4603      	mov	r3, r0
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d103      	bne.n	8003d56 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2202      	movs	r2, #2
 8003d54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f003 ff52 	bl	8007c04 <USB_ReadInterrupts>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d6a:	d120      	bne.n	8003dae <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003d74:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d113      	bne.n	8003dae <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003d86:	2110      	movs	r1, #16
 8003d88:	6938      	ldr	r0, [r7, #16]
 8003d8a:	f003 fe45 	bl	8007a18 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003d8e:	6938      	ldr	r0, [r7, #16]
 8003d90:	f003 fe74 	bl	8007a7c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	7a5b      	ldrb	r3, [r3, #9]
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d105      	bne.n	8003da8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2101      	movs	r1, #1
 8003da2:	4618      	mov	r0, r3
 8003da4:	f004 f86c 	bl	8007e80 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f007 f839 	bl	800ae20 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f003 ff26 	bl	8007c04 <USB_ReadInterrupts>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dc2:	d102      	bne.n	8003dca <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f001 fd4d 	bl	8005864 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f003 ff18 	bl	8007c04 <USB_ReadInterrupts>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	d106      	bne.n	8003dec <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f007 f802 	bl	800ade8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2208      	movs	r2, #8
 8003dea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f003 ff07 	bl	8007c04 <USB_ReadInterrupts>
 8003df6:	4603      	mov	r3, r0
 8003df8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e00:	d139      	bne.n	8003e76 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f004 fca8 	bl	800875c <USB_HC_ReadInterrupt>
 8003e0c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	e025      	b.n	8003e60 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d018      	beq.n	8003e5a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e3e:	d106      	bne.n	8003e4e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	4619      	mov	r1, r3
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f905 	bl	8004056 <HCD_HC_IN_IRQHandler>
 8003e4c:	e005      	b.n	8003e5a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	4619      	mov	r1, r3
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 ff67 	bl	8004d28 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	795b      	ldrb	r3, [r3, #5]
 8003e64:	461a      	mov	r2, r3
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d3d3      	bcc.n	8003e14 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f003 fec2 	bl	8007c04 <USB_ReadInterrupts>
 8003e80:	4603      	mov	r3, r0
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b10      	cmp	r3, #16
 8003e88:	d101      	bne.n	8003e8e <HAL_HCD_IRQHandler+0x1ea>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <HAL_HCD_IRQHandler+0x1ec>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d014      	beq.n	8003ebe <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699a      	ldr	r2, [r3, #24]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0210 	bic.w	r2, r2, #16
 8003ea2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f001 fbfe 	bl	80056a6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699a      	ldr	r2, [r3, #24]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0210 	orr.w	r2, r2, #16
 8003eb8:	619a      	str	r2, [r3, #24]
 8003eba:	e000      	b.n	8003ebe <HAL_HCD_IRQHandler+0x21a>
      return;
 8003ebc:	bf00      	nop
    }
  }
}
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_HCD_Start+0x16>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e013      	b.n	8003f02 <HAL_HCD_Start+0x3e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f004 f830 	bl	8007f4e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f003 fd22 	bl	800793c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b082      	sub	sp, #8
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d101      	bne.n	8003f20 <HAL_HCD_Stop+0x16>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e00d      	b.n	8003f3c <HAL_HCD_Stop+0x32>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f004 fd83 	bl	8008a38 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f003 ffd2 	bl	8007efa <USB_ResetPort>
 8003f56:	4603      	mov	r3, r0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003f6c:	78fa      	ldrb	r2, [r7, #3]
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	4613      	mov	r3, r2
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	1a9b      	subs	r3, r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	334c      	adds	r3, #76	@ 0x4c
 8003f7c:	781b      	ldrb	r3, [r3, #0]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	460b      	mov	r3, r1
 8003f94:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003f96:	78fa      	ldrb	r2, [r7, #3]
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	1a9b      	subs	r3, r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	3338      	adds	r3, #56	@ 0x38
 8003fa6:	681b      	ldr	r3, [r3, #0]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f004 f814 	bl	8007fee <USB_GetCurrentFrame>
 8003fc6:	4603      	mov	r3, r0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f003 ffef 	bl	8007fc0 <USB_GetHostSpeed>
 8003fe2:	4603      	mov	r3, r0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003ff8:	78fa      	ldrb	r2, [r7, #3]
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	1a9b      	subs	r3, r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	331a      	adds	r3, #26
 8004008:	2200      	movs	r2, #0
 800400a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800400c:	78fa      	ldrb	r2, [r7, #3]
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	4613      	mov	r3, r2
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	331b      	adds	r3, #27
 800401c:	2200      	movs	r2, #0
 800401e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004020:	78fa      	ldrb	r2, [r7, #3]
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	4613      	mov	r3, r2
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	1a9b      	subs	r3, r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	3325      	adds	r3, #37	@ 0x25
 8004030:	2200      	movs	r2, #0
 8004032:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004034:	78fa      	ldrb	r2, [r7, #3]
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	4613      	mov	r3, r2
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	3324      	adds	r3, #36	@ 0x24
 8004044:	2200      	movs	r2, #0
 8004046:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b086      	sub	sp, #24
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	460b      	mov	r3, r1
 8004060:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	78fa      	ldrb	r2, [r7, #3]
 8004072:	4611      	mov	r1, r2
 8004074:	4618      	mov	r0, r3
 8004076:	f003 fdd8 	bl	8007c2a <USB_ReadChInterrupts>
 800407a:	4603      	mov	r3, r0
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b04      	cmp	r3, #4
 8004082:	d11a      	bne.n	80040ba <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	4413      	add	r3, r2
 800408c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004090:	461a      	mov	r2, r3
 8004092:	2304      	movs	r3, #4
 8004094:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004096:	78fa      	ldrb	r2, [r7, #3]
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	1a9b      	subs	r3, r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	334d      	adds	r3, #77	@ 0x4d
 80040a6:	2207      	movs	r2, #7
 80040a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	78fa      	ldrb	r2, [r7, #3]
 80040b0:	4611      	mov	r1, r2
 80040b2:	4618      	mov	r0, r3
 80040b4:	f004 fb63 	bl	800877e <USB_HC_Halt>
 80040b8:	e09e      	b.n	80041f8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	78fa      	ldrb	r2, [r7, #3]
 80040c0:	4611      	mov	r1, r2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f003 fdb1 	bl	8007c2a <USB_ReadChInterrupts>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040d2:	d11b      	bne.n	800410c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80040d4:	78fb      	ldrb	r3, [r7, #3]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040e0:	461a      	mov	r2, r3
 80040e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80040e8:	78fa      	ldrb	r2, [r7, #3]
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	4613      	mov	r3, r2
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	1a9b      	subs	r3, r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	334d      	adds	r3, #77	@ 0x4d
 80040f8:	2208      	movs	r2, #8
 80040fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	78fa      	ldrb	r2, [r7, #3]
 8004102:	4611      	mov	r1, r2
 8004104:	4618      	mov	r0, r3
 8004106:	f004 fb3a 	bl	800877e <USB_HC_Halt>
 800410a:	e075      	b.n	80041f8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	78fa      	ldrb	r2, [r7, #3]
 8004112:	4611      	mov	r1, r2
 8004114:	4618      	mov	r0, r3
 8004116:	f003 fd88 	bl	8007c2a <USB_ReadChInterrupts>
 800411a:	4603      	mov	r3, r0
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b08      	cmp	r3, #8
 8004122:	d11a      	bne.n	800415a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004124:	78fb      	ldrb	r3, [r7, #3]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	4413      	add	r3, r2
 800412c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004130:	461a      	mov	r2, r3
 8004132:	2308      	movs	r3, #8
 8004134:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004136:	78fa      	ldrb	r2, [r7, #3]
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	4613      	mov	r3, r2
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	1a9b      	subs	r3, r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	440b      	add	r3, r1
 8004144:	334d      	adds	r3, #77	@ 0x4d
 8004146:	2206      	movs	r2, #6
 8004148:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	78fa      	ldrb	r2, [r7, #3]
 8004150:	4611      	mov	r1, r2
 8004152:	4618      	mov	r0, r3
 8004154:	f004 fb13 	bl	800877e <USB_HC_Halt>
 8004158:	e04e      	b.n	80041f8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	78fa      	ldrb	r2, [r7, #3]
 8004160:	4611      	mov	r1, r2
 8004162:	4618      	mov	r0, r3
 8004164:	f003 fd61 	bl	8007c2a <USB_ReadChInterrupts>
 8004168:	4603      	mov	r3, r0
 800416a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800416e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004172:	d11b      	bne.n	80041ac <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004174:	78fb      	ldrb	r3, [r7, #3]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	4413      	add	r3, r2
 800417c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004180:	461a      	mov	r2, r3
 8004182:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004186:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004188:	78fa      	ldrb	r2, [r7, #3]
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	4613      	mov	r3, r2
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	1a9b      	subs	r3, r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	334d      	adds	r3, #77	@ 0x4d
 8004198:	2209      	movs	r2, #9
 800419a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	78fa      	ldrb	r2, [r7, #3]
 80041a2:	4611      	mov	r1, r2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f004 faea 	bl	800877e <USB_HC_Halt>
 80041aa:	e025      	b.n	80041f8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	78fa      	ldrb	r2, [r7, #3]
 80041b2:	4611      	mov	r1, r2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f003 fd38 	bl	8007c2a <USB_ReadChInterrupts>
 80041ba:	4603      	mov	r3, r0
 80041bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041c0:	2b80      	cmp	r3, #128	@ 0x80
 80041c2:	d119      	bne.n	80041f8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041d0:	461a      	mov	r2, r3
 80041d2:	2380      	movs	r3, #128	@ 0x80
 80041d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80041d6:	78fa      	ldrb	r2, [r7, #3]
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	1a9b      	subs	r3, r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	334d      	adds	r3, #77	@ 0x4d
 80041e6:	2207      	movs	r2, #7
 80041e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	78fa      	ldrb	r2, [r7, #3]
 80041f0:	4611      	mov	r1, r2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f004 fac3 	bl	800877e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	78fa      	ldrb	r2, [r7, #3]
 80041fe:	4611      	mov	r1, r2
 8004200:	4618      	mov	r0, r3
 8004202:	f003 fd12 	bl	8007c2a <USB_ReadChInterrupts>
 8004206:	4603      	mov	r3, r0
 8004208:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800420c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004210:	d112      	bne.n	8004238 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	78fa      	ldrb	r2, [r7, #3]
 8004218:	4611      	mov	r1, r2
 800421a:	4618      	mov	r0, r3
 800421c:	f004 faaf 	bl	800877e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	4413      	add	r3, r2
 8004228:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800422c:	461a      	mov	r2, r3
 800422e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004232:	6093      	str	r3, [r2, #8]
 8004234:	f000 bd75 	b.w	8004d22 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	78fa      	ldrb	r2, [r7, #3]
 800423e:	4611      	mov	r1, r2
 8004240:	4618      	mov	r0, r3
 8004242:	f003 fcf2 	bl	8007c2a <USB_ReadChInterrupts>
 8004246:	4603      	mov	r3, r0
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b01      	cmp	r3, #1
 800424e:	f040 8128 	bne.w	80044a2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004252:	78fb      	ldrb	r3, [r7, #3]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	4413      	add	r3, r2
 800425a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800425e:	461a      	mov	r2, r3
 8004260:	2320      	movs	r3, #32
 8004262:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004264:	78fa      	ldrb	r2, [r7, #3]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	1a9b      	subs	r3, r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	331b      	adds	r3, #27
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d119      	bne.n	80042ae <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800427a:	78fa      	ldrb	r2, [r7, #3]
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	4613      	mov	r3, r2
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	1a9b      	subs	r3, r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	331b      	adds	r3, #27
 800428a:	2200      	movs	r2, #0
 800428c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800428e:	78fb      	ldrb	r3, [r7, #3]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	4413      	add	r3, r2
 8004296:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	78fa      	ldrb	r2, [r7, #3]
 800429e:	0151      	lsls	r1, r2, #5
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	440a      	add	r2, r1
 80042a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042ac:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	799b      	ldrb	r3, [r3, #6]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d01b      	beq.n	80042ee <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80042b6:	78fa      	ldrb	r2, [r7, #3]
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	1a9b      	subs	r3, r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	440b      	add	r3, r1
 80042c4:	3330      	adds	r3, #48	@ 0x30
 80042c6:	6819      	ldr	r1, [r3, #0]
 80042c8:	78fb      	ldrb	r3, [r7, #3]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042da:	78fa      	ldrb	r2, [r7, #3]
 80042dc:	1ac9      	subs	r1, r1, r3
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	4613      	mov	r3, r2
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	1a9b      	subs	r3, r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4403      	add	r3, r0
 80042ea:	3338      	adds	r3, #56	@ 0x38
 80042ec:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80042ee:	78fa      	ldrb	r2, [r7, #3]
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	334d      	adds	r3, #77	@ 0x4d
 80042fe:	2201      	movs	r2, #1
 8004300:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004302:	78fa      	ldrb	r2, [r7, #3]
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	4613      	mov	r3, r2
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	1a9b      	subs	r3, r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	440b      	add	r3, r1
 8004310:	3344      	adds	r3, #68	@ 0x44
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004316:	78fb      	ldrb	r3, [r7, #3]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	4413      	add	r3, r2
 800431e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004322:	461a      	mov	r2, r3
 8004324:	2301      	movs	r3, #1
 8004326:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004328:	78fa      	ldrb	r2, [r7, #3]
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	4613      	mov	r3, r2
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	1a9b      	subs	r3, r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	3326      	adds	r3, #38	@ 0x26
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800433e:	78fa      	ldrb	r2, [r7, #3]
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	4613      	mov	r3, r2
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	1a9b      	subs	r3, r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	3326      	adds	r3, #38	@ 0x26
 800434e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004350:	2b02      	cmp	r3, #2
 8004352:	d110      	bne.n	8004376 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	78fa      	ldrb	r2, [r7, #3]
 800435a:	4611      	mov	r1, r2
 800435c:	4618      	mov	r0, r3
 800435e:	f004 fa0e 	bl	800877e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	4413      	add	r3, r2
 800436a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800436e:	461a      	mov	r2, r3
 8004370:	2310      	movs	r3, #16
 8004372:	6093      	str	r3, [r2, #8]
 8004374:	e03d      	b.n	80043f2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004376:	78fa      	ldrb	r2, [r7, #3]
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	4613      	mov	r3, r2
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	1a9b      	subs	r3, r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	440b      	add	r3, r1
 8004384:	3326      	adds	r3, #38	@ 0x26
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b03      	cmp	r3, #3
 800438a:	d00a      	beq.n	80043a2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800438c:	78fa      	ldrb	r2, [r7, #3]
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	1a9b      	subs	r3, r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	3326      	adds	r3, #38	@ 0x26
 800439c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d127      	bne.n	80043f2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	78fa      	ldrb	r2, [r7, #3]
 80043b2:	0151      	lsls	r1, r2, #5
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	440a      	add	r2, r1
 80043b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80043c0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80043c2:	78fa      	ldrb	r2, [r7, #3]
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	1a9b      	subs	r3, r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	440b      	add	r3, r1
 80043d0:	334c      	adds	r3, #76	@ 0x4c
 80043d2:	2201      	movs	r2, #1
 80043d4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80043d6:	78fa      	ldrb	r2, [r7, #3]
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	1a9b      	subs	r3, r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	334c      	adds	r3, #76	@ 0x4c
 80043e6:	781a      	ldrb	r2, [r3, #0]
 80043e8:	78fb      	ldrb	r3, [r7, #3]
 80043ea:	4619      	mov	r1, r3
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f006 fd25 	bl	800ae3c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	799b      	ldrb	r3, [r3, #6]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d13b      	bne.n	8004472 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80043fa:	78fa      	ldrb	r2, [r7, #3]
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	3338      	adds	r3, #56	@ 0x38
 800440a:	6819      	ldr	r1, [r3, #0]
 800440c:	78fa      	ldrb	r2, [r7, #3]
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	4613      	mov	r3, r2
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	1a9b      	subs	r3, r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4403      	add	r3, r0
 800441a:	3328      	adds	r3, #40	@ 0x28
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	440b      	add	r3, r1
 8004420:	1e59      	subs	r1, r3, #1
 8004422:	78fa      	ldrb	r2, [r7, #3]
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	1a9b      	subs	r3, r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4403      	add	r3, r0
 8004430:	3328      	adds	r3, #40	@ 0x28
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	fbb1 f3f3 	udiv	r3, r1, r3
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 8470 	beq.w	8004d22 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	333c      	adds	r3, #60	@ 0x3c
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	78fa      	ldrb	r2, [r7, #3]
 8004456:	f083 0301 	eor.w	r3, r3, #1
 800445a:	b2d8      	uxtb	r0, r3
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	4613      	mov	r3, r2
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	1a9b      	subs	r3, r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	440b      	add	r3, r1
 8004468:	333c      	adds	r3, #60	@ 0x3c
 800446a:	4602      	mov	r2, r0
 800446c:	701a      	strb	r2, [r3, #0]
 800446e:	f000 bc58 	b.w	8004d22 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004472:	78fa      	ldrb	r2, [r7, #3]
 8004474:	6879      	ldr	r1, [r7, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	440b      	add	r3, r1
 8004480:	333c      	adds	r3, #60	@ 0x3c
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	78fa      	ldrb	r2, [r7, #3]
 8004486:	f083 0301 	eor.w	r3, r3, #1
 800448a:	b2d8      	uxtb	r0, r3
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	440b      	add	r3, r1
 8004498:	333c      	adds	r3, #60	@ 0x3c
 800449a:	4602      	mov	r2, r0
 800449c:	701a      	strb	r2, [r3, #0]
 800449e:	f000 bc40 	b.w	8004d22 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	78fa      	ldrb	r2, [r7, #3]
 80044a8:	4611      	mov	r1, r2
 80044aa:	4618      	mov	r0, r3
 80044ac:	f003 fbbd 	bl	8007c2a <USB_ReadChInterrupts>
 80044b0:	4603      	mov	r3, r0
 80044b2:	f003 0320 	and.w	r3, r3, #32
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	d131      	bne.n	800451e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80044ba:	78fb      	ldrb	r3, [r7, #3]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044c6:	461a      	mov	r2, r3
 80044c8:	2320      	movs	r3, #32
 80044ca:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80044cc:	78fa      	ldrb	r2, [r7, #3]
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	4613      	mov	r3, r2
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	1a9b      	subs	r3, r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	331a      	adds	r3, #26
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	f040 841f 	bne.w	8004d22 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80044e4:	78fa      	ldrb	r2, [r7, #3]
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	331b      	adds	r3, #27
 80044f4:	2201      	movs	r2, #1
 80044f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80044f8:	78fa      	ldrb	r2, [r7, #3]
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	4613      	mov	r3, r2
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	1a9b      	subs	r3, r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	334d      	adds	r3, #77	@ 0x4d
 8004508:	2203      	movs	r2, #3
 800450a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	78fa      	ldrb	r2, [r7, #3]
 8004512:	4611      	mov	r1, r2
 8004514:	4618      	mov	r0, r3
 8004516:	f004 f932 	bl	800877e <USB_HC_Halt>
 800451a:	f000 bc02 	b.w	8004d22 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	78fa      	ldrb	r2, [r7, #3]
 8004524:	4611      	mov	r1, r2
 8004526:	4618      	mov	r0, r3
 8004528:	f003 fb7f 	bl	8007c2a <USB_ReadChInterrupts>
 800452c:	4603      	mov	r3, r0
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b02      	cmp	r3, #2
 8004534:	f040 8305 	bne.w	8004b42 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004538:	78fb      	ldrb	r3, [r7, #3]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4413      	add	r3, r2
 8004540:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004544:	461a      	mov	r2, r3
 8004546:	2302      	movs	r3, #2
 8004548:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800454a:	78fa      	ldrb	r2, [r7, #3]
 800454c:	6879      	ldr	r1, [r7, #4]
 800454e:	4613      	mov	r3, r2
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	1a9b      	subs	r3, r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	440b      	add	r3, r1
 8004558:	334d      	adds	r3, #77	@ 0x4d
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d114      	bne.n	800458a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004560:	78fa      	ldrb	r2, [r7, #3]
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	4613      	mov	r3, r2
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	1a9b      	subs	r3, r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	334d      	adds	r3, #77	@ 0x4d
 8004570:	2202      	movs	r2, #2
 8004572:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004574:	78fa      	ldrb	r2, [r7, #3]
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	4613      	mov	r3, r2
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	334c      	adds	r3, #76	@ 0x4c
 8004584:	2201      	movs	r2, #1
 8004586:	701a      	strb	r2, [r3, #0]
 8004588:	e2cc      	b.n	8004b24 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800458a:	78fa      	ldrb	r2, [r7, #3]
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	4613      	mov	r3, r2
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	1a9b      	subs	r3, r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	440b      	add	r3, r1
 8004598:	334d      	adds	r3, #77	@ 0x4d
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	2b06      	cmp	r3, #6
 800459e:	d114      	bne.n	80045ca <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045a0:	78fa      	ldrb	r2, [r7, #3]
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	4613      	mov	r3, r2
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	1a9b      	subs	r3, r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	440b      	add	r3, r1
 80045ae:	334d      	adds	r3, #77	@ 0x4d
 80045b0:	2202      	movs	r2, #2
 80045b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80045b4:	78fa      	ldrb	r2, [r7, #3]
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	4613      	mov	r3, r2
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	1a9b      	subs	r3, r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	334c      	adds	r3, #76	@ 0x4c
 80045c4:	2205      	movs	r2, #5
 80045c6:	701a      	strb	r2, [r3, #0]
 80045c8:	e2ac      	b.n	8004b24 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80045ca:	78fa      	ldrb	r2, [r7, #3]
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	4613      	mov	r3, r2
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	334d      	adds	r3, #77	@ 0x4d
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b07      	cmp	r3, #7
 80045de:	d00b      	beq.n	80045f8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80045e0:	78fa      	ldrb	r2, [r7, #3]
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	4613      	mov	r3, r2
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	1a9b      	subs	r3, r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	440b      	add	r3, r1
 80045ee:	334d      	adds	r3, #77	@ 0x4d
 80045f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80045f2:	2b09      	cmp	r3, #9
 80045f4:	f040 80a6 	bne.w	8004744 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045f8:	78fa      	ldrb	r2, [r7, #3]
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	4613      	mov	r3, r2
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	1a9b      	subs	r3, r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	334d      	adds	r3, #77	@ 0x4d
 8004608:	2202      	movs	r2, #2
 800460a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800460c:	78fa      	ldrb	r2, [r7, #3]
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	4613      	mov	r3, r2
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	1a9b      	subs	r3, r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	3344      	adds	r3, #68	@ 0x44
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	1c59      	adds	r1, r3, #1
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	4613      	mov	r3, r2
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	1a9b      	subs	r3, r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4403      	add	r3, r0
 800462c:	3344      	adds	r3, #68	@ 0x44
 800462e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004630:	78fa      	ldrb	r2, [r7, #3]
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	1a9b      	subs	r3, r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	3344      	adds	r3, #68	@ 0x44
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b02      	cmp	r3, #2
 8004644:	d943      	bls.n	80046ce <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004646:	78fa      	ldrb	r2, [r7, #3]
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	4613      	mov	r3, r2
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	1a9b      	subs	r3, r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	440b      	add	r3, r1
 8004654:	3344      	adds	r3, #68	@ 0x44
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800465a:	78fa      	ldrb	r2, [r7, #3]
 800465c:	6879      	ldr	r1, [r7, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	1a9b      	subs	r3, r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	440b      	add	r3, r1
 8004668:	331a      	adds	r3, #26
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d123      	bne.n	80046b8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004670:	78fa      	ldrb	r2, [r7, #3]
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	4613      	mov	r3, r2
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	1a9b      	subs	r3, r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	331b      	adds	r3, #27
 8004680:	2200      	movs	r2, #0
 8004682:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004684:	78fa      	ldrb	r2, [r7, #3]
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	1a9b      	subs	r3, r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	331c      	adds	r3, #28
 8004694:	2200      	movs	r2, #0
 8004696:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	78fa      	ldrb	r2, [r7, #3]
 80046a8:	0151      	lsls	r1, r2, #5
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	440a      	add	r2, r1
 80046ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046b6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80046b8:	78fa      	ldrb	r2, [r7, #3]
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	4613      	mov	r3, r2
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	1a9b      	subs	r3, r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	334c      	adds	r3, #76	@ 0x4c
 80046c8:	2204      	movs	r2, #4
 80046ca:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046cc:	e229      	b.n	8004b22 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80046ce:	78fa      	ldrb	r2, [r7, #3]
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	4613      	mov	r3, r2
 80046d4:	011b      	lsls	r3, r3, #4
 80046d6:	1a9b      	subs	r3, r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	440b      	add	r3, r1
 80046dc:	334c      	adds	r3, #76	@ 0x4c
 80046de:	2202      	movs	r2, #2
 80046e0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046e2:	78fa      	ldrb	r2, [r7, #3]
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	4613      	mov	r3, r2
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	1a9b      	subs	r3, r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	440b      	add	r3, r1
 80046f0:	3326      	adds	r3, #38	@ 0x26
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00b      	beq.n	8004710 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80046f8:	78fa      	ldrb	r2, [r7, #3]
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	4613      	mov	r3, r2
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	1a9b      	subs	r3, r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	3326      	adds	r3, #38	@ 0x26
 8004708:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800470a:	2b02      	cmp	r3, #2
 800470c:	f040 8209 	bne.w	8004b22 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	4413      	add	r3, r2
 8004718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004726:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800472e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004730:	78fb      	ldrb	r3, [r7, #3]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	4413      	add	r3, r2
 8004738:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800473c:	461a      	mov	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004742:	e1ee      	b.n	8004b22 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004744:	78fa      	ldrb	r2, [r7, #3]
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	4613      	mov	r3, r2
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	1a9b      	subs	r3, r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	334d      	adds	r3, #77	@ 0x4d
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b05      	cmp	r3, #5
 8004758:	f040 80c8 	bne.w	80048ec <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800475c:	78fa      	ldrb	r2, [r7, #3]
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	4613      	mov	r3, r2
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	1a9b      	subs	r3, r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	440b      	add	r3, r1
 800476a:	334d      	adds	r3, #77	@ 0x4d
 800476c:	2202      	movs	r2, #2
 800476e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004770:	78fa      	ldrb	r2, [r7, #3]
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	4613      	mov	r3, r2
 8004776:	011b      	lsls	r3, r3, #4
 8004778:	1a9b      	subs	r3, r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	331b      	adds	r3, #27
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2b01      	cmp	r3, #1
 8004784:	f040 81ce 	bne.w	8004b24 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004788:	78fa      	ldrb	r2, [r7, #3]
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	4613      	mov	r3, r2
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	3326      	adds	r3, #38	@ 0x26
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b03      	cmp	r3, #3
 800479c:	d16b      	bne.n	8004876 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800479e:	78fa      	ldrb	r2, [r7, #3]
 80047a0:	6879      	ldr	r1, [r7, #4]
 80047a2:	4613      	mov	r3, r2
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	1a9b      	subs	r3, r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	440b      	add	r3, r1
 80047ac:	3348      	adds	r3, #72	@ 0x48
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	1c59      	adds	r1, r3, #1
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	4613      	mov	r3, r2
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	1a9b      	subs	r3, r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4403      	add	r3, r0
 80047be:	3348      	adds	r3, #72	@ 0x48
 80047c0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80047c2:	78fa      	ldrb	r2, [r7, #3]
 80047c4:	6879      	ldr	r1, [r7, #4]
 80047c6:	4613      	mov	r3, r2
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	1a9b      	subs	r3, r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	440b      	add	r3, r1
 80047d0:	3348      	adds	r3, #72	@ 0x48
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d943      	bls.n	8004860 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80047d8:	78fa      	ldrb	r2, [r7, #3]
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	4613      	mov	r3, r2
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	440b      	add	r3, r1
 80047e6:	3348      	adds	r3, #72	@ 0x48
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80047ec:	78fa      	ldrb	r2, [r7, #3]
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	4613      	mov	r3, r2
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	1a9b      	subs	r3, r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	440b      	add	r3, r1
 80047fa:	331b      	adds	r3, #27
 80047fc:	2200      	movs	r2, #0
 80047fe:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004800:	78fa      	ldrb	r2, [r7, #3]
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	4613      	mov	r3, r2
 8004806:	011b      	lsls	r3, r3, #4
 8004808:	1a9b      	subs	r3, r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	440b      	add	r3, r1
 800480e:	3344      	adds	r3, #68	@ 0x44
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d809      	bhi.n	800482a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004816:	78fa      	ldrb	r2, [r7, #3]
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	4613      	mov	r3, r2
 800481c:	011b      	lsls	r3, r3, #4
 800481e:	1a9b      	subs	r3, r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	440b      	add	r3, r1
 8004824:	331c      	adds	r3, #28
 8004826:	2201      	movs	r2, #1
 8004828:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800482a:	78fb      	ldrb	r3, [r7, #3]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	4413      	add	r3, r2
 8004832:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	78fa      	ldrb	r2, [r7, #3]
 800483a:	0151      	lsls	r1, r2, #5
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	440a      	add	r2, r1
 8004840:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004844:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004848:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800484a:	78fa      	ldrb	r2, [r7, #3]
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	4613      	mov	r3, r2
 8004850:	011b      	lsls	r3, r3, #4
 8004852:	1a9b      	subs	r3, r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	440b      	add	r3, r1
 8004858:	334c      	adds	r3, #76	@ 0x4c
 800485a:	2204      	movs	r2, #4
 800485c:	701a      	strb	r2, [r3, #0]
 800485e:	e014      	b.n	800488a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004860:	78fa      	ldrb	r2, [r7, #3]
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	4613      	mov	r3, r2
 8004866:	011b      	lsls	r3, r3, #4
 8004868:	1a9b      	subs	r3, r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	440b      	add	r3, r1
 800486e:	334c      	adds	r3, #76	@ 0x4c
 8004870:	2202      	movs	r2, #2
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	e009      	b.n	800488a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004876:	78fa      	ldrb	r2, [r7, #3]
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	4613      	mov	r3, r2
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	1a9b      	subs	r3, r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	440b      	add	r3, r1
 8004884:	334c      	adds	r3, #76	@ 0x4c
 8004886:	2202      	movs	r2, #2
 8004888:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800488a:	78fa      	ldrb	r2, [r7, #3]
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	4613      	mov	r3, r2
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	1a9b      	subs	r3, r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	440b      	add	r3, r1
 8004898:	3326      	adds	r3, #38	@ 0x26
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00b      	beq.n	80048b8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80048a0:	78fa      	ldrb	r2, [r7, #3]
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	4613      	mov	r3, r2
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	1a9b      	subs	r3, r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	3326      	adds	r3, #38	@ 0x26
 80048b0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	f040 8136 	bne.w	8004b24 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80048ce:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048d6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80048d8:	78fb      	ldrb	r3, [r7, #3]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048e4:	461a      	mov	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	e11b      	b.n	8004b24 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80048ec:	78fa      	ldrb	r2, [r7, #3]
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	4613      	mov	r3, r2
 80048f2:	011b      	lsls	r3, r3, #4
 80048f4:	1a9b      	subs	r3, r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	440b      	add	r3, r1
 80048fa:	334d      	adds	r3, #77	@ 0x4d
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b03      	cmp	r3, #3
 8004900:	f040 8081 	bne.w	8004a06 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004904:	78fa      	ldrb	r2, [r7, #3]
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	4613      	mov	r3, r2
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	1a9b      	subs	r3, r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	440b      	add	r3, r1
 8004912:	334d      	adds	r3, #77	@ 0x4d
 8004914:	2202      	movs	r2, #2
 8004916:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004918:	78fa      	ldrb	r2, [r7, #3]
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	4613      	mov	r3, r2
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	331b      	adds	r3, #27
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b01      	cmp	r3, #1
 800492c:	f040 80fa 	bne.w	8004b24 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004930:	78fa      	ldrb	r2, [r7, #3]
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	4613      	mov	r3, r2
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	1a9b      	subs	r3, r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	440b      	add	r3, r1
 800493e:	334c      	adds	r3, #76	@ 0x4c
 8004940:	2202      	movs	r2, #2
 8004942:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004944:	78fb      	ldrb	r3, [r7, #3]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	4413      	add	r3, r2
 800494c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	78fa      	ldrb	r2, [r7, #3]
 8004954:	0151      	lsls	r1, r2, #5
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	440a      	add	r2, r1
 800495a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800495e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004962:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	4413      	add	r3, r2
 800496c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	78fa      	ldrb	r2, [r7, #3]
 8004974:	0151      	lsls	r1, r2, #5
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	440a      	add	r2, r1
 800497a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800497e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004982:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	4413      	add	r3, r2
 800498c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	78fa      	ldrb	r2, [r7, #3]
 8004994:	0151      	lsls	r1, r2, #5
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	440a      	add	r2, r1
 800499a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800499e:	f023 0320 	bic.w	r3, r3, #32
 80049a2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80049a4:	78fa      	ldrb	r2, [r7, #3]
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	4613      	mov	r3, r2
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	440b      	add	r3, r1
 80049b2:	3326      	adds	r3, #38	@ 0x26
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00b      	beq.n	80049d2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80049ba:	78fa      	ldrb	r2, [r7, #3]
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	3326      	adds	r3, #38	@ 0x26
 80049ca:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	f040 80a9 	bne.w	8004b24 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80049d2:	78fb      	ldrb	r3, [r7, #3]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80049e8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80049f0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80049f2:	78fb      	ldrb	r3, [r7, #3]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049fe:	461a      	mov	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	e08e      	b.n	8004b24 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004a06:	78fa      	ldrb	r2, [r7, #3]
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	1a9b      	subs	r3, r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	440b      	add	r3, r1
 8004a14:	334d      	adds	r3, #77	@ 0x4d
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d143      	bne.n	8004aa4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a1c:	78fa      	ldrb	r2, [r7, #3]
 8004a1e:	6879      	ldr	r1, [r7, #4]
 8004a20:	4613      	mov	r3, r2
 8004a22:	011b      	lsls	r3, r3, #4
 8004a24:	1a9b      	subs	r3, r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	440b      	add	r3, r1
 8004a2a:	334d      	adds	r3, #77	@ 0x4d
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a30:	78fa      	ldrb	r2, [r7, #3]
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	4613      	mov	r3, r2
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	1a9b      	subs	r3, r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	334c      	adds	r3, #76	@ 0x4c
 8004a40:	2202      	movs	r2, #2
 8004a42:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a44:	78fa      	ldrb	r2, [r7, #3]
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	1a9b      	subs	r3, r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	440b      	add	r3, r1
 8004a52:	3326      	adds	r3, #38	@ 0x26
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004a5a:	78fa      	ldrb	r2, [r7, #3]
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	1a9b      	subs	r3, r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	3326      	adds	r3, #38	@ 0x26
 8004a6a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d159      	bne.n	8004b24 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a86:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a8e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a90:	78fb      	ldrb	r3, [r7, #3]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	e03f      	b.n	8004b24 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004aa4:	78fa      	ldrb	r2, [r7, #3]
 8004aa6:	6879      	ldr	r1, [r7, #4]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	1a9b      	subs	r3, r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	440b      	add	r3, r1
 8004ab2:	334d      	adds	r3, #77	@ 0x4d
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	2b08      	cmp	r3, #8
 8004ab8:	d126      	bne.n	8004b08 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004aba:	78fa      	ldrb	r2, [r7, #3]
 8004abc:	6879      	ldr	r1, [r7, #4]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	1a9b      	subs	r3, r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	440b      	add	r3, r1
 8004ac8:	334d      	adds	r3, #77	@ 0x4d
 8004aca:	2202      	movs	r2, #2
 8004acc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004ace:	78fa      	ldrb	r2, [r7, #3]
 8004ad0:	6879      	ldr	r1, [r7, #4]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	1a9b      	subs	r3, r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	440b      	add	r3, r1
 8004adc:	3344      	adds	r3, #68	@ 0x44
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	1c59      	adds	r1, r3, #1
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	1a9b      	subs	r3, r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4403      	add	r3, r0
 8004aee:	3344      	adds	r3, #68	@ 0x44
 8004af0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004af2:	78fa      	ldrb	r2, [r7, #3]
 8004af4:	6879      	ldr	r1, [r7, #4]
 8004af6:	4613      	mov	r3, r2
 8004af8:	011b      	lsls	r3, r3, #4
 8004afa:	1a9b      	subs	r3, r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	440b      	add	r3, r1
 8004b00:	334c      	adds	r3, #76	@ 0x4c
 8004b02:	2204      	movs	r2, #4
 8004b04:	701a      	strb	r2, [r3, #0]
 8004b06:	e00d      	b.n	8004b24 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004b08:	78fa      	ldrb	r2, [r7, #3]
 8004b0a:	6879      	ldr	r1, [r7, #4]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	1a9b      	subs	r3, r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	334d      	adds	r3, #77	@ 0x4d
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	f000 8100 	beq.w	8004d20 <HCD_HC_IN_IRQHandler+0xcca>
 8004b20:	e000      	b.n	8004b24 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b22:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b24:	78fa      	ldrb	r2, [r7, #3]
 8004b26:	6879      	ldr	r1, [r7, #4]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	011b      	lsls	r3, r3, #4
 8004b2c:	1a9b      	subs	r3, r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	440b      	add	r3, r1
 8004b32:	334c      	adds	r3, #76	@ 0x4c
 8004b34:	781a      	ldrb	r2, [r3, #0]
 8004b36:	78fb      	ldrb	r3, [r7, #3]
 8004b38:	4619      	mov	r1, r3
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f006 f97e 	bl	800ae3c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004b40:	e0ef      	b.n	8004d22 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	78fa      	ldrb	r2, [r7, #3]
 8004b48:	4611      	mov	r1, r2
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f003 f86d 	bl	8007c2a <USB_ReadChInterrupts>
 8004b50:	4603      	mov	r3, r0
 8004b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b56:	2b40      	cmp	r3, #64	@ 0x40
 8004b58:	d12f      	bne.n	8004bba <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004b5a:	78fb      	ldrb	r3, [r7, #3]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b66:	461a      	mov	r2, r3
 8004b68:	2340      	movs	r3, #64	@ 0x40
 8004b6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004b6c:	78fa      	ldrb	r2, [r7, #3]
 8004b6e:	6879      	ldr	r1, [r7, #4]
 8004b70:	4613      	mov	r3, r2
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	1a9b      	subs	r3, r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	334d      	adds	r3, #77	@ 0x4d
 8004b7c:	2205      	movs	r2, #5
 8004b7e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004b80:	78fa      	ldrb	r2, [r7, #3]
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	4613      	mov	r3, r2
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	1a9b      	subs	r3, r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	331a      	adds	r3, #26
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d109      	bne.n	8004baa <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004b96:	78fa      	ldrb	r2, [r7, #3]
 8004b98:	6879      	ldr	r1, [r7, #4]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	1a9b      	subs	r3, r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	440b      	add	r3, r1
 8004ba4:	3344      	adds	r3, #68	@ 0x44
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	78fa      	ldrb	r2, [r7, #3]
 8004bb0:	4611      	mov	r1, r2
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f003 fde3 	bl	800877e <USB_HC_Halt>
 8004bb8:	e0b3      	b.n	8004d22 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	78fa      	ldrb	r2, [r7, #3]
 8004bc0:	4611      	mov	r1, r2
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f003 f831 	bl	8007c2a <USB_ReadChInterrupts>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	f003 0310 	and.w	r3, r3, #16
 8004bce:	2b10      	cmp	r3, #16
 8004bd0:	f040 80a7 	bne.w	8004d22 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004bd4:	78fa      	ldrb	r2, [r7, #3]
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	3326      	adds	r3, #38	@ 0x26
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d11b      	bne.n	8004c22 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004bea:	78fa      	ldrb	r2, [r7, #3]
 8004bec:	6879      	ldr	r1, [r7, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	1a9b      	subs	r3, r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	3344      	adds	r3, #68	@ 0x44
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004bfe:	78fa      	ldrb	r2, [r7, #3]
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	4613      	mov	r3, r2
 8004c04:	011b      	lsls	r3, r3, #4
 8004c06:	1a9b      	subs	r3, r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	440b      	add	r3, r1
 8004c0c:	334d      	adds	r3, #77	@ 0x4d
 8004c0e:	2204      	movs	r2, #4
 8004c10:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	78fa      	ldrb	r2, [r7, #3]
 8004c18:	4611      	mov	r1, r2
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f003 fdaf 	bl	800877e <USB_HC_Halt>
 8004c20:	e03f      	b.n	8004ca2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c22:	78fa      	ldrb	r2, [r7, #3]
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	4613      	mov	r3, r2
 8004c28:	011b      	lsls	r3, r3, #4
 8004c2a:	1a9b      	subs	r3, r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	440b      	add	r3, r1
 8004c30:	3326      	adds	r3, #38	@ 0x26
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00a      	beq.n	8004c4e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004c38:	78fa      	ldrb	r2, [r7, #3]
 8004c3a:	6879      	ldr	r1, [r7, #4]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	3326      	adds	r3, #38	@ 0x26
 8004c48:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d129      	bne.n	8004ca2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004c4e:	78fa      	ldrb	r2, [r7, #3]
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	1a9b      	subs	r3, r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	3344      	adds	r3, #68	@ 0x44
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	799b      	ldrb	r3, [r3, #6]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <HCD_HC_IN_IRQHandler+0xc2a>
 8004c6a:	78fa      	ldrb	r2, [r7, #3]
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	1a9b      	subs	r3, r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	440b      	add	r3, r1
 8004c78:	331b      	adds	r3, #27
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d110      	bne.n	8004ca2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004c80:	78fa      	ldrb	r2, [r7, #3]
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	4613      	mov	r3, r2
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	1a9b      	subs	r3, r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	334d      	adds	r3, #77	@ 0x4d
 8004c90:	2204      	movs	r2, #4
 8004c92:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	78fa      	ldrb	r2, [r7, #3]
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f003 fd6e 	bl	800877e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004ca2:	78fa      	ldrb	r2, [r7, #3]
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	1a9b      	subs	r3, r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	440b      	add	r3, r1
 8004cb0:	331b      	adds	r3, #27
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d129      	bne.n	8004d0c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004cb8:	78fa      	ldrb	r2, [r7, #3]
 8004cba:	6879      	ldr	r1, [r7, #4]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	011b      	lsls	r3, r3, #4
 8004cc0:	1a9b      	subs	r3, r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	331b      	adds	r3, #27
 8004cc8:	2200      	movs	r2, #0
 8004cca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	78fa      	ldrb	r2, [r7, #3]
 8004cdc:	0151      	lsls	r1, r2, #5
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	440a      	add	r2, r1
 8004ce2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ce6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cea:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004cec:	78fb      	ldrb	r3, [r7, #3]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	78fa      	ldrb	r2, [r7, #3]
 8004cfc:	0151      	lsls	r1, r2, #5
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	440a      	add	r2, r1
 8004d02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d06:	f043 0320 	orr.w	r3, r3, #32
 8004d0a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004d0c:	78fb      	ldrb	r3, [r7, #3]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d18:	461a      	mov	r2, r3
 8004d1a:	2310      	movs	r3, #16
 8004d1c:	6093      	str	r3, [r2, #8]
 8004d1e:	e000      	b.n	8004d22 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004d20:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	460b      	mov	r3, r1
 8004d32:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	78fa      	ldrb	r2, [r7, #3]
 8004d44:	4611      	mov	r1, r2
 8004d46:	4618      	mov	r0, r3
 8004d48:	f002 ff6f 	bl	8007c2a <USB_ReadChInterrupts>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d11b      	bne.n	8004d8e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004d56:	78fb      	ldrb	r3, [r7, #3]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d62:	461a      	mov	r2, r3
 8004d64:	2304      	movs	r3, #4
 8004d66:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004d68:	78fa      	ldrb	r2, [r7, #3]
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	334d      	adds	r3, #77	@ 0x4d
 8004d78:	2207      	movs	r2, #7
 8004d7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	78fa      	ldrb	r2, [r7, #3]
 8004d82:	4611      	mov	r1, r2
 8004d84:	4618      	mov	r0, r3
 8004d86:	f003 fcfa 	bl	800877e <USB_HC_Halt>
 8004d8a:	f000 bc89 	b.w	80056a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	78fa      	ldrb	r2, [r7, #3]
 8004d94:	4611      	mov	r1, r2
 8004d96:	4618      	mov	r0, r3
 8004d98:	f002 ff47 	bl	8007c2a <USB_ReadChInterrupts>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b20      	cmp	r3, #32
 8004da4:	f040 8082 	bne.w	8004eac <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004da8:	78fb      	ldrb	r3, [r7, #3]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004db4:	461a      	mov	r2, r3
 8004db6:	2320      	movs	r3, #32
 8004db8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004dba:	78fa      	ldrb	r2, [r7, #3]
 8004dbc:	6879      	ldr	r1, [r7, #4]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	1a9b      	subs	r3, r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	440b      	add	r3, r1
 8004dc8:	3319      	adds	r3, #25
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d124      	bne.n	8004e1a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004dd0:	78fa      	ldrb	r2, [r7, #3]
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	011b      	lsls	r3, r3, #4
 8004dd8:	1a9b      	subs	r3, r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	3319      	adds	r3, #25
 8004de0:	2200      	movs	r2, #0
 8004de2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004de4:	78fa      	ldrb	r2, [r7, #3]
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	4613      	mov	r3, r2
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	334c      	adds	r3, #76	@ 0x4c
 8004df4:	2202      	movs	r2, #2
 8004df6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004df8:	78fa      	ldrb	r2, [r7, #3]
 8004dfa:	6879      	ldr	r1, [r7, #4]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	1a9b      	subs	r3, r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	334d      	adds	r3, #77	@ 0x4d
 8004e08:	2203      	movs	r2, #3
 8004e0a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	78fa      	ldrb	r2, [r7, #3]
 8004e12:	4611      	mov	r1, r2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f003 fcb2 	bl	800877e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004e1a:	78fa      	ldrb	r2, [r7, #3]
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	1a9b      	subs	r3, r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	440b      	add	r3, r1
 8004e28:	331a      	adds	r3, #26
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	f040 8437 	bne.w	80056a0 <HCD_HC_OUT_IRQHandler+0x978>
 8004e32:	78fa      	ldrb	r2, [r7, #3]
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	4613      	mov	r3, r2
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	1a9b      	subs	r3, r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	331b      	adds	r3, #27
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f040 842b 	bne.w	80056a0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004e4a:	78fa      	ldrb	r2, [r7, #3]
 8004e4c:	6879      	ldr	r1, [r7, #4]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	011b      	lsls	r3, r3, #4
 8004e52:	1a9b      	subs	r3, r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	440b      	add	r3, r1
 8004e58:	3326      	adds	r3, #38	@ 0x26
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d009      	beq.n	8004e74 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004e60:	78fa      	ldrb	r2, [r7, #3]
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	4613      	mov	r3, r2
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	1a9b      	subs	r3, r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	440b      	add	r3, r1
 8004e6e:	331b      	adds	r3, #27
 8004e70:	2201      	movs	r2, #1
 8004e72:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004e74:	78fa      	ldrb	r2, [r7, #3]
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	1a9b      	subs	r3, r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	334d      	adds	r3, #77	@ 0x4d
 8004e84:	2203      	movs	r2, #3
 8004e86:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	78fa      	ldrb	r2, [r7, #3]
 8004e8e:	4611      	mov	r1, r2
 8004e90:	4618      	mov	r0, r3
 8004e92:	f003 fc74 	bl	800877e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004e96:	78fa      	ldrb	r2, [r7, #3]
 8004e98:	6879      	ldr	r1, [r7, #4]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	011b      	lsls	r3, r3, #4
 8004e9e:	1a9b      	subs	r3, r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	440b      	add	r3, r1
 8004ea4:	3344      	adds	r3, #68	@ 0x44
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	e3f9      	b.n	80056a0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	78fa      	ldrb	r2, [r7, #3]
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f002 feb8 	bl	8007c2a <USB_ReadChInterrupts>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ec4:	d111      	bne.n	8004eea <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004ec6:	78fb      	ldrb	r3, [r7, #3]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ed8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	78fa      	ldrb	r2, [r7, #3]
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f003 fc4b 	bl	800877e <USB_HC_Halt>
 8004ee8:	e3da      	b.n	80056a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	78fa      	ldrb	r2, [r7, #3]
 8004ef0:	4611      	mov	r1, r2
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f002 fe99 	bl	8007c2a <USB_ReadChInterrupts>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d168      	bne.n	8004fd4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004f02:	78fa      	ldrb	r2, [r7, #3]
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	4613      	mov	r3, r2
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	1a9b      	subs	r3, r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	440b      	add	r3, r1
 8004f10:	3344      	adds	r3, #68	@ 0x44
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	78fa      	ldrb	r2, [r7, #3]
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f002 fe83 	bl	8007c2a <USB_ReadChInterrupts>
 8004f24:	4603      	mov	r3, r0
 8004f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f2a:	2b40      	cmp	r3, #64	@ 0x40
 8004f2c:	d112      	bne.n	8004f54 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004f2e:	78fa      	ldrb	r2, [r7, #3]
 8004f30:	6879      	ldr	r1, [r7, #4]
 8004f32:	4613      	mov	r3, r2
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	1a9b      	subs	r3, r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	440b      	add	r3, r1
 8004f3c:	3319      	adds	r3, #25
 8004f3e:	2201      	movs	r2, #1
 8004f40:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004f42:	78fb      	ldrb	r3, [r7, #3]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f4e:	461a      	mov	r2, r3
 8004f50:	2340      	movs	r3, #64	@ 0x40
 8004f52:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004f54:	78fa      	ldrb	r2, [r7, #3]
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	1a9b      	subs	r3, r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	440b      	add	r3, r1
 8004f62:	331b      	adds	r3, #27
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d019      	beq.n	8004f9e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004f6a:	78fa      	ldrb	r2, [r7, #3]
 8004f6c:	6879      	ldr	r1, [r7, #4]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	011b      	lsls	r3, r3, #4
 8004f72:	1a9b      	subs	r3, r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	440b      	add	r3, r1
 8004f78:	331b      	adds	r3, #27
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004f7e:	78fb      	ldrb	r3, [r7, #3]
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	78fa      	ldrb	r2, [r7, #3]
 8004f8e:	0151      	lsls	r1, r2, #5
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	440a      	add	r2, r1
 8004f94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f9c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004f9e:	78fb      	ldrb	r3, [r7, #3]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004faa:	461a      	mov	r2, r3
 8004fac:	2301      	movs	r3, #1
 8004fae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004fb0:	78fa      	ldrb	r2, [r7, #3]
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	1a9b      	subs	r3, r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	334d      	adds	r3, #77	@ 0x4d
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	78fa      	ldrb	r2, [r7, #3]
 8004fca:	4611      	mov	r1, r2
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f003 fbd6 	bl	800877e <USB_HC_Halt>
 8004fd2:	e365      	b.n	80056a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	78fa      	ldrb	r2, [r7, #3]
 8004fda:	4611      	mov	r1, r2
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f002 fe24 	bl	8007c2a <USB_ReadChInterrupts>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe8:	2b40      	cmp	r3, #64	@ 0x40
 8004fea:	d139      	bne.n	8005060 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004fec:	78fa      	ldrb	r2, [r7, #3]
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	1a9b      	subs	r3, r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	334d      	adds	r3, #77	@ 0x4d
 8004ffc:	2205      	movs	r2, #5
 8004ffe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005000:	78fa      	ldrb	r2, [r7, #3]
 8005002:	6879      	ldr	r1, [r7, #4]
 8005004:	4613      	mov	r3, r2
 8005006:	011b      	lsls	r3, r3, #4
 8005008:	1a9b      	subs	r3, r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	331a      	adds	r3, #26
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d109      	bne.n	800502a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005016:	78fa      	ldrb	r2, [r7, #3]
 8005018:	6879      	ldr	r1, [r7, #4]
 800501a:	4613      	mov	r3, r2
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	1a9b      	subs	r3, r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	440b      	add	r3, r1
 8005024:	3319      	adds	r3, #25
 8005026:	2201      	movs	r2, #1
 8005028:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800502a:	78fa      	ldrb	r2, [r7, #3]
 800502c:	6879      	ldr	r1, [r7, #4]
 800502e:	4613      	mov	r3, r2
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	1a9b      	subs	r3, r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	440b      	add	r3, r1
 8005038:	3344      	adds	r3, #68	@ 0x44
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	78fa      	ldrb	r2, [r7, #3]
 8005044:	4611      	mov	r1, r2
 8005046:	4618      	mov	r0, r3
 8005048:	f003 fb99 	bl	800877e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800504c:	78fb      	ldrb	r3, [r7, #3]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	4413      	add	r3, r2
 8005054:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005058:	461a      	mov	r2, r3
 800505a:	2340      	movs	r3, #64	@ 0x40
 800505c:	6093      	str	r3, [r2, #8]
 800505e:	e31f      	b.n	80056a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	78fa      	ldrb	r2, [r7, #3]
 8005066:	4611      	mov	r1, r2
 8005068:	4618      	mov	r0, r3
 800506a:	f002 fdde 	bl	8007c2a <USB_ReadChInterrupts>
 800506e:	4603      	mov	r3, r0
 8005070:	f003 0308 	and.w	r3, r3, #8
 8005074:	2b08      	cmp	r3, #8
 8005076:	d11a      	bne.n	80050ae <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005078:	78fb      	ldrb	r3, [r7, #3]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	4413      	add	r3, r2
 8005080:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005084:	461a      	mov	r2, r3
 8005086:	2308      	movs	r3, #8
 8005088:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800508a:	78fa      	ldrb	r2, [r7, #3]
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	4613      	mov	r3, r2
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	1a9b      	subs	r3, r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	440b      	add	r3, r1
 8005098:	334d      	adds	r3, #77	@ 0x4d
 800509a:	2206      	movs	r2, #6
 800509c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	78fa      	ldrb	r2, [r7, #3]
 80050a4:	4611      	mov	r1, r2
 80050a6:	4618      	mov	r0, r3
 80050a8:	f003 fb69 	bl	800877e <USB_HC_Halt>
 80050ac:	e2f8      	b.n	80056a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	78fa      	ldrb	r2, [r7, #3]
 80050b4:	4611      	mov	r1, r2
 80050b6:	4618      	mov	r0, r3
 80050b8:	f002 fdb7 	bl	8007c2a <USB_ReadChInterrupts>
 80050bc:	4603      	mov	r3, r0
 80050be:	f003 0310 	and.w	r3, r3, #16
 80050c2:	2b10      	cmp	r3, #16
 80050c4:	d144      	bne.n	8005150 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80050c6:	78fa      	ldrb	r2, [r7, #3]
 80050c8:	6879      	ldr	r1, [r7, #4]
 80050ca:	4613      	mov	r3, r2
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	1a9b      	subs	r3, r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	440b      	add	r3, r1
 80050d4:	3344      	adds	r3, #68	@ 0x44
 80050d6:	2200      	movs	r2, #0
 80050d8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80050da:	78fa      	ldrb	r2, [r7, #3]
 80050dc:	6879      	ldr	r1, [r7, #4]
 80050de:	4613      	mov	r3, r2
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	1a9b      	subs	r3, r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	440b      	add	r3, r1
 80050e8:	334d      	adds	r3, #77	@ 0x4d
 80050ea:	2204      	movs	r2, #4
 80050ec:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80050ee:	78fa      	ldrb	r2, [r7, #3]
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	4613      	mov	r3, r2
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	1a9b      	subs	r3, r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	440b      	add	r3, r1
 80050fc:	3319      	adds	r3, #25
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d114      	bne.n	800512e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005104:	78fa      	ldrb	r2, [r7, #3]
 8005106:	6879      	ldr	r1, [r7, #4]
 8005108:	4613      	mov	r3, r2
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	1a9b      	subs	r3, r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	440b      	add	r3, r1
 8005112:	3318      	adds	r3, #24
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d109      	bne.n	800512e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800511a:	78fa      	ldrb	r2, [r7, #3]
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	4613      	mov	r3, r2
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	1a9b      	subs	r3, r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	440b      	add	r3, r1
 8005128:	3319      	adds	r3, #25
 800512a:	2201      	movs	r2, #1
 800512c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	78fa      	ldrb	r2, [r7, #3]
 8005134:	4611      	mov	r1, r2
 8005136:	4618      	mov	r0, r3
 8005138:	f003 fb21 	bl	800877e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800513c:	78fb      	ldrb	r3, [r7, #3]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	4413      	add	r3, r2
 8005144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005148:	461a      	mov	r2, r3
 800514a:	2310      	movs	r3, #16
 800514c:	6093      	str	r3, [r2, #8]
 800514e:	e2a7      	b.n	80056a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	78fa      	ldrb	r2, [r7, #3]
 8005156:	4611      	mov	r1, r2
 8005158:	4618      	mov	r0, r3
 800515a:	f002 fd66 	bl	8007c2a <USB_ReadChInterrupts>
 800515e:	4603      	mov	r3, r0
 8005160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005164:	2b80      	cmp	r3, #128	@ 0x80
 8005166:	f040 8083 	bne.w	8005270 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	799b      	ldrb	r3, [r3, #6]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d111      	bne.n	8005196 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005172:	78fa      	ldrb	r2, [r7, #3]
 8005174:	6879      	ldr	r1, [r7, #4]
 8005176:	4613      	mov	r3, r2
 8005178:	011b      	lsls	r3, r3, #4
 800517a:	1a9b      	subs	r3, r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	440b      	add	r3, r1
 8005180:	334d      	adds	r3, #77	@ 0x4d
 8005182:	2207      	movs	r2, #7
 8005184:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	78fa      	ldrb	r2, [r7, #3]
 800518c:	4611      	mov	r1, r2
 800518e:	4618      	mov	r0, r3
 8005190:	f003 faf5 	bl	800877e <USB_HC_Halt>
 8005194:	e062      	b.n	800525c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005196:	78fa      	ldrb	r2, [r7, #3]
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	4613      	mov	r3, r2
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	1a9b      	subs	r3, r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	440b      	add	r3, r1
 80051a4:	3344      	adds	r3, #68	@ 0x44
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	1c59      	adds	r1, r3, #1
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	4613      	mov	r3, r2
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	1a9b      	subs	r3, r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4403      	add	r3, r0
 80051b6:	3344      	adds	r3, #68	@ 0x44
 80051b8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80051ba:	78fa      	ldrb	r2, [r7, #3]
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	1a9b      	subs	r3, r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	3344      	adds	r3, #68	@ 0x44
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d922      	bls.n	8005216 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80051d0:	78fa      	ldrb	r2, [r7, #3]
 80051d2:	6879      	ldr	r1, [r7, #4]
 80051d4:	4613      	mov	r3, r2
 80051d6:	011b      	lsls	r3, r3, #4
 80051d8:	1a9b      	subs	r3, r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	440b      	add	r3, r1
 80051de:	3344      	adds	r3, #68	@ 0x44
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80051e4:	78fa      	ldrb	r2, [r7, #3]
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	4613      	mov	r3, r2
 80051ea:	011b      	lsls	r3, r3, #4
 80051ec:	1a9b      	subs	r3, r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	440b      	add	r3, r1
 80051f2:	334c      	adds	r3, #76	@ 0x4c
 80051f4:	2204      	movs	r2, #4
 80051f6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80051f8:	78fa      	ldrb	r2, [r7, #3]
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	1a9b      	subs	r3, r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	334c      	adds	r3, #76	@ 0x4c
 8005208:	781a      	ldrb	r2, [r3, #0]
 800520a:	78fb      	ldrb	r3, [r7, #3]
 800520c:	4619      	mov	r1, r3
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f005 fe14 	bl	800ae3c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005214:	e022      	b.n	800525c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005216:	78fa      	ldrb	r2, [r7, #3]
 8005218:	6879      	ldr	r1, [r7, #4]
 800521a:	4613      	mov	r3, r2
 800521c:	011b      	lsls	r3, r3, #4
 800521e:	1a9b      	subs	r3, r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	440b      	add	r3, r1
 8005224:	334c      	adds	r3, #76	@ 0x4c
 8005226:	2202      	movs	r2, #2
 8005228:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800522a:	78fb      	ldrb	r3, [r7, #3]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	4413      	add	r3, r2
 8005232:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005240:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005248:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800524a:	78fb      	ldrb	r3, [r7, #3]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	4413      	add	r3, r2
 8005252:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005256:	461a      	mov	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800525c:	78fb      	ldrb	r3, [r7, #3]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	4413      	add	r3, r2
 8005264:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005268:	461a      	mov	r2, r3
 800526a:	2380      	movs	r3, #128	@ 0x80
 800526c:	6093      	str	r3, [r2, #8]
 800526e:	e217      	b.n	80056a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	78fa      	ldrb	r2, [r7, #3]
 8005276:	4611      	mov	r1, r2
 8005278:	4618      	mov	r0, r3
 800527a:	f002 fcd6 	bl	8007c2a <USB_ReadChInterrupts>
 800527e:	4603      	mov	r3, r0
 8005280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005288:	d11b      	bne.n	80052c2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800528a:	78fa      	ldrb	r2, [r7, #3]
 800528c:	6879      	ldr	r1, [r7, #4]
 800528e:	4613      	mov	r3, r2
 8005290:	011b      	lsls	r3, r3, #4
 8005292:	1a9b      	subs	r3, r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	440b      	add	r3, r1
 8005298:	334d      	adds	r3, #77	@ 0x4d
 800529a:	2209      	movs	r2, #9
 800529c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	78fa      	ldrb	r2, [r7, #3]
 80052a4:	4611      	mov	r1, r2
 80052a6:	4618      	mov	r0, r3
 80052a8:	f003 fa69 	bl	800877e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80052ac:	78fb      	ldrb	r3, [r7, #3]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052b8:	461a      	mov	r2, r3
 80052ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052be:	6093      	str	r3, [r2, #8]
 80052c0:	e1ee      	b.n	80056a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	78fa      	ldrb	r2, [r7, #3]
 80052c8:	4611      	mov	r1, r2
 80052ca:	4618      	mov	r0, r3
 80052cc:	f002 fcad 	bl	8007c2a <USB_ReadChInterrupts>
 80052d0:	4603      	mov	r3, r0
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	f040 81df 	bne.w	800569a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80052dc:	78fb      	ldrb	r3, [r7, #3]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052e8:	461a      	mov	r2, r3
 80052ea:	2302      	movs	r3, #2
 80052ec:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80052ee:	78fa      	ldrb	r2, [r7, #3]
 80052f0:	6879      	ldr	r1, [r7, #4]
 80052f2:	4613      	mov	r3, r2
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	1a9b      	subs	r3, r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	440b      	add	r3, r1
 80052fc:	334d      	adds	r3, #77	@ 0x4d
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	2b01      	cmp	r3, #1
 8005302:	f040 8093 	bne.w	800542c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005306:	78fa      	ldrb	r2, [r7, #3]
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	4613      	mov	r3, r2
 800530c:	011b      	lsls	r3, r3, #4
 800530e:	1a9b      	subs	r3, r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	440b      	add	r3, r1
 8005314:	334d      	adds	r3, #77	@ 0x4d
 8005316:	2202      	movs	r2, #2
 8005318:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800531a:	78fa      	ldrb	r2, [r7, #3]
 800531c:	6879      	ldr	r1, [r7, #4]
 800531e:	4613      	mov	r3, r2
 8005320:	011b      	lsls	r3, r3, #4
 8005322:	1a9b      	subs	r3, r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	440b      	add	r3, r1
 8005328:	334c      	adds	r3, #76	@ 0x4c
 800532a:	2201      	movs	r2, #1
 800532c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800532e:	78fa      	ldrb	r2, [r7, #3]
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	4613      	mov	r3, r2
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	1a9b      	subs	r3, r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	440b      	add	r3, r1
 800533c:	3326      	adds	r3, #38	@ 0x26
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b02      	cmp	r3, #2
 8005342:	d00b      	beq.n	800535c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005344:	78fa      	ldrb	r2, [r7, #3]
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	4613      	mov	r3, r2
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	1a9b      	subs	r3, r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	440b      	add	r3, r1
 8005352:	3326      	adds	r3, #38	@ 0x26
 8005354:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005356:	2b03      	cmp	r3, #3
 8005358:	f040 8190 	bne.w	800567c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	799b      	ldrb	r3, [r3, #6]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d115      	bne.n	8005390 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005364:	78fa      	ldrb	r2, [r7, #3]
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	4613      	mov	r3, r2
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	1a9b      	subs	r3, r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	440b      	add	r3, r1
 8005372:	333d      	adds	r3, #61	@ 0x3d
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	78fa      	ldrb	r2, [r7, #3]
 8005378:	f083 0301 	eor.w	r3, r3, #1
 800537c:	b2d8      	uxtb	r0, r3
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	4613      	mov	r3, r2
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	1a9b      	subs	r3, r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	440b      	add	r3, r1
 800538a:	333d      	adds	r3, #61	@ 0x3d
 800538c:	4602      	mov	r2, r0
 800538e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	799b      	ldrb	r3, [r3, #6]
 8005394:	2b01      	cmp	r3, #1
 8005396:	f040 8171 	bne.w	800567c <HCD_HC_OUT_IRQHandler+0x954>
 800539a:	78fa      	ldrb	r2, [r7, #3]
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	1a9b      	subs	r3, r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	3334      	adds	r3, #52	@ 0x34
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 8165 	beq.w	800567c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80053b2:	78fa      	ldrb	r2, [r7, #3]
 80053b4:	6879      	ldr	r1, [r7, #4]
 80053b6:	4613      	mov	r3, r2
 80053b8:	011b      	lsls	r3, r3, #4
 80053ba:	1a9b      	subs	r3, r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	440b      	add	r3, r1
 80053c0:	3334      	adds	r3, #52	@ 0x34
 80053c2:	6819      	ldr	r1, [r3, #0]
 80053c4:	78fa      	ldrb	r2, [r7, #3]
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	4613      	mov	r3, r2
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4403      	add	r3, r0
 80053d2:	3328      	adds	r3, #40	@ 0x28
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	440b      	add	r3, r1
 80053d8:	1e59      	subs	r1, r3, #1
 80053da:	78fa      	ldrb	r2, [r7, #3]
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	4613      	mov	r3, r2
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	1a9b      	subs	r3, r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4403      	add	r3, r0
 80053e8:	3328      	adds	r3, #40	@ 0x28
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80053f0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 813f 	beq.w	800567c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80053fe:	78fa      	ldrb	r2, [r7, #3]
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	4613      	mov	r3, r2
 8005404:	011b      	lsls	r3, r3, #4
 8005406:	1a9b      	subs	r3, r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	440b      	add	r3, r1
 800540c:	333d      	adds	r3, #61	@ 0x3d
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	78fa      	ldrb	r2, [r7, #3]
 8005412:	f083 0301 	eor.w	r3, r3, #1
 8005416:	b2d8      	uxtb	r0, r3
 8005418:	6879      	ldr	r1, [r7, #4]
 800541a:	4613      	mov	r3, r2
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	440b      	add	r3, r1
 8005424:	333d      	adds	r3, #61	@ 0x3d
 8005426:	4602      	mov	r2, r0
 8005428:	701a      	strb	r2, [r3, #0]
 800542a:	e127      	b.n	800567c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800542c:	78fa      	ldrb	r2, [r7, #3]
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	4613      	mov	r3, r2
 8005432:	011b      	lsls	r3, r3, #4
 8005434:	1a9b      	subs	r3, r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	334d      	adds	r3, #77	@ 0x4d
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b03      	cmp	r3, #3
 8005440:	d120      	bne.n	8005484 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005442:	78fa      	ldrb	r2, [r7, #3]
 8005444:	6879      	ldr	r1, [r7, #4]
 8005446:	4613      	mov	r3, r2
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	1a9b      	subs	r3, r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	440b      	add	r3, r1
 8005450:	334d      	adds	r3, #77	@ 0x4d
 8005452:	2202      	movs	r2, #2
 8005454:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005456:	78fa      	ldrb	r2, [r7, #3]
 8005458:	6879      	ldr	r1, [r7, #4]
 800545a:	4613      	mov	r3, r2
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	1a9b      	subs	r3, r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	440b      	add	r3, r1
 8005464:	331b      	adds	r3, #27
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b01      	cmp	r3, #1
 800546a:	f040 8107 	bne.w	800567c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800546e:	78fa      	ldrb	r2, [r7, #3]
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	4613      	mov	r3, r2
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	1a9b      	subs	r3, r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	440b      	add	r3, r1
 800547c:	334c      	adds	r3, #76	@ 0x4c
 800547e:	2202      	movs	r2, #2
 8005480:	701a      	strb	r2, [r3, #0]
 8005482:	e0fb      	b.n	800567c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005484:	78fa      	ldrb	r2, [r7, #3]
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	4613      	mov	r3, r2
 800548a:	011b      	lsls	r3, r3, #4
 800548c:	1a9b      	subs	r3, r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	440b      	add	r3, r1
 8005492:	334d      	adds	r3, #77	@ 0x4d
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2b04      	cmp	r3, #4
 8005498:	d13a      	bne.n	8005510 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800549a:	78fa      	ldrb	r2, [r7, #3]
 800549c:	6879      	ldr	r1, [r7, #4]
 800549e:	4613      	mov	r3, r2
 80054a0:	011b      	lsls	r3, r3, #4
 80054a2:	1a9b      	subs	r3, r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	440b      	add	r3, r1
 80054a8:	334d      	adds	r3, #77	@ 0x4d
 80054aa:	2202      	movs	r2, #2
 80054ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80054ae:	78fa      	ldrb	r2, [r7, #3]
 80054b0:	6879      	ldr	r1, [r7, #4]
 80054b2:	4613      	mov	r3, r2
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	1a9b      	subs	r3, r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	440b      	add	r3, r1
 80054bc:	334c      	adds	r3, #76	@ 0x4c
 80054be:	2202      	movs	r2, #2
 80054c0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80054c2:	78fa      	ldrb	r2, [r7, #3]
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	4613      	mov	r3, r2
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	440b      	add	r3, r1
 80054d0:	331b      	adds	r3, #27
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	f040 80d1 	bne.w	800567c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80054da:	78fa      	ldrb	r2, [r7, #3]
 80054dc:	6879      	ldr	r1, [r7, #4]
 80054de:	4613      	mov	r3, r2
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	1a9b      	subs	r3, r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	440b      	add	r3, r1
 80054e8:	331b      	adds	r3, #27
 80054ea:	2200      	movs	r2, #0
 80054ec:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80054ee:	78fb      	ldrb	r3, [r7, #3]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	78fa      	ldrb	r2, [r7, #3]
 80054fe:	0151      	lsls	r1, r2, #5
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	440a      	add	r2, r1
 8005504:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005508:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800550c:	6053      	str	r3, [r2, #4]
 800550e:	e0b5      	b.n	800567c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005510:	78fa      	ldrb	r2, [r7, #3]
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	4613      	mov	r3, r2
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	1a9b      	subs	r3, r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	334d      	adds	r3, #77	@ 0x4d
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	2b05      	cmp	r3, #5
 8005524:	d114      	bne.n	8005550 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005526:	78fa      	ldrb	r2, [r7, #3]
 8005528:	6879      	ldr	r1, [r7, #4]
 800552a:	4613      	mov	r3, r2
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	1a9b      	subs	r3, r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	440b      	add	r3, r1
 8005534:	334d      	adds	r3, #77	@ 0x4d
 8005536:	2202      	movs	r2, #2
 8005538:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800553a:	78fa      	ldrb	r2, [r7, #3]
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	4613      	mov	r3, r2
 8005540:	011b      	lsls	r3, r3, #4
 8005542:	1a9b      	subs	r3, r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	440b      	add	r3, r1
 8005548:	334c      	adds	r3, #76	@ 0x4c
 800554a:	2202      	movs	r2, #2
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	e095      	b.n	800567c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005550:	78fa      	ldrb	r2, [r7, #3]
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	4613      	mov	r3, r2
 8005556:	011b      	lsls	r3, r3, #4
 8005558:	1a9b      	subs	r3, r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	440b      	add	r3, r1
 800555e:	334d      	adds	r3, #77	@ 0x4d
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	2b06      	cmp	r3, #6
 8005564:	d114      	bne.n	8005590 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005566:	78fa      	ldrb	r2, [r7, #3]
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	4613      	mov	r3, r2
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	1a9b      	subs	r3, r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	440b      	add	r3, r1
 8005574:	334d      	adds	r3, #77	@ 0x4d
 8005576:	2202      	movs	r2, #2
 8005578:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800557a:	78fa      	ldrb	r2, [r7, #3]
 800557c:	6879      	ldr	r1, [r7, #4]
 800557e:	4613      	mov	r3, r2
 8005580:	011b      	lsls	r3, r3, #4
 8005582:	1a9b      	subs	r3, r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	440b      	add	r3, r1
 8005588:	334c      	adds	r3, #76	@ 0x4c
 800558a:	2205      	movs	r2, #5
 800558c:	701a      	strb	r2, [r3, #0]
 800558e:	e075      	b.n	800567c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005590:	78fa      	ldrb	r2, [r7, #3]
 8005592:	6879      	ldr	r1, [r7, #4]
 8005594:	4613      	mov	r3, r2
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	1a9b      	subs	r3, r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	440b      	add	r3, r1
 800559e:	334d      	adds	r3, #77	@ 0x4d
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	2b07      	cmp	r3, #7
 80055a4:	d00a      	beq.n	80055bc <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80055a6:	78fa      	ldrb	r2, [r7, #3]
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	4613      	mov	r3, r2
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	1a9b      	subs	r3, r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	440b      	add	r3, r1
 80055b4:	334d      	adds	r3, #77	@ 0x4d
 80055b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80055b8:	2b09      	cmp	r3, #9
 80055ba:	d170      	bne.n	800569e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055bc:	78fa      	ldrb	r2, [r7, #3]
 80055be:	6879      	ldr	r1, [r7, #4]
 80055c0:	4613      	mov	r3, r2
 80055c2:	011b      	lsls	r3, r3, #4
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	440b      	add	r3, r1
 80055ca:	334d      	adds	r3, #77	@ 0x4d
 80055cc:	2202      	movs	r2, #2
 80055ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80055d0:	78fa      	ldrb	r2, [r7, #3]
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	4613      	mov	r3, r2
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	1a9b      	subs	r3, r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	440b      	add	r3, r1
 80055de:	3344      	adds	r3, #68	@ 0x44
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	1c59      	adds	r1, r3, #1
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	4613      	mov	r3, r2
 80055e8:	011b      	lsls	r3, r3, #4
 80055ea:	1a9b      	subs	r3, r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4403      	add	r3, r0
 80055f0:	3344      	adds	r3, #68	@ 0x44
 80055f2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80055f4:	78fa      	ldrb	r2, [r7, #3]
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	4613      	mov	r3, r2
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	1a9b      	subs	r3, r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	440b      	add	r3, r1
 8005602:	3344      	adds	r3, #68	@ 0x44
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b02      	cmp	r3, #2
 8005608:	d914      	bls.n	8005634 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800560a:	78fa      	ldrb	r2, [r7, #3]
 800560c:	6879      	ldr	r1, [r7, #4]
 800560e:	4613      	mov	r3, r2
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	1a9b      	subs	r3, r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	440b      	add	r3, r1
 8005618:	3344      	adds	r3, #68	@ 0x44
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800561e:	78fa      	ldrb	r2, [r7, #3]
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	4613      	mov	r3, r2
 8005624:	011b      	lsls	r3, r3, #4
 8005626:	1a9b      	subs	r3, r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	334c      	adds	r3, #76	@ 0x4c
 800562e:	2204      	movs	r2, #4
 8005630:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005632:	e022      	b.n	800567a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005634:	78fa      	ldrb	r2, [r7, #3]
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	4613      	mov	r3, r2
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	1a9b      	subs	r3, r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	334c      	adds	r3, #76	@ 0x4c
 8005644:	2202      	movs	r2, #2
 8005646:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005648:	78fb      	ldrb	r3, [r7, #3]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	4413      	add	r3, r2
 8005650:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800565e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005666:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005668:	78fb      	ldrb	r3, [r7, #3]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	4413      	add	r3, r2
 8005670:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005674:	461a      	mov	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800567a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800567c:	78fa      	ldrb	r2, [r7, #3]
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	4613      	mov	r3, r2
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	1a9b      	subs	r3, r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	334c      	adds	r3, #76	@ 0x4c
 800568c:	781a      	ldrb	r2, [r3, #0]
 800568e:	78fb      	ldrb	r3, [r7, #3]
 8005690:	4619      	mov	r1, r3
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f005 fbd2 	bl	800ae3c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005698:	e002      	b.n	80056a0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800569a:	bf00      	nop
 800569c:	e000      	b.n	80056a0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800569e:	bf00      	nop
  }
}
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b08a      	sub	sp, #40	@ 0x28
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	f003 030f 	and.w	r3, r3, #15
 80056c6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	0c5b      	lsrs	r3, r3, #17
 80056cc:	f003 030f 	and.w	r3, r3, #15
 80056d0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	091b      	lsrs	r3, r3, #4
 80056d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056da:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d004      	beq.n	80056ec <HCD_RXQLVL_IRQHandler+0x46>
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b05      	cmp	r3, #5
 80056e6:	f000 80b6 	beq.w	8005856 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80056ea:	e0b7      	b.n	800585c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 80b3 	beq.w	800585a <HCD_RXQLVL_IRQHandler+0x1b4>
 80056f4:	6879      	ldr	r1, [r7, #4]
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	4613      	mov	r3, r2
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	1a9b      	subs	r3, r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	440b      	add	r3, r1
 8005702:	332c      	adds	r3, #44	@ 0x2c
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 80a7 	beq.w	800585a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	4613      	mov	r3, r2
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	1a9b      	subs	r3, r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	440b      	add	r3, r1
 800571a:	3338      	adds	r3, #56	@ 0x38
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	18d1      	adds	r1, r2, r3
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	4613      	mov	r3, r2
 8005728:	011b      	lsls	r3, r3, #4
 800572a:	1a9b      	subs	r3, r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4403      	add	r3, r0
 8005730:	3334      	adds	r3, #52	@ 0x34
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4299      	cmp	r1, r3
 8005736:	f200 8083 	bhi.w	8005840 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6818      	ldr	r0, [r3, #0]
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	4613      	mov	r3, r2
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	1a9b      	subs	r3, r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	440b      	add	r3, r1
 800574c:	332c      	adds	r3, #44	@ 0x2c
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	b292      	uxth	r2, r2
 8005754:	4619      	mov	r1, r3
 8005756:	f002 f9fd 	bl	8007b54 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800575a:	6879      	ldr	r1, [r7, #4]
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	4613      	mov	r3, r2
 8005760:	011b      	lsls	r3, r3, #4
 8005762:	1a9b      	subs	r3, r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	440b      	add	r3, r1
 8005768:	332c      	adds	r3, #44	@ 0x2c
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	18d1      	adds	r1, r2, r3
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	4613      	mov	r3, r2
 8005776:	011b      	lsls	r3, r3, #4
 8005778:	1a9b      	subs	r3, r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4403      	add	r3, r0
 800577e:	332c      	adds	r3, #44	@ 0x2c
 8005780:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	4613      	mov	r3, r2
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	1a9b      	subs	r3, r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	440b      	add	r3, r1
 8005790:	3338      	adds	r3, #56	@ 0x38
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	18d1      	adds	r1, r2, r3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	4613      	mov	r3, r2
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	1a9b      	subs	r3, r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4403      	add	r3, r0
 80057a6:	3338      	adds	r3, #56	@ 0x38
 80057a8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	0cdb      	lsrs	r3, r3, #19
 80057ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057be:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80057c0:	6879      	ldr	r1, [r7, #4]
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	4613      	mov	r3, r2
 80057c6:	011b      	lsls	r3, r3, #4
 80057c8:	1a9b      	subs	r3, r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	440b      	add	r3, r1
 80057ce:	3328      	adds	r3, #40	@ 0x28
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d13f      	bne.n	800585a <HCD_RXQLVL_IRQHandler+0x1b4>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d03c      	beq.n	800585a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80057f6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80057fe:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	4413      	add	r3, r2
 8005808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800580c:	461a      	mov	r2, r3
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	4613      	mov	r3, r2
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	1a9b      	subs	r3, r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	333c      	adds	r3, #60	@ 0x3c
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	f083 0301 	eor.w	r3, r3, #1
 8005828:	b2d8      	uxtb	r0, r3
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	4613      	mov	r3, r2
 8005830:	011b      	lsls	r3, r3, #4
 8005832:	1a9b      	subs	r3, r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	440b      	add	r3, r1
 8005838:	333c      	adds	r3, #60	@ 0x3c
 800583a:	4602      	mov	r2, r0
 800583c:	701a      	strb	r2, [r3, #0]
      break;
 800583e:	e00c      	b.n	800585a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	4613      	mov	r3, r2
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	1a9b      	subs	r3, r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	440b      	add	r3, r1
 800584e:	334c      	adds	r3, #76	@ 0x4c
 8005850:	2204      	movs	r2, #4
 8005852:	701a      	strb	r2, [r3, #0]
      break;
 8005854:	e001      	b.n	800585a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005856:	bf00      	nop
 8005858:	e000      	b.n	800585c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800585a:	bf00      	nop
  }
}
 800585c:	bf00      	nop
 800585e:	3728      	adds	r7, #40	@ 0x28
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005890:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b02      	cmp	r3, #2
 800589a:	d10b      	bne.n	80058b4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d102      	bne.n	80058ac <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f005 faac 	bl	800ae04 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f043 0302 	orr.w	r3, r3, #2
 80058b2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b08      	cmp	r3, #8
 80058bc:	d132      	bne.n	8005924 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	f043 0308 	orr.w	r3, r3, #8
 80058c4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d126      	bne.n	800591e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	7a5b      	ldrb	r3, [r3, #9]
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d113      	bne.n	8005900 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80058de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058e2:	d106      	bne.n	80058f2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2102      	movs	r1, #2
 80058ea:	4618      	mov	r0, r3
 80058ec:	f002 fac8 	bl	8007e80 <USB_InitFSLSPClkSel>
 80058f0:	e011      	b.n	8005916 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2101      	movs	r1, #1
 80058f8:	4618      	mov	r0, r3
 80058fa:	f002 fac1 	bl	8007e80 <USB_InitFSLSPClkSel>
 80058fe:	e00a      	b.n	8005916 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	79db      	ldrb	r3, [r3, #7]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d106      	bne.n	8005916 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800590e:	461a      	mov	r2, r3
 8005910:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005914:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f005 fa9e 	bl	800ae58 <HAL_HCD_PortEnabled_Callback>
 800591c:	e002      	b.n	8005924 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f005 faa8 	bl	800ae74 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b20      	cmp	r3, #32
 800592c:	d103      	bne.n	8005936 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f043 0320 	orr.w	r3, r3, #32
 8005934:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800593c:	461a      	mov	r2, r3
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	6013      	str	r3, [r2, #0]
}
 8005942:	bf00      	nop
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e12b      	b.n	8005bb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7fb fff2 	bl	800195c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2224      	movs	r2, #36	@ 0x24
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0201 	bic.w	r2, r2, #1
 800598e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800599e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80059b0:	f000 fd80 	bl	80064b4 <HAL_RCC_GetPCLK1Freq>
 80059b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	4a81      	ldr	r2, [pc, #516]	@ (8005bc0 <HAL_I2C_Init+0x274>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d807      	bhi.n	80059d0 <HAL_I2C_Init+0x84>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4a80      	ldr	r2, [pc, #512]	@ (8005bc4 <HAL_I2C_Init+0x278>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	bf94      	ite	ls
 80059c8:	2301      	movls	r3, #1
 80059ca:	2300      	movhi	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	e006      	b.n	80059de <HAL_I2C_Init+0x92>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4a7d      	ldr	r2, [pc, #500]	@ (8005bc8 <HAL_I2C_Init+0x27c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	bf94      	ite	ls
 80059d8:	2301      	movls	r3, #1
 80059da:	2300      	movhi	r3, #0
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e0e7      	b.n	8005bb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	4a78      	ldr	r2, [pc, #480]	@ (8005bcc <HAL_I2C_Init+0x280>)
 80059ea:	fba2 2303 	umull	r2, r3, r2, r3
 80059ee:	0c9b      	lsrs	r3, r3, #18
 80059f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	4a6a      	ldr	r2, [pc, #424]	@ (8005bc0 <HAL_I2C_Init+0x274>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d802      	bhi.n	8005a20 <HAL_I2C_Init+0xd4>
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	e009      	b.n	8005a34 <HAL_I2C_Init+0xe8>
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005a26:	fb02 f303 	mul.w	r3, r2, r3
 8005a2a:	4a69      	ldr	r2, [pc, #420]	@ (8005bd0 <HAL_I2C_Init+0x284>)
 8005a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a30:	099b      	lsrs	r3, r3, #6
 8005a32:	3301      	adds	r3, #1
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	6812      	ldr	r2, [r2, #0]
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005a46:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	495c      	ldr	r1, [pc, #368]	@ (8005bc0 <HAL_I2C_Init+0x274>)
 8005a50:	428b      	cmp	r3, r1
 8005a52:	d819      	bhi.n	8005a88 <HAL_I2C_Init+0x13c>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	1e59      	subs	r1, r3, #1
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a62:	1c59      	adds	r1, r3, #1
 8005a64:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005a68:	400b      	ands	r3, r1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <HAL_I2C_Init+0x138>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	1e59      	subs	r1, r3, #1
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a82:	e051      	b.n	8005b28 <HAL_I2C_Init+0x1dc>
 8005a84:	2304      	movs	r3, #4
 8005a86:	e04f      	b.n	8005b28 <HAL_I2C_Init+0x1dc>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d111      	bne.n	8005ab4 <HAL_I2C_Init+0x168>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	1e58      	subs	r0, r3, #1
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6859      	ldr	r1, [r3, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	440b      	add	r3, r1
 8005a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	bf0c      	ite	eq
 8005aac:	2301      	moveq	r3, #1
 8005aae:	2300      	movne	r3, #0
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	e012      	b.n	8005ada <HAL_I2C_Init+0x18e>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	1e58      	subs	r0, r3, #1
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6859      	ldr	r1, [r3, #4]
 8005abc:	460b      	mov	r3, r1
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	440b      	add	r3, r1
 8005ac2:	0099      	lsls	r1, r3, #2
 8005ac4:	440b      	add	r3, r1
 8005ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aca:	3301      	adds	r3, #1
 8005acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	bf0c      	ite	eq
 8005ad4:	2301      	moveq	r3, #1
 8005ad6:	2300      	movne	r3, #0
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <HAL_I2C_Init+0x196>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e022      	b.n	8005b28 <HAL_I2C_Init+0x1dc>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10e      	bne.n	8005b08 <HAL_I2C_Init+0x1bc>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	1e58      	subs	r0, r3, #1
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6859      	ldr	r1, [r3, #4]
 8005af2:	460b      	mov	r3, r1
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	440b      	add	r3, r1
 8005af8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005afc:	3301      	adds	r3, #1
 8005afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b06:	e00f      	b.n	8005b28 <HAL_I2C_Init+0x1dc>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	1e58      	subs	r0, r3, #1
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6859      	ldr	r1, [r3, #4]
 8005b10:	460b      	mov	r3, r1
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	440b      	add	r3, r1
 8005b16:	0099      	lsls	r1, r3, #2
 8005b18:	440b      	add	r3, r1
 8005b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b1e:	3301      	adds	r3, #1
 8005b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b28:	6879      	ldr	r1, [r7, #4]
 8005b2a:	6809      	ldr	r1, [r1, #0]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	69da      	ldr	r2, [r3, #28]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	431a      	orrs	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005b56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6911      	ldr	r1, [r2, #16]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	68d2      	ldr	r2, [r2, #12]
 8005b62:	4311      	orrs	r1, r2
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6812      	ldr	r2, [r2, #0]
 8005b68:	430b      	orrs	r3, r1
 8005b6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	695a      	ldr	r2, [r3, #20]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0201 	orr.w	r2, r2, #1
 8005b96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	000186a0 	.word	0x000186a0
 8005bc4:	001e847f 	.word	0x001e847f
 8005bc8:	003d08ff 	.word	0x003d08ff
 8005bcc:	431bde83 	.word	0x431bde83
 8005bd0:	10624dd3 	.word	0x10624dd3

08005bd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e267      	b.n	80060b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d075      	beq.n	8005cde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005bf2:	4b88      	ldr	r3, [pc, #544]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f003 030c 	and.w	r3, r3, #12
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d00c      	beq.n	8005c18 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bfe:	4b85      	ldr	r3, [pc, #532]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	d112      	bne.n	8005c30 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c0a:	4b82      	ldr	r3, [pc, #520]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c16:	d10b      	bne.n	8005c30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c18:	4b7e      	ldr	r3, [pc, #504]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d05b      	beq.n	8005cdc <HAL_RCC_OscConfig+0x108>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d157      	bne.n	8005cdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e242      	b.n	80060b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c38:	d106      	bne.n	8005c48 <HAL_RCC_OscConfig+0x74>
 8005c3a:	4b76      	ldr	r3, [pc, #472]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a75      	ldr	r2, [pc, #468]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	e01d      	b.n	8005c84 <HAL_RCC_OscConfig+0xb0>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c50:	d10c      	bne.n	8005c6c <HAL_RCC_OscConfig+0x98>
 8005c52:	4b70      	ldr	r3, [pc, #448]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a6f      	ldr	r2, [pc, #444]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005c58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c5c:	6013      	str	r3, [r2, #0]
 8005c5e:	4b6d      	ldr	r3, [pc, #436]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a6c      	ldr	r2, [pc, #432]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	e00b      	b.n	8005c84 <HAL_RCC_OscConfig+0xb0>
 8005c6c:	4b69      	ldr	r3, [pc, #420]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a68      	ldr	r2, [pc, #416]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005c72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c76:	6013      	str	r3, [r2, #0]
 8005c78:	4b66      	ldr	r3, [pc, #408]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a65      	ldr	r2, [pc, #404]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005c7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d013      	beq.n	8005cb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c8c:	f7fc f956 	bl	8001f3c <HAL_GetTick>
 8005c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c92:	e008      	b.n	8005ca6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c94:	f7fc f952 	bl	8001f3c <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b64      	cmp	r3, #100	@ 0x64
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e207      	b.n	80060b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ca6:	4b5b      	ldr	r3, [pc, #364]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d0f0      	beq.n	8005c94 <HAL_RCC_OscConfig+0xc0>
 8005cb2:	e014      	b.n	8005cde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cb4:	f7fc f942 	bl	8001f3c <HAL_GetTick>
 8005cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cba:	e008      	b.n	8005cce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cbc:	f7fc f93e 	bl	8001f3c <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b64      	cmp	r3, #100	@ 0x64
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e1f3      	b.n	80060b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cce:	4b51      	ldr	r3, [pc, #324]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1f0      	bne.n	8005cbc <HAL_RCC_OscConfig+0xe8>
 8005cda:	e000      	b.n	8005cde <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d063      	beq.n	8005db2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005cea:	4b4a      	ldr	r3, [pc, #296]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f003 030c 	and.w	r3, r3, #12
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00b      	beq.n	8005d0e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cf6:	4b47      	ldr	r3, [pc, #284]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005cfe:	2b08      	cmp	r3, #8
 8005d00:	d11c      	bne.n	8005d3c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d02:	4b44      	ldr	r3, [pc, #272]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d116      	bne.n	8005d3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d0e:	4b41      	ldr	r3, [pc, #260]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d005      	beq.n	8005d26 <HAL_RCC_OscConfig+0x152>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d001      	beq.n	8005d26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e1c7      	b.n	80060b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d26:	4b3b      	ldr	r3, [pc, #236]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	4937      	ldr	r1, [pc, #220]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d3a:	e03a      	b.n	8005db2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d020      	beq.n	8005d86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d44:	4b34      	ldr	r3, [pc, #208]	@ (8005e18 <HAL_RCC_OscConfig+0x244>)
 8005d46:	2201      	movs	r2, #1
 8005d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d4a:	f7fc f8f7 	bl	8001f3c <HAL_GetTick>
 8005d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d50:	e008      	b.n	8005d64 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d52:	f7fc f8f3 	bl	8001f3c <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d901      	bls.n	8005d64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e1a8      	b.n	80060b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d64:	4b2b      	ldr	r3, [pc, #172]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d0f0      	beq.n	8005d52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d70:	4b28      	ldr	r3, [pc, #160]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	4925      	ldr	r1, [pc, #148]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	600b      	str	r3, [r1, #0]
 8005d84:	e015      	b.n	8005db2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d86:	4b24      	ldr	r3, [pc, #144]	@ (8005e18 <HAL_RCC_OscConfig+0x244>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8c:	f7fc f8d6 	bl	8001f3c <HAL_GetTick>
 8005d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d92:	e008      	b.n	8005da6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d94:	f7fc f8d2 	bl	8001f3c <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e187      	b.n	80060b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005da6:	4b1b      	ldr	r3, [pc, #108]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1f0      	bne.n	8005d94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0308 	and.w	r3, r3, #8
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d036      	beq.n	8005e2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d016      	beq.n	8005df4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dc6:	4b15      	ldr	r3, [pc, #84]	@ (8005e1c <HAL_RCC_OscConfig+0x248>)
 8005dc8:	2201      	movs	r2, #1
 8005dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dcc:	f7fc f8b6 	bl	8001f3c <HAL_GetTick>
 8005dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dd2:	e008      	b.n	8005de6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dd4:	f7fc f8b2 	bl	8001f3c <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d901      	bls.n	8005de6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e167      	b.n	80060b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005de6:	4b0b      	ldr	r3, [pc, #44]	@ (8005e14 <HAL_RCC_OscConfig+0x240>)
 8005de8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d0f0      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x200>
 8005df2:	e01b      	b.n	8005e2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005df4:	4b09      	ldr	r3, [pc, #36]	@ (8005e1c <HAL_RCC_OscConfig+0x248>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dfa:	f7fc f89f 	bl	8001f3c <HAL_GetTick>
 8005dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e00:	e00e      	b.n	8005e20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e02:	f7fc f89b 	bl	8001f3c <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d907      	bls.n	8005e20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e150      	b.n	80060b6 <HAL_RCC_OscConfig+0x4e2>
 8005e14:	40023800 	.word	0x40023800
 8005e18:	42470000 	.word	0x42470000
 8005e1c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e20:	4b88      	ldr	r3, [pc, #544]	@ (8006044 <HAL_RCC_OscConfig+0x470>)
 8005e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1ea      	bne.n	8005e02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0304 	and.w	r3, r3, #4
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 8097 	beq.w	8005f68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e3e:	4b81      	ldr	r3, [pc, #516]	@ (8006044 <HAL_RCC_OscConfig+0x470>)
 8005e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10f      	bne.n	8005e6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60bb      	str	r3, [r7, #8]
 8005e4e:	4b7d      	ldr	r3, [pc, #500]	@ (8006044 <HAL_RCC_OscConfig+0x470>)
 8005e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e52:	4a7c      	ldr	r2, [pc, #496]	@ (8006044 <HAL_RCC_OscConfig+0x470>)
 8005e54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e58:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e5a:	4b7a      	ldr	r3, [pc, #488]	@ (8006044 <HAL_RCC_OscConfig+0x470>)
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e62:	60bb      	str	r3, [r7, #8]
 8005e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e66:	2301      	movs	r3, #1
 8005e68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e6a:	4b77      	ldr	r3, [pc, #476]	@ (8006048 <HAL_RCC_OscConfig+0x474>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d118      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e76:	4b74      	ldr	r3, [pc, #464]	@ (8006048 <HAL_RCC_OscConfig+0x474>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a73      	ldr	r2, [pc, #460]	@ (8006048 <HAL_RCC_OscConfig+0x474>)
 8005e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e82:	f7fc f85b 	bl	8001f3c <HAL_GetTick>
 8005e86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e88:	e008      	b.n	8005e9c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e8a:	f7fc f857 	bl	8001f3c <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d901      	bls.n	8005e9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e10c      	b.n	80060b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e9c:	4b6a      	ldr	r3, [pc, #424]	@ (8006048 <HAL_RCC_OscConfig+0x474>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0f0      	beq.n	8005e8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d106      	bne.n	8005ebe <HAL_RCC_OscConfig+0x2ea>
 8005eb0:	4b64      	ldr	r3, [pc, #400]	@ (8006044 <HAL_RCC_OscConfig+0x470>)
 8005eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eb4:	4a63      	ldr	r2, [pc, #396]	@ (8006044 <HAL_RCC_OscConfig+0x470>)
 8005eb6:	f043 0301 	orr.w	r3, r3, #1
 8005eba:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ebc:	e01c      	b.n	8005ef8 <HAL_RCC_OscConfig+0x324>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	2b05      	cmp	r3, #5
 8005ec4:	d10c      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x30c>
 8005ec6:	4b5f      	ldr	r3, [pc, #380]	@ (8006044 <HAL_RCC_OscConfig+0x470>)
 8005ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eca:	4a5e      	ldr	r2, [pc, #376]	@ (8006044 <HAL_RCC_OscConfig+0x470>)
 8005ecc:	f043 0304 	orr.w	r3, r3, #4
 8005ed0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ed2:	4b5c      	ldr	r3, [pc, #368]	@ (8006044 <HAL_RCC_OscConfig+0x470>)
 8005ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ed6:	4a5b      	ldr	r2, [pc, #364]	@ (8006044 <HAL_RCC_OscConfig+0x470>)
 8005ed8:	f043 0301 	orr.w	r3, r3, #1
 8005edc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ede:	e00b      	b.n	8005ef8 <HAL_RCC_OscConfig+0x324>
 8005ee0:	4b58      	ldr	r3, [pc, #352]	@ (8006044 <HAL_RCC_OscConfig+0x470>)
 8005ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ee4:	4a57      	ldr	r2, [pc, #348]	@ (8006044 <HAL_RCC_OscConfig+0x470>)
 8005ee6:	f023 0301 	bic.w	r3, r3, #1
 8005eea:	6713      	str	r3, [r2, #112]	@ 0x70
 8005eec:	4b55      	ldr	r3, [pc, #340]	@ (8006044 <HAL_RCC_OscConfig+0x470>)
 8005eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef0:	4a54      	ldr	r2, [pc, #336]	@ (8006044 <HAL_RCC_OscConfig+0x470>)
 8005ef2:	f023 0304 	bic.w	r3, r3, #4
 8005ef6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d015      	beq.n	8005f2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f00:	f7fc f81c 	bl	8001f3c <HAL_GetTick>
 8005f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f06:	e00a      	b.n	8005f1e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f08:	f7fc f818 	bl	8001f3c <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e0cb      	b.n	80060b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f1e:	4b49      	ldr	r3, [pc, #292]	@ (8006044 <HAL_RCC_OscConfig+0x470>)
 8005f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f22:	f003 0302 	and.w	r3, r3, #2
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d0ee      	beq.n	8005f08 <HAL_RCC_OscConfig+0x334>
 8005f2a:	e014      	b.n	8005f56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f2c:	f7fc f806 	bl	8001f3c <HAL_GetTick>
 8005f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f32:	e00a      	b.n	8005f4a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f34:	f7fc f802 	bl	8001f3c <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e0b5      	b.n	80060b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f4a:	4b3e      	ldr	r3, [pc, #248]	@ (8006044 <HAL_RCC_OscConfig+0x470>)
 8005f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1ee      	bne.n	8005f34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f56:	7dfb      	ldrb	r3, [r7, #23]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d105      	bne.n	8005f68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f5c:	4b39      	ldr	r3, [pc, #228]	@ (8006044 <HAL_RCC_OscConfig+0x470>)
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f60:	4a38      	ldr	r2, [pc, #224]	@ (8006044 <HAL_RCC_OscConfig+0x470>)
 8005f62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 80a1 	beq.w	80060b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f72:	4b34      	ldr	r3, [pc, #208]	@ (8006044 <HAL_RCC_OscConfig+0x470>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f003 030c 	and.w	r3, r3, #12
 8005f7a:	2b08      	cmp	r3, #8
 8005f7c:	d05c      	beq.n	8006038 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d141      	bne.n	800600a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f86:	4b31      	ldr	r3, [pc, #196]	@ (800604c <HAL_RCC_OscConfig+0x478>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f8c:	f7fb ffd6 	bl	8001f3c <HAL_GetTick>
 8005f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f92:	e008      	b.n	8005fa6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f94:	f7fb ffd2 	bl	8001f3c <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e087      	b.n	80060b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fa6:	4b27      	ldr	r3, [pc, #156]	@ (8006044 <HAL_RCC_OscConfig+0x470>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1f0      	bne.n	8005f94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	69da      	ldr	r2, [r3, #28]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc0:	019b      	lsls	r3, r3, #6
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc8:	085b      	lsrs	r3, r3, #1
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	041b      	lsls	r3, r3, #16
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd4:	061b      	lsls	r3, r3, #24
 8005fd6:	491b      	ldr	r1, [pc, #108]	@ (8006044 <HAL_RCC_OscConfig+0x470>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800604c <HAL_RCC_OscConfig+0x478>)
 8005fde:	2201      	movs	r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe2:	f7fb ffab 	bl	8001f3c <HAL_GetTick>
 8005fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fe8:	e008      	b.n	8005ffc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fea:	f7fb ffa7 	bl	8001f3c <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d901      	bls.n	8005ffc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e05c      	b.n	80060b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ffc:	4b11      	ldr	r3, [pc, #68]	@ (8006044 <HAL_RCC_OscConfig+0x470>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d0f0      	beq.n	8005fea <HAL_RCC_OscConfig+0x416>
 8006008:	e054      	b.n	80060b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800600a:	4b10      	ldr	r3, [pc, #64]	@ (800604c <HAL_RCC_OscConfig+0x478>)
 800600c:	2200      	movs	r2, #0
 800600e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006010:	f7fb ff94 	bl	8001f3c <HAL_GetTick>
 8006014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006016:	e008      	b.n	800602a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006018:	f7fb ff90 	bl	8001f3c <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	2b02      	cmp	r3, #2
 8006024:	d901      	bls.n	800602a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e045      	b.n	80060b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800602a:	4b06      	ldr	r3, [pc, #24]	@ (8006044 <HAL_RCC_OscConfig+0x470>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1f0      	bne.n	8006018 <HAL_RCC_OscConfig+0x444>
 8006036:	e03d      	b.n	80060b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d107      	bne.n	8006050 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e038      	b.n	80060b6 <HAL_RCC_OscConfig+0x4e2>
 8006044:	40023800 	.word	0x40023800
 8006048:	40007000 	.word	0x40007000
 800604c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006050:	4b1b      	ldr	r3, [pc, #108]	@ (80060c0 <HAL_RCC_OscConfig+0x4ec>)
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d028      	beq.n	80060b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006068:	429a      	cmp	r2, r3
 800606a:	d121      	bne.n	80060b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006076:	429a      	cmp	r2, r3
 8006078:	d11a      	bne.n	80060b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006080:	4013      	ands	r3, r2
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006086:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006088:	4293      	cmp	r3, r2
 800608a:	d111      	bne.n	80060b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006096:	085b      	lsrs	r3, r3, #1
 8006098:	3b01      	subs	r3, #1
 800609a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800609c:	429a      	cmp	r2, r3
 800609e:	d107      	bne.n	80060b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d001      	beq.n	80060b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e000      	b.n	80060b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3718      	adds	r7, #24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	40023800 	.word	0x40023800

080060c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d101      	bne.n	80060d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e0cc      	b.n	8006272 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060d8:	4b68      	ldr	r3, [pc, #416]	@ (800627c <HAL_RCC_ClockConfig+0x1b8>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0307 	and.w	r3, r3, #7
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d90c      	bls.n	8006100 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060e6:	4b65      	ldr	r3, [pc, #404]	@ (800627c <HAL_RCC_ClockConfig+0x1b8>)
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ee:	4b63      	ldr	r3, [pc, #396]	@ (800627c <HAL_RCC_ClockConfig+0x1b8>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0307 	and.w	r3, r3, #7
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d001      	beq.n	8006100 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e0b8      	b.n	8006272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d020      	beq.n	800614e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0304 	and.w	r3, r3, #4
 8006114:	2b00      	cmp	r3, #0
 8006116:	d005      	beq.n	8006124 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006118:	4b59      	ldr	r3, [pc, #356]	@ (8006280 <HAL_RCC_ClockConfig+0x1bc>)
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	4a58      	ldr	r2, [pc, #352]	@ (8006280 <HAL_RCC_ClockConfig+0x1bc>)
 800611e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006122:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0308 	and.w	r3, r3, #8
 800612c:	2b00      	cmp	r3, #0
 800612e:	d005      	beq.n	800613c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006130:	4b53      	ldr	r3, [pc, #332]	@ (8006280 <HAL_RCC_ClockConfig+0x1bc>)
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	4a52      	ldr	r2, [pc, #328]	@ (8006280 <HAL_RCC_ClockConfig+0x1bc>)
 8006136:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800613a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800613c:	4b50      	ldr	r3, [pc, #320]	@ (8006280 <HAL_RCC_ClockConfig+0x1bc>)
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	494d      	ldr	r1, [pc, #308]	@ (8006280 <HAL_RCC_ClockConfig+0x1bc>)
 800614a:	4313      	orrs	r3, r2
 800614c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	d044      	beq.n	80061e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d107      	bne.n	8006172 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006162:	4b47      	ldr	r3, [pc, #284]	@ (8006280 <HAL_RCC_ClockConfig+0x1bc>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d119      	bne.n	80061a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e07f      	b.n	8006272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	2b02      	cmp	r3, #2
 8006178:	d003      	beq.n	8006182 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800617e:	2b03      	cmp	r3, #3
 8006180:	d107      	bne.n	8006192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006182:	4b3f      	ldr	r3, [pc, #252]	@ (8006280 <HAL_RCC_ClockConfig+0x1bc>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d109      	bne.n	80061a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e06f      	b.n	8006272 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006192:	4b3b      	ldr	r3, [pc, #236]	@ (8006280 <HAL_RCC_ClockConfig+0x1bc>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e067      	b.n	8006272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061a2:	4b37      	ldr	r3, [pc, #220]	@ (8006280 <HAL_RCC_ClockConfig+0x1bc>)
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f023 0203 	bic.w	r2, r3, #3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	4934      	ldr	r1, [pc, #208]	@ (8006280 <HAL_RCC_ClockConfig+0x1bc>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061b4:	f7fb fec2 	bl	8001f3c <HAL_GetTick>
 80061b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ba:	e00a      	b.n	80061d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061bc:	f7fb febe 	bl	8001f3c <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e04f      	b.n	8006272 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061d2:	4b2b      	ldr	r3, [pc, #172]	@ (8006280 <HAL_RCC_ClockConfig+0x1bc>)
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f003 020c 	and.w	r2, r3, #12
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d1eb      	bne.n	80061bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061e4:	4b25      	ldr	r3, [pc, #148]	@ (800627c <HAL_RCC_ClockConfig+0x1b8>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d20c      	bcs.n	800620c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061f2:	4b22      	ldr	r3, [pc, #136]	@ (800627c <HAL_RCC_ClockConfig+0x1b8>)
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061fa:	4b20      	ldr	r3, [pc, #128]	@ (800627c <HAL_RCC_ClockConfig+0x1b8>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0307 	and.w	r3, r3, #7
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	429a      	cmp	r2, r3
 8006206:	d001      	beq.n	800620c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e032      	b.n	8006272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0304 	and.w	r3, r3, #4
 8006214:	2b00      	cmp	r3, #0
 8006216:	d008      	beq.n	800622a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006218:	4b19      	ldr	r3, [pc, #100]	@ (8006280 <HAL_RCC_ClockConfig+0x1bc>)
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	4916      	ldr	r1, [pc, #88]	@ (8006280 <HAL_RCC_ClockConfig+0x1bc>)
 8006226:	4313      	orrs	r3, r2
 8006228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0308 	and.w	r3, r3, #8
 8006232:	2b00      	cmp	r3, #0
 8006234:	d009      	beq.n	800624a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006236:	4b12      	ldr	r3, [pc, #72]	@ (8006280 <HAL_RCC_ClockConfig+0x1bc>)
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	490e      	ldr	r1, [pc, #56]	@ (8006280 <HAL_RCC_ClockConfig+0x1bc>)
 8006246:	4313      	orrs	r3, r2
 8006248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800624a:	f000 f821 	bl	8006290 <HAL_RCC_GetSysClockFreq>
 800624e:	4602      	mov	r2, r0
 8006250:	4b0b      	ldr	r3, [pc, #44]	@ (8006280 <HAL_RCC_ClockConfig+0x1bc>)
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	091b      	lsrs	r3, r3, #4
 8006256:	f003 030f 	and.w	r3, r3, #15
 800625a:	490a      	ldr	r1, [pc, #40]	@ (8006284 <HAL_RCC_ClockConfig+0x1c0>)
 800625c:	5ccb      	ldrb	r3, [r1, r3]
 800625e:	fa22 f303 	lsr.w	r3, r2, r3
 8006262:	4a09      	ldr	r2, [pc, #36]	@ (8006288 <HAL_RCC_ClockConfig+0x1c4>)
 8006264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006266:	4b09      	ldr	r3, [pc, #36]	@ (800628c <HAL_RCC_ClockConfig+0x1c8>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4618      	mov	r0, r3
 800626c:	f7fb fe22 	bl	8001eb4 <HAL_InitTick>

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	40023c00 	.word	0x40023c00
 8006280:	40023800 	.word	0x40023800
 8006284:	0800dd6c 	.word	0x0800dd6c
 8006288:	20000000 	.word	0x20000000
 800628c:	20000004 	.word	0x20000004

08006290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006294:	b094      	sub	sp, #80	@ 0x50
 8006296:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006298:	2300      	movs	r3, #0
 800629a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800629c:	2300      	movs	r3, #0
 800629e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062a8:	4b79      	ldr	r3, [pc, #484]	@ (8006490 <HAL_RCC_GetSysClockFreq+0x200>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f003 030c 	and.w	r3, r3, #12
 80062b0:	2b08      	cmp	r3, #8
 80062b2:	d00d      	beq.n	80062d0 <HAL_RCC_GetSysClockFreq+0x40>
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	f200 80e1 	bhi.w	800647c <HAL_RCC_GetSysClockFreq+0x1ec>
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d002      	beq.n	80062c4 <HAL_RCC_GetSysClockFreq+0x34>
 80062be:	2b04      	cmp	r3, #4
 80062c0:	d003      	beq.n	80062ca <HAL_RCC_GetSysClockFreq+0x3a>
 80062c2:	e0db      	b.n	800647c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062c4:	4b73      	ldr	r3, [pc, #460]	@ (8006494 <HAL_RCC_GetSysClockFreq+0x204>)
 80062c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062c8:	e0db      	b.n	8006482 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062ca:	4b73      	ldr	r3, [pc, #460]	@ (8006498 <HAL_RCC_GetSysClockFreq+0x208>)
 80062cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062ce:	e0d8      	b.n	8006482 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062d0:	4b6f      	ldr	r3, [pc, #444]	@ (8006490 <HAL_RCC_GetSysClockFreq+0x200>)
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062da:	4b6d      	ldr	r3, [pc, #436]	@ (8006490 <HAL_RCC_GetSysClockFreq+0x200>)
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d063      	beq.n	80063ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062e6:	4b6a      	ldr	r3, [pc, #424]	@ (8006490 <HAL_RCC_GetSysClockFreq+0x200>)
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	099b      	lsrs	r3, r3, #6
 80062ec:	2200      	movs	r2, #0
 80062ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80062f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80062fa:	2300      	movs	r3, #0
 80062fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80062fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006302:	4622      	mov	r2, r4
 8006304:	462b      	mov	r3, r5
 8006306:	f04f 0000 	mov.w	r0, #0
 800630a:	f04f 0100 	mov.w	r1, #0
 800630e:	0159      	lsls	r1, r3, #5
 8006310:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006314:	0150      	lsls	r0, r2, #5
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	4621      	mov	r1, r4
 800631c:	1a51      	subs	r1, r2, r1
 800631e:	6139      	str	r1, [r7, #16]
 8006320:	4629      	mov	r1, r5
 8006322:	eb63 0301 	sbc.w	r3, r3, r1
 8006326:	617b      	str	r3, [r7, #20]
 8006328:	f04f 0200 	mov.w	r2, #0
 800632c:	f04f 0300 	mov.w	r3, #0
 8006330:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006334:	4659      	mov	r1, fp
 8006336:	018b      	lsls	r3, r1, #6
 8006338:	4651      	mov	r1, sl
 800633a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800633e:	4651      	mov	r1, sl
 8006340:	018a      	lsls	r2, r1, #6
 8006342:	4651      	mov	r1, sl
 8006344:	ebb2 0801 	subs.w	r8, r2, r1
 8006348:	4659      	mov	r1, fp
 800634a:	eb63 0901 	sbc.w	r9, r3, r1
 800634e:	f04f 0200 	mov.w	r2, #0
 8006352:	f04f 0300 	mov.w	r3, #0
 8006356:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800635a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800635e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006362:	4690      	mov	r8, r2
 8006364:	4699      	mov	r9, r3
 8006366:	4623      	mov	r3, r4
 8006368:	eb18 0303 	adds.w	r3, r8, r3
 800636c:	60bb      	str	r3, [r7, #8]
 800636e:	462b      	mov	r3, r5
 8006370:	eb49 0303 	adc.w	r3, r9, r3
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	f04f 0200 	mov.w	r2, #0
 800637a:	f04f 0300 	mov.w	r3, #0
 800637e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006382:	4629      	mov	r1, r5
 8006384:	024b      	lsls	r3, r1, #9
 8006386:	4621      	mov	r1, r4
 8006388:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800638c:	4621      	mov	r1, r4
 800638e:	024a      	lsls	r2, r1, #9
 8006390:	4610      	mov	r0, r2
 8006392:	4619      	mov	r1, r3
 8006394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006396:	2200      	movs	r2, #0
 8006398:	62bb      	str	r3, [r7, #40]	@ 0x28
 800639a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800639c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80063a0:	f7fa fc02 	bl	8000ba8 <__aeabi_uldivmod>
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	4613      	mov	r3, r2
 80063aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063ac:	e058      	b.n	8006460 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063ae:	4b38      	ldr	r3, [pc, #224]	@ (8006490 <HAL_RCC_GetSysClockFreq+0x200>)
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	099b      	lsrs	r3, r3, #6
 80063b4:	2200      	movs	r2, #0
 80063b6:	4618      	mov	r0, r3
 80063b8:	4611      	mov	r1, r2
 80063ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80063be:	623b      	str	r3, [r7, #32]
 80063c0:	2300      	movs	r3, #0
 80063c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80063c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80063c8:	4642      	mov	r2, r8
 80063ca:	464b      	mov	r3, r9
 80063cc:	f04f 0000 	mov.w	r0, #0
 80063d0:	f04f 0100 	mov.w	r1, #0
 80063d4:	0159      	lsls	r1, r3, #5
 80063d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063da:	0150      	lsls	r0, r2, #5
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	4641      	mov	r1, r8
 80063e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80063e6:	4649      	mov	r1, r9
 80063e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80063ec:	f04f 0200 	mov.w	r2, #0
 80063f0:	f04f 0300 	mov.w	r3, #0
 80063f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80063f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80063fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006400:	ebb2 040a 	subs.w	r4, r2, sl
 8006404:	eb63 050b 	sbc.w	r5, r3, fp
 8006408:	f04f 0200 	mov.w	r2, #0
 800640c:	f04f 0300 	mov.w	r3, #0
 8006410:	00eb      	lsls	r3, r5, #3
 8006412:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006416:	00e2      	lsls	r2, r4, #3
 8006418:	4614      	mov	r4, r2
 800641a:	461d      	mov	r5, r3
 800641c:	4643      	mov	r3, r8
 800641e:	18e3      	adds	r3, r4, r3
 8006420:	603b      	str	r3, [r7, #0]
 8006422:	464b      	mov	r3, r9
 8006424:	eb45 0303 	adc.w	r3, r5, r3
 8006428:	607b      	str	r3, [r7, #4]
 800642a:	f04f 0200 	mov.w	r2, #0
 800642e:	f04f 0300 	mov.w	r3, #0
 8006432:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006436:	4629      	mov	r1, r5
 8006438:	028b      	lsls	r3, r1, #10
 800643a:	4621      	mov	r1, r4
 800643c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006440:	4621      	mov	r1, r4
 8006442:	028a      	lsls	r2, r1, #10
 8006444:	4610      	mov	r0, r2
 8006446:	4619      	mov	r1, r3
 8006448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800644a:	2200      	movs	r2, #0
 800644c:	61bb      	str	r3, [r7, #24]
 800644e:	61fa      	str	r2, [r7, #28]
 8006450:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006454:	f7fa fba8 	bl	8000ba8 <__aeabi_uldivmod>
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	4613      	mov	r3, r2
 800645e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006460:	4b0b      	ldr	r3, [pc, #44]	@ (8006490 <HAL_RCC_GetSysClockFreq+0x200>)
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	0c1b      	lsrs	r3, r3, #16
 8006466:	f003 0303 	and.w	r3, r3, #3
 800646a:	3301      	adds	r3, #1
 800646c:	005b      	lsls	r3, r3, #1
 800646e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006470:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006474:	fbb2 f3f3 	udiv	r3, r2, r3
 8006478:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800647a:	e002      	b.n	8006482 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800647c:	4b05      	ldr	r3, [pc, #20]	@ (8006494 <HAL_RCC_GetSysClockFreq+0x204>)
 800647e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006480:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006484:	4618      	mov	r0, r3
 8006486:	3750      	adds	r7, #80	@ 0x50
 8006488:	46bd      	mov	sp, r7
 800648a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800648e:	bf00      	nop
 8006490:	40023800 	.word	0x40023800
 8006494:	00f42400 	.word	0x00f42400
 8006498:	007a1200 	.word	0x007a1200

0800649c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800649c:	b480      	push	{r7}
 800649e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064a0:	4b03      	ldr	r3, [pc, #12]	@ (80064b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80064a2:	681b      	ldr	r3, [r3, #0]
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	20000000 	.word	0x20000000

080064b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064b8:	f7ff fff0 	bl	800649c <HAL_RCC_GetHCLKFreq>
 80064bc:	4602      	mov	r2, r0
 80064be:	4b05      	ldr	r3, [pc, #20]	@ (80064d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	0a9b      	lsrs	r3, r3, #10
 80064c4:	f003 0307 	and.w	r3, r3, #7
 80064c8:	4903      	ldr	r1, [pc, #12]	@ (80064d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064ca:	5ccb      	ldrb	r3, [r1, r3]
 80064cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	40023800 	.word	0x40023800
 80064d8:	0800dd7c 	.word	0x0800dd7c

080064dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80064e0:	f7ff ffdc 	bl	800649c <HAL_RCC_GetHCLKFreq>
 80064e4:	4602      	mov	r2, r0
 80064e6:	4b05      	ldr	r3, [pc, #20]	@ (80064fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	0b5b      	lsrs	r3, r3, #13
 80064ec:	f003 0307 	and.w	r3, r3, #7
 80064f0:	4903      	ldr	r1, [pc, #12]	@ (8006500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064f2:	5ccb      	ldrb	r3, [r1, r3]
 80064f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	40023800 	.word	0x40023800
 8006500:	0800dd7c 	.word	0x0800dd7c

08006504 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e07b      	b.n	800660e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651a:	2b00      	cmp	r3, #0
 800651c:	d108      	bne.n	8006530 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006526:	d009      	beq.n	800653c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	61da      	str	r2, [r3, #28]
 800652e:	e005      	b.n	800653c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d106      	bne.n	800655c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7fb fa48 	bl	80019ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2202      	movs	r2, #2
 8006560:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006572:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006584:	431a      	orrs	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800658e:	431a      	orrs	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	431a      	orrs	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	431a      	orrs	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065ac:	431a      	orrs	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065b6:	431a      	orrs	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065c0:	ea42 0103 	orr.w	r1, r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	0c1b      	lsrs	r3, r3, #16
 80065da:	f003 0104 	and.w	r1, r3, #4
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e2:	f003 0210 	and.w	r2, r3, #16
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	69da      	ldr	r2, [r3, #28]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b082      	sub	sp, #8
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e041      	b.n	80066ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d106      	bne.n	8006642 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7fb fa1d 	bl	8001a7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2202      	movs	r2, #2
 8006646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	3304      	adds	r3, #4
 8006652:	4619      	mov	r1, r3
 8006654:	4610      	mov	r0, r2
 8006656:	f000 f9b7 	bl	80069c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d109      	bne.n	80066d8 <HAL_TIM_PWM_Start+0x24>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	bf14      	ite	ne
 80066d0:	2301      	movne	r3, #1
 80066d2:	2300      	moveq	r3, #0
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	e022      	b.n	800671e <HAL_TIM_PWM_Start+0x6a>
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	2b04      	cmp	r3, #4
 80066dc:	d109      	bne.n	80066f2 <HAL_TIM_PWM_Start+0x3e>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	bf14      	ite	ne
 80066ea:	2301      	movne	r3, #1
 80066ec:	2300      	moveq	r3, #0
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	e015      	b.n	800671e <HAL_TIM_PWM_Start+0x6a>
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	d109      	bne.n	800670c <HAL_TIM_PWM_Start+0x58>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b01      	cmp	r3, #1
 8006702:	bf14      	ite	ne
 8006704:	2301      	movne	r3, #1
 8006706:	2300      	moveq	r3, #0
 8006708:	b2db      	uxtb	r3, r3
 800670a:	e008      	b.n	800671e <HAL_TIM_PWM_Start+0x6a>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b01      	cmp	r3, #1
 8006716:	bf14      	ite	ne
 8006718:	2301      	movne	r3, #1
 800671a:	2300      	moveq	r3, #0
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e07c      	b.n	8006820 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d104      	bne.n	8006736 <HAL_TIM_PWM_Start+0x82>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2202      	movs	r2, #2
 8006730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006734:	e013      	b.n	800675e <HAL_TIM_PWM_Start+0xaa>
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b04      	cmp	r3, #4
 800673a:	d104      	bne.n	8006746 <HAL_TIM_PWM_Start+0x92>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2202      	movs	r2, #2
 8006740:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006744:	e00b      	b.n	800675e <HAL_TIM_PWM_Start+0xaa>
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2b08      	cmp	r3, #8
 800674a:	d104      	bne.n	8006756 <HAL_TIM_PWM_Start+0xa2>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2202      	movs	r2, #2
 8006750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006754:	e003      	b.n	800675e <HAL_TIM_PWM_Start+0xaa>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2202      	movs	r2, #2
 800675a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2201      	movs	r2, #1
 8006764:	6839      	ldr	r1, [r7, #0]
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fb84 	bl	8006e74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a2d      	ldr	r2, [pc, #180]	@ (8006828 <HAL_TIM_PWM_Start+0x174>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d004      	beq.n	8006780 <HAL_TIM_PWM_Start+0xcc>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a2c      	ldr	r2, [pc, #176]	@ (800682c <HAL_TIM_PWM_Start+0x178>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d101      	bne.n	8006784 <HAL_TIM_PWM_Start+0xd0>
 8006780:	2301      	movs	r3, #1
 8006782:	e000      	b.n	8006786 <HAL_TIM_PWM_Start+0xd2>
 8006784:	2300      	movs	r3, #0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d007      	beq.n	800679a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006798:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a22      	ldr	r2, [pc, #136]	@ (8006828 <HAL_TIM_PWM_Start+0x174>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d022      	beq.n	80067ea <HAL_TIM_PWM_Start+0x136>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067ac:	d01d      	beq.n	80067ea <HAL_TIM_PWM_Start+0x136>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006830 <HAL_TIM_PWM_Start+0x17c>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d018      	beq.n	80067ea <HAL_TIM_PWM_Start+0x136>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006834 <HAL_TIM_PWM_Start+0x180>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d013      	beq.n	80067ea <HAL_TIM_PWM_Start+0x136>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a1c      	ldr	r2, [pc, #112]	@ (8006838 <HAL_TIM_PWM_Start+0x184>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d00e      	beq.n	80067ea <HAL_TIM_PWM_Start+0x136>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a16      	ldr	r2, [pc, #88]	@ (800682c <HAL_TIM_PWM_Start+0x178>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d009      	beq.n	80067ea <HAL_TIM_PWM_Start+0x136>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a18      	ldr	r2, [pc, #96]	@ (800683c <HAL_TIM_PWM_Start+0x188>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d004      	beq.n	80067ea <HAL_TIM_PWM_Start+0x136>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a16      	ldr	r2, [pc, #88]	@ (8006840 <HAL_TIM_PWM_Start+0x18c>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d111      	bne.n	800680e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f003 0307 	and.w	r3, r3, #7
 80067f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2b06      	cmp	r3, #6
 80067fa:	d010      	beq.n	800681e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 0201 	orr.w	r2, r2, #1
 800680a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800680c:	e007      	b.n	800681e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f042 0201 	orr.w	r2, r2, #1
 800681c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	40010000 	.word	0x40010000
 800682c:	40010400 	.word	0x40010400
 8006830:	40000400 	.word	0x40000400
 8006834:	40000800 	.word	0x40000800
 8006838:	40000c00 	.word	0x40000c00
 800683c:	40014000 	.word	0x40014000
 8006840:	40001800 	.word	0x40001800

08006844 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006850:	2300      	movs	r3, #0
 8006852:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800685a:	2b01      	cmp	r3, #1
 800685c:	d101      	bne.n	8006862 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800685e:	2302      	movs	r3, #2
 8006860:	e0ae      	b.n	80069c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b0c      	cmp	r3, #12
 800686e:	f200 809f 	bhi.w	80069b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006872:	a201      	add	r2, pc, #4	@ (adr r2, 8006878 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006878:	080068ad 	.word	0x080068ad
 800687c:	080069b1 	.word	0x080069b1
 8006880:	080069b1 	.word	0x080069b1
 8006884:	080069b1 	.word	0x080069b1
 8006888:	080068ed 	.word	0x080068ed
 800688c:	080069b1 	.word	0x080069b1
 8006890:	080069b1 	.word	0x080069b1
 8006894:	080069b1 	.word	0x080069b1
 8006898:	0800692f 	.word	0x0800692f
 800689c:	080069b1 	.word	0x080069b1
 80068a0:	080069b1 	.word	0x080069b1
 80068a4:	080069b1 	.word	0x080069b1
 80068a8:	0800696f 	.word	0x0800696f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68b9      	ldr	r1, [r7, #8]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 f92e 	bl	8006b14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	699a      	ldr	r2, [r3, #24]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f042 0208 	orr.w	r2, r2, #8
 80068c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	699a      	ldr	r2, [r3, #24]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f022 0204 	bic.w	r2, r2, #4
 80068d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6999      	ldr	r1, [r3, #24]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	691a      	ldr	r2, [r3, #16]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	619a      	str	r2, [r3, #24]
      break;
 80068ea:	e064      	b.n	80069b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68b9      	ldr	r1, [r7, #8]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 f97e 	bl	8006bf4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	699a      	ldr	r2, [r3, #24]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699a      	ldr	r2, [r3, #24]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6999      	ldr	r1, [r3, #24]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	021a      	lsls	r2, r3, #8
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	430a      	orrs	r2, r1
 800692a:	619a      	str	r2, [r3, #24]
      break;
 800692c:	e043      	b.n	80069b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68b9      	ldr	r1, [r7, #8]
 8006934:	4618      	mov	r0, r3
 8006936:	f000 f9d3 	bl	8006ce0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69da      	ldr	r2, [r3, #28]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f042 0208 	orr.w	r2, r2, #8
 8006948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	69da      	ldr	r2, [r3, #28]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 0204 	bic.w	r2, r2, #4
 8006958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	69d9      	ldr	r1, [r3, #28]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	691a      	ldr	r2, [r3, #16]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	61da      	str	r2, [r3, #28]
      break;
 800696c:	e023      	b.n	80069b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68b9      	ldr	r1, [r7, #8]
 8006974:	4618      	mov	r0, r3
 8006976:	f000 fa27 	bl	8006dc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	69da      	ldr	r2, [r3, #28]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	69da      	ldr	r2, [r3, #28]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	69d9      	ldr	r1, [r3, #28]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	021a      	lsls	r2, r3, #8
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	61da      	str	r2, [r3, #28]
      break;
 80069ae:	e002      	b.n	80069b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	75fb      	strb	r3, [r7, #23]
      break;
 80069b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069be:	7dfb      	ldrb	r3, [r7, #23]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a43      	ldr	r2, [pc, #268]	@ (8006ae8 <TIM_Base_SetConfig+0x120>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d013      	beq.n	8006a08 <TIM_Base_SetConfig+0x40>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069e6:	d00f      	beq.n	8006a08 <TIM_Base_SetConfig+0x40>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a40      	ldr	r2, [pc, #256]	@ (8006aec <TIM_Base_SetConfig+0x124>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d00b      	beq.n	8006a08 <TIM_Base_SetConfig+0x40>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a3f      	ldr	r2, [pc, #252]	@ (8006af0 <TIM_Base_SetConfig+0x128>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d007      	beq.n	8006a08 <TIM_Base_SetConfig+0x40>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a3e      	ldr	r2, [pc, #248]	@ (8006af4 <TIM_Base_SetConfig+0x12c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d003      	beq.n	8006a08 <TIM_Base_SetConfig+0x40>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a3d      	ldr	r2, [pc, #244]	@ (8006af8 <TIM_Base_SetConfig+0x130>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d108      	bne.n	8006a1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a32      	ldr	r2, [pc, #200]	@ (8006ae8 <TIM_Base_SetConfig+0x120>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d02b      	beq.n	8006a7a <TIM_Base_SetConfig+0xb2>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a28:	d027      	beq.n	8006a7a <TIM_Base_SetConfig+0xb2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a2f      	ldr	r2, [pc, #188]	@ (8006aec <TIM_Base_SetConfig+0x124>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d023      	beq.n	8006a7a <TIM_Base_SetConfig+0xb2>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a2e      	ldr	r2, [pc, #184]	@ (8006af0 <TIM_Base_SetConfig+0x128>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d01f      	beq.n	8006a7a <TIM_Base_SetConfig+0xb2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a2d      	ldr	r2, [pc, #180]	@ (8006af4 <TIM_Base_SetConfig+0x12c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d01b      	beq.n	8006a7a <TIM_Base_SetConfig+0xb2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a2c      	ldr	r2, [pc, #176]	@ (8006af8 <TIM_Base_SetConfig+0x130>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d017      	beq.n	8006a7a <TIM_Base_SetConfig+0xb2>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a2b      	ldr	r2, [pc, #172]	@ (8006afc <TIM_Base_SetConfig+0x134>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d013      	beq.n	8006a7a <TIM_Base_SetConfig+0xb2>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a2a      	ldr	r2, [pc, #168]	@ (8006b00 <TIM_Base_SetConfig+0x138>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d00f      	beq.n	8006a7a <TIM_Base_SetConfig+0xb2>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a29      	ldr	r2, [pc, #164]	@ (8006b04 <TIM_Base_SetConfig+0x13c>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d00b      	beq.n	8006a7a <TIM_Base_SetConfig+0xb2>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a28      	ldr	r2, [pc, #160]	@ (8006b08 <TIM_Base_SetConfig+0x140>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d007      	beq.n	8006a7a <TIM_Base_SetConfig+0xb2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a27      	ldr	r2, [pc, #156]	@ (8006b0c <TIM_Base_SetConfig+0x144>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d003      	beq.n	8006a7a <TIM_Base_SetConfig+0xb2>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a26      	ldr	r2, [pc, #152]	@ (8006b10 <TIM_Base_SetConfig+0x148>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d108      	bne.n	8006a8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	689a      	ldr	r2, [r3, #8]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a0e      	ldr	r2, [pc, #56]	@ (8006ae8 <TIM_Base_SetConfig+0x120>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d003      	beq.n	8006aba <TIM_Base_SetConfig+0xf2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a10      	ldr	r2, [pc, #64]	@ (8006af8 <TIM_Base_SetConfig+0x130>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d103      	bne.n	8006ac2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	691a      	ldr	r2, [r3, #16]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f043 0204 	orr.w	r2, r3, #4
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	601a      	str	r2, [r3, #0]
}
 8006ada:	bf00      	nop
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40010000 	.word	0x40010000
 8006aec:	40000400 	.word	0x40000400
 8006af0:	40000800 	.word	0x40000800
 8006af4:	40000c00 	.word	0x40000c00
 8006af8:	40010400 	.word	0x40010400
 8006afc:	40014000 	.word	0x40014000
 8006b00:	40014400 	.word	0x40014400
 8006b04:	40014800 	.word	0x40014800
 8006b08:	40001800 	.word	0x40001800
 8006b0c:	40001c00 	.word	0x40001c00
 8006b10:	40002000 	.word	0x40002000

08006b14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	f023 0201 	bic.w	r2, r3, #1
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0303 	bic.w	r3, r3, #3
 8006b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f023 0302 	bic.w	r3, r3, #2
 8006b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a20      	ldr	r2, [pc, #128]	@ (8006bec <TIM_OC1_SetConfig+0xd8>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d003      	beq.n	8006b78 <TIM_OC1_SetConfig+0x64>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a1f      	ldr	r2, [pc, #124]	@ (8006bf0 <TIM_OC1_SetConfig+0xdc>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d10c      	bne.n	8006b92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f023 0308 	bic.w	r3, r3, #8
 8006b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f023 0304 	bic.w	r3, r3, #4
 8006b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a15      	ldr	r2, [pc, #84]	@ (8006bec <TIM_OC1_SetConfig+0xd8>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d003      	beq.n	8006ba2 <TIM_OC1_SetConfig+0x8e>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a14      	ldr	r2, [pc, #80]	@ (8006bf0 <TIM_OC1_SetConfig+0xdc>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d111      	bne.n	8006bc6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	621a      	str	r2, [r3, #32]
}
 8006be0:	bf00      	nop
 8006be2:	371c      	adds	r7, #28
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	40010000 	.word	0x40010000
 8006bf0:	40010400 	.word	0x40010400

08006bf4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b087      	sub	sp, #28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	f023 0210 	bic.w	r2, r3, #16
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	021b      	lsls	r3, r3, #8
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f023 0320 	bic.w	r3, r3, #32
 8006c3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	011b      	lsls	r3, r3, #4
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a22      	ldr	r2, [pc, #136]	@ (8006cd8 <TIM_OC2_SetConfig+0xe4>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d003      	beq.n	8006c5c <TIM_OC2_SetConfig+0x68>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a21      	ldr	r2, [pc, #132]	@ (8006cdc <TIM_OC2_SetConfig+0xe8>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d10d      	bne.n	8006c78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	011b      	lsls	r3, r3, #4
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a17      	ldr	r2, [pc, #92]	@ (8006cd8 <TIM_OC2_SetConfig+0xe4>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d003      	beq.n	8006c88 <TIM_OC2_SetConfig+0x94>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a16      	ldr	r2, [pc, #88]	@ (8006cdc <TIM_OC2_SetConfig+0xe8>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d113      	bne.n	8006cb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	695b      	ldr	r3, [r3, #20]
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	621a      	str	r2, [r3, #32]
}
 8006cca:	bf00      	nop
 8006ccc:	371c      	adds	r7, #28
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	40010000 	.word	0x40010000
 8006cdc:	40010400 	.word	0x40010400

08006ce0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f023 0303 	bic.w	r3, r3, #3
 8006d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	021b      	lsls	r3, r3, #8
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a21      	ldr	r2, [pc, #132]	@ (8006dc0 <TIM_OC3_SetConfig+0xe0>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d003      	beq.n	8006d46 <TIM_OC3_SetConfig+0x66>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a20      	ldr	r2, [pc, #128]	@ (8006dc4 <TIM_OC3_SetConfig+0xe4>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d10d      	bne.n	8006d62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	021b      	lsls	r3, r3, #8
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a16      	ldr	r2, [pc, #88]	@ (8006dc0 <TIM_OC3_SetConfig+0xe0>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d003      	beq.n	8006d72 <TIM_OC3_SetConfig+0x92>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a15      	ldr	r2, [pc, #84]	@ (8006dc4 <TIM_OC3_SetConfig+0xe4>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d113      	bne.n	8006d9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	011b      	lsls	r3, r3, #4
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	011b      	lsls	r3, r3, #4
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	621a      	str	r2, [r3, #32]
}
 8006db4:	bf00      	nop
 8006db6:	371c      	adds	r7, #28
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	40010000 	.word	0x40010000
 8006dc4:	40010400 	.word	0x40010400

08006dc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	021b      	lsls	r3, r3, #8
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	031b      	lsls	r3, r3, #12
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a12      	ldr	r2, [pc, #72]	@ (8006e6c <TIM_OC4_SetConfig+0xa4>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d003      	beq.n	8006e30 <TIM_OC4_SetConfig+0x68>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a11      	ldr	r2, [pc, #68]	@ (8006e70 <TIM_OC4_SetConfig+0xa8>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d109      	bne.n	8006e44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	695b      	ldr	r3, [r3, #20]
 8006e3c:	019b      	lsls	r3, r3, #6
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	621a      	str	r2, [r3, #32]
}
 8006e5e:	bf00      	nop
 8006e60:	371c      	adds	r7, #28
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	40010000 	.word	0x40010000
 8006e70:	40010400 	.word	0x40010400

08006e74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	f003 031f 	and.w	r3, r3, #31
 8006e86:	2201      	movs	r2, #1
 8006e88:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6a1a      	ldr	r2, [r3, #32]
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	43db      	mvns	r3, r3
 8006e96:	401a      	ands	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6a1a      	ldr	r2, [r3, #32]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f003 031f 	and.w	r3, r3, #31
 8006ea6:	6879      	ldr	r1, [r7, #4]
 8006ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8006eac:	431a      	orrs	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	621a      	str	r2, [r3, #32]
}
 8006eb2:	bf00      	nop
 8006eb4:	371c      	adds	r7, #28
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
	...

08006ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d101      	bne.n	8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	e05a      	b.n	8006f8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006efe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a21      	ldr	r2, [pc, #132]	@ (8006f9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d022      	beq.n	8006f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f24:	d01d      	beq.n	8006f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a1d      	ldr	r2, [pc, #116]	@ (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d018      	beq.n	8006f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a1b      	ldr	r2, [pc, #108]	@ (8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d013      	beq.n	8006f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a1a      	ldr	r2, [pc, #104]	@ (8006fa8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d00e      	beq.n	8006f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a18      	ldr	r2, [pc, #96]	@ (8006fac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d009      	beq.n	8006f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a17      	ldr	r2, [pc, #92]	@ (8006fb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d004      	beq.n	8006f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a15      	ldr	r2, [pc, #84]	@ (8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d10c      	bne.n	8006f7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	40010000 	.word	0x40010000
 8006fa0:	40000400 	.word	0x40000400
 8006fa4:	40000800 	.word	0x40000800
 8006fa8:	40000c00 	.word	0x40000c00
 8006fac:	40010400 	.word	0x40010400
 8006fb0:	40014000 	.word	0x40014000
 8006fb4:	40001800 	.word	0x40001800

08006fb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d101      	bne.n	8006fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	e03d      	b.n	8007050 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	4313      	orrs	r3, r2
 8007004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4313      	orrs	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	4313      	orrs	r3, r2
 8007020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	4313      	orrs	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	4313      	orrs	r3, r2
 800703c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e042      	b.n	80070f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d106      	bne.n	8007088 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7fa fd56 	bl	8001b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2224      	movs	r2, #36	@ 0x24
 800708c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68da      	ldr	r2, [r3, #12]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800709e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 f973 	bl	800738c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	691a      	ldr	r2, [r3, #16]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80070b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	695a      	ldr	r2, [r3, #20]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80070c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68da      	ldr	r2, [r3, #12]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80070d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2220      	movs	r2, #32
 80070e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2220      	movs	r2, #32
 80070e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08a      	sub	sp, #40	@ 0x28
 8007100:	af02      	add	r7, sp, #8
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	603b      	str	r3, [r7, #0]
 8007108:	4613      	mov	r3, r2
 800710a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800710c:	2300      	movs	r3, #0
 800710e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b20      	cmp	r3, #32
 800711a:	d175      	bne.n	8007208 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d002      	beq.n	8007128 <HAL_UART_Transmit+0x2c>
 8007122:	88fb      	ldrh	r3, [r7, #6]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d101      	bne.n	800712c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e06e      	b.n	800720a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2221      	movs	r2, #33	@ 0x21
 8007136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800713a:	f7fa feff 	bl	8001f3c <HAL_GetTick>
 800713e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	88fa      	ldrh	r2, [r7, #6]
 8007144:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	88fa      	ldrh	r2, [r7, #6]
 800714a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007154:	d108      	bne.n	8007168 <HAL_UART_Transmit+0x6c>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d104      	bne.n	8007168 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800715e:	2300      	movs	r3, #0
 8007160:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	61bb      	str	r3, [r7, #24]
 8007166:	e003      	b.n	8007170 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800716c:	2300      	movs	r3, #0
 800716e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007170:	e02e      	b.n	80071d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	2200      	movs	r2, #0
 800717a:	2180      	movs	r1, #128	@ 0x80
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f000 f848 	bl	8007212 <UART_WaitOnFlagUntilTimeout>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d005      	beq.n	8007194 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2220      	movs	r2, #32
 800718c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	e03a      	b.n	800720a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10b      	bne.n	80071b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	881b      	ldrh	r3, [r3, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	3302      	adds	r3, #2
 80071ae:	61bb      	str	r3, [r7, #24]
 80071b0:	e007      	b.n	80071c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	781a      	ldrb	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	3301      	adds	r3, #1
 80071c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	3b01      	subs	r3, #1
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1cb      	bne.n	8007172 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	2200      	movs	r2, #0
 80071e2:	2140      	movs	r1, #64	@ 0x40
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 f814 	bl	8007212 <UART_WaitOnFlagUntilTimeout>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d005      	beq.n	80071fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2220      	movs	r2, #32
 80071f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e006      	b.n	800720a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2220      	movs	r2, #32
 8007200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	e000      	b.n	800720a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007208:	2302      	movs	r3, #2
  }
}
 800720a:	4618      	mov	r0, r3
 800720c:	3720      	adds	r7, #32
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b086      	sub	sp, #24
 8007216:	af00      	add	r7, sp, #0
 8007218:	60f8      	str	r0, [r7, #12]
 800721a:	60b9      	str	r1, [r7, #8]
 800721c:	603b      	str	r3, [r7, #0]
 800721e:	4613      	mov	r3, r2
 8007220:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007222:	e03b      	b.n	800729c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007224:	6a3b      	ldr	r3, [r7, #32]
 8007226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722a:	d037      	beq.n	800729c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800722c:	f7fa fe86 	bl	8001f3c <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	6a3a      	ldr	r2, [r7, #32]
 8007238:	429a      	cmp	r2, r3
 800723a:	d302      	bcc.n	8007242 <UART_WaitOnFlagUntilTimeout+0x30>
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	e03a      	b.n	80072bc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	f003 0304 	and.w	r3, r3, #4
 8007250:	2b00      	cmp	r3, #0
 8007252:	d023      	beq.n	800729c <UART_WaitOnFlagUntilTimeout+0x8a>
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2b80      	cmp	r3, #128	@ 0x80
 8007258:	d020      	beq.n	800729c <UART_WaitOnFlagUntilTimeout+0x8a>
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2b40      	cmp	r3, #64	@ 0x40
 800725e:	d01d      	beq.n	800729c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0308 	and.w	r3, r3, #8
 800726a:	2b08      	cmp	r3, #8
 800726c:	d116      	bne.n	800729c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800726e:	2300      	movs	r3, #0
 8007270:	617b      	str	r3, [r7, #20]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	617b      	str	r3, [r7, #20]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	617b      	str	r3, [r7, #20]
 8007282:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f000 f81d 	bl	80072c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2208      	movs	r2, #8
 800728e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e00f      	b.n	80072bc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	4013      	ands	r3, r2
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	bf0c      	ite	eq
 80072ac:	2301      	moveq	r3, #1
 80072ae:	2300      	movne	r3, #0
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	461a      	mov	r2, r3
 80072b4:	79fb      	ldrb	r3, [r7, #7]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d0b4      	beq.n	8007224 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3718      	adds	r7, #24
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b095      	sub	sp, #84	@ 0x54
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	330c      	adds	r3, #12
 80072d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072d6:	e853 3f00 	ldrex	r3, [r3]
 80072da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	330c      	adds	r3, #12
 80072ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80072ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072f4:	e841 2300 	strex	r3, r2, [r1]
 80072f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e5      	bne.n	80072cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3314      	adds	r3, #20
 8007306:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	e853 3f00 	ldrex	r3, [r3]
 800730e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	f023 0301 	bic.w	r3, r3, #1
 8007316:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3314      	adds	r3, #20
 800731e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007320:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007322:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007324:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007326:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007328:	e841 2300 	strex	r3, r2, [r1]
 800732c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800732e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1e5      	bne.n	8007300 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007338:	2b01      	cmp	r3, #1
 800733a:	d119      	bne.n	8007370 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	330c      	adds	r3, #12
 8007342:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	e853 3f00 	ldrex	r3, [r3]
 800734a:	60bb      	str	r3, [r7, #8]
   return(result);
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f023 0310 	bic.w	r3, r3, #16
 8007352:	647b      	str	r3, [r7, #68]	@ 0x44
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	330c      	adds	r3, #12
 800735a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800735c:	61ba      	str	r2, [r7, #24]
 800735e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007360:	6979      	ldr	r1, [r7, #20]
 8007362:	69ba      	ldr	r2, [r7, #24]
 8007364:	e841 2300 	strex	r3, r2, [r1]
 8007368:	613b      	str	r3, [r7, #16]
   return(result);
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1e5      	bne.n	800733c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2220      	movs	r2, #32
 8007374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800737e:	bf00      	nop
 8007380:	3754      	adds	r7, #84	@ 0x54
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
	...

0800738c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800738c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007390:	b0c0      	sub	sp, #256	@ 0x100
 8007392:	af00      	add	r7, sp, #0
 8007394:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80073a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073a8:	68d9      	ldr	r1, [r3, #12]
 80073aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	ea40 0301 	orr.w	r3, r0, r1
 80073b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	431a      	orrs	r2, r3
 80073c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	431a      	orrs	r2, r3
 80073cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80073d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80073e4:	f021 010c 	bic.w	r1, r1, #12
 80073e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80073f2:	430b      	orrs	r3, r1
 80073f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007406:	6999      	ldr	r1, [r3, #24]
 8007408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	ea40 0301 	orr.w	r3, r0, r1
 8007412:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	4b8f      	ldr	r3, [pc, #572]	@ (8007658 <UART_SetConfig+0x2cc>)
 800741c:	429a      	cmp	r2, r3
 800741e:	d005      	beq.n	800742c <UART_SetConfig+0xa0>
 8007420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	4b8d      	ldr	r3, [pc, #564]	@ (800765c <UART_SetConfig+0x2d0>)
 8007428:	429a      	cmp	r2, r3
 800742a:	d104      	bne.n	8007436 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800742c:	f7ff f856 	bl	80064dc <HAL_RCC_GetPCLK2Freq>
 8007430:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007434:	e003      	b.n	800743e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007436:	f7ff f83d 	bl	80064b4 <HAL_RCC_GetPCLK1Freq>
 800743a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800743e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007448:	f040 810c 	bne.w	8007664 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800744c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007450:	2200      	movs	r2, #0
 8007452:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007456:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800745a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800745e:	4622      	mov	r2, r4
 8007460:	462b      	mov	r3, r5
 8007462:	1891      	adds	r1, r2, r2
 8007464:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007466:	415b      	adcs	r3, r3
 8007468:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800746a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800746e:	4621      	mov	r1, r4
 8007470:	eb12 0801 	adds.w	r8, r2, r1
 8007474:	4629      	mov	r1, r5
 8007476:	eb43 0901 	adc.w	r9, r3, r1
 800747a:	f04f 0200 	mov.w	r2, #0
 800747e:	f04f 0300 	mov.w	r3, #0
 8007482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800748a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800748e:	4690      	mov	r8, r2
 8007490:	4699      	mov	r9, r3
 8007492:	4623      	mov	r3, r4
 8007494:	eb18 0303 	adds.w	r3, r8, r3
 8007498:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800749c:	462b      	mov	r3, r5
 800749e:	eb49 0303 	adc.w	r3, r9, r3
 80074a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80074a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80074b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80074b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80074ba:	460b      	mov	r3, r1
 80074bc:	18db      	adds	r3, r3, r3
 80074be:	653b      	str	r3, [r7, #80]	@ 0x50
 80074c0:	4613      	mov	r3, r2
 80074c2:	eb42 0303 	adc.w	r3, r2, r3
 80074c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80074c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80074cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80074d0:	f7f9 fb6a 	bl	8000ba8 <__aeabi_uldivmod>
 80074d4:	4602      	mov	r2, r0
 80074d6:	460b      	mov	r3, r1
 80074d8:	4b61      	ldr	r3, [pc, #388]	@ (8007660 <UART_SetConfig+0x2d4>)
 80074da:	fba3 2302 	umull	r2, r3, r3, r2
 80074de:	095b      	lsrs	r3, r3, #5
 80074e0:	011c      	lsls	r4, r3, #4
 80074e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80074ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80074f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80074f4:	4642      	mov	r2, r8
 80074f6:	464b      	mov	r3, r9
 80074f8:	1891      	adds	r1, r2, r2
 80074fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80074fc:	415b      	adcs	r3, r3
 80074fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007500:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007504:	4641      	mov	r1, r8
 8007506:	eb12 0a01 	adds.w	sl, r2, r1
 800750a:	4649      	mov	r1, r9
 800750c:	eb43 0b01 	adc.w	fp, r3, r1
 8007510:	f04f 0200 	mov.w	r2, #0
 8007514:	f04f 0300 	mov.w	r3, #0
 8007518:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800751c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007520:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007524:	4692      	mov	sl, r2
 8007526:	469b      	mov	fp, r3
 8007528:	4643      	mov	r3, r8
 800752a:	eb1a 0303 	adds.w	r3, sl, r3
 800752e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007532:	464b      	mov	r3, r9
 8007534:	eb4b 0303 	adc.w	r3, fp, r3
 8007538:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800753c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007548:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800754c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007550:	460b      	mov	r3, r1
 8007552:	18db      	adds	r3, r3, r3
 8007554:	643b      	str	r3, [r7, #64]	@ 0x40
 8007556:	4613      	mov	r3, r2
 8007558:	eb42 0303 	adc.w	r3, r2, r3
 800755c:	647b      	str	r3, [r7, #68]	@ 0x44
 800755e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007562:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007566:	f7f9 fb1f 	bl	8000ba8 <__aeabi_uldivmod>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	4611      	mov	r1, r2
 8007570:	4b3b      	ldr	r3, [pc, #236]	@ (8007660 <UART_SetConfig+0x2d4>)
 8007572:	fba3 2301 	umull	r2, r3, r3, r1
 8007576:	095b      	lsrs	r3, r3, #5
 8007578:	2264      	movs	r2, #100	@ 0x64
 800757a:	fb02 f303 	mul.w	r3, r2, r3
 800757e:	1acb      	subs	r3, r1, r3
 8007580:	00db      	lsls	r3, r3, #3
 8007582:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007586:	4b36      	ldr	r3, [pc, #216]	@ (8007660 <UART_SetConfig+0x2d4>)
 8007588:	fba3 2302 	umull	r2, r3, r3, r2
 800758c:	095b      	lsrs	r3, r3, #5
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007594:	441c      	add	r4, r3
 8007596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800759a:	2200      	movs	r2, #0
 800759c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80075a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80075a8:	4642      	mov	r2, r8
 80075aa:	464b      	mov	r3, r9
 80075ac:	1891      	adds	r1, r2, r2
 80075ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80075b0:	415b      	adcs	r3, r3
 80075b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80075b8:	4641      	mov	r1, r8
 80075ba:	1851      	adds	r1, r2, r1
 80075bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80075be:	4649      	mov	r1, r9
 80075c0:	414b      	adcs	r3, r1
 80075c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80075c4:	f04f 0200 	mov.w	r2, #0
 80075c8:	f04f 0300 	mov.w	r3, #0
 80075cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80075d0:	4659      	mov	r1, fp
 80075d2:	00cb      	lsls	r3, r1, #3
 80075d4:	4651      	mov	r1, sl
 80075d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075da:	4651      	mov	r1, sl
 80075dc:	00ca      	lsls	r2, r1, #3
 80075de:	4610      	mov	r0, r2
 80075e0:	4619      	mov	r1, r3
 80075e2:	4603      	mov	r3, r0
 80075e4:	4642      	mov	r2, r8
 80075e6:	189b      	adds	r3, r3, r2
 80075e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80075ec:	464b      	mov	r3, r9
 80075ee:	460a      	mov	r2, r1
 80075f0:	eb42 0303 	adc.w	r3, r2, r3
 80075f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007604:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007608:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800760c:	460b      	mov	r3, r1
 800760e:	18db      	adds	r3, r3, r3
 8007610:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007612:	4613      	mov	r3, r2
 8007614:	eb42 0303 	adc.w	r3, r2, r3
 8007618:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800761a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800761e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007622:	f7f9 fac1 	bl	8000ba8 <__aeabi_uldivmod>
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	4b0d      	ldr	r3, [pc, #52]	@ (8007660 <UART_SetConfig+0x2d4>)
 800762c:	fba3 1302 	umull	r1, r3, r3, r2
 8007630:	095b      	lsrs	r3, r3, #5
 8007632:	2164      	movs	r1, #100	@ 0x64
 8007634:	fb01 f303 	mul.w	r3, r1, r3
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	00db      	lsls	r3, r3, #3
 800763c:	3332      	adds	r3, #50	@ 0x32
 800763e:	4a08      	ldr	r2, [pc, #32]	@ (8007660 <UART_SetConfig+0x2d4>)
 8007640:	fba2 2303 	umull	r2, r3, r2, r3
 8007644:	095b      	lsrs	r3, r3, #5
 8007646:	f003 0207 	and.w	r2, r3, #7
 800764a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4422      	add	r2, r4
 8007652:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007654:	e106      	b.n	8007864 <UART_SetConfig+0x4d8>
 8007656:	bf00      	nop
 8007658:	40011000 	.word	0x40011000
 800765c:	40011400 	.word	0x40011400
 8007660:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007668:	2200      	movs	r2, #0
 800766a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800766e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007672:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007676:	4642      	mov	r2, r8
 8007678:	464b      	mov	r3, r9
 800767a:	1891      	adds	r1, r2, r2
 800767c:	6239      	str	r1, [r7, #32]
 800767e:	415b      	adcs	r3, r3
 8007680:	627b      	str	r3, [r7, #36]	@ 0x24
 8007682:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007686:	4641      	mov	r1, r8
 8007688:	1854      	adds	r4, r2, r1
 800768a:	4649      	mov	r1, r9
 800768c:	eb43 0501 	adc.w	r5, r3, r1
 8007690:	f04f 0200 	mov.w	r2, #0
 8007694:	f04f 0300 	mov.w	r3, #0
 8007698:	00eb      	lsls	r3, r5, #3
 800769a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800769e:	00e2      	lsls	r2, r4, #3
 80076a0:	4614      	mov	r4, r2
 80076a2:	461d      	mov	r5, r3
 80076a4:	4643      	mov	r3, r8
 80076a6:	18e3      	adds	r3, r4, r3
 80076a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076ac:	464b      	mov	r3, r9
 80076ae:	eb45 0303 	adc.w	r3, r5, r3
 80076b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80076c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80076c6:	f04f 0200 	mov.w	r2, #0
 80076ca:	f04f 0300 	mov.w	r3, #0
 80076ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80076d2:	4629      	mov	r1, r5
 80076d4:	008b      	lsls	r3, r1, #2
 80076d6:	4621      	mov	r1, r4
 80076d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076dc:	4621      	mov	r1, r4
 80076de:	008a      	lsls	r2, r1, #2
 80076e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80076e4:	f7f9 fa60 	bl	8000ba8 <__aeabi_uldivmod>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	4b60      	ldr	r3, [pc, #384]	@ (8007870 <UART_SetConfig+0x4e4>)
 80076ee:	fba3 2302 	umull	r2, r3, r3, r2
 80076f2:	095b      	lsrs	r3, r3, #5
 80076f4:	011c      	lsls	r4, r3, #4
 80076f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076fa:	2200      	movs	r2, #0
 80076fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007700:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007704:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007708:	4642      	mov	r2, r8
 800770a:	464b      	mov	r3, r9
 800770c:	1891      	adds	r1, r2, r2
 800770e:	61b9      	str	r1, [r7, #24]
 8007710:	415b      	adcs	r3, r3
 8007712:	61fb      	str	r3, [r7, #28]
 8007714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007718:	4641      	mov	r1, r8
 800771a:	1851      	adds	r1, r2, r1
 800771c:	6139      	str	r1, [r7, #16]
 800771e:	4649      	mov	r1, r9
 8007720:	414b      	adcs	r3, r1
 8007722:	617b      	str	r3, [r7, #20]
 8007724:	f04f 0200 	mov.w	r2, #0
 8007728:	f04f 0300 	mov.w	r3, #0
 800772c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007730:	4659      	mov	r1, fp
 8007732:	00cb      	lsls	r3, r1, #3
 8007734:	4651      	mov	r1, sl
 8007736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800773a:	4651      	mov	r1, sl
 800773c:	00ca      	lsls	r2, r1, #3
 800773e:	4610      	mov	r0, r2
 8007740:	4619      	mov	r1, r3
 8007742:	4603      	mov	r3, r0
 8007744:	4642      	mov	r2, r8
 8007746:	189b      	adds	r3, r3, r2
 8007748:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800774c:	464b      	mov	r3, r9
 800774e:	460a      	mov	r2, r1
 8007750:	eb42 0303 	adc.w	r3, r2, r3
 8007754:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007762:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007764:	f04f 0200 	mov.w	r2, #0
 8007768:	f04f 0300 	mov.w	r3, #0
 800776c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007770:	4649      	mov	r1, r9
 8007772:	008b      	lsls	r3, r1, #2
 8007774:	4641      	mov	r1, r8
 8007776:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800777a:	4641      	mov	r1, r8
 800777c:	008a      	lsls	r2, r1, #2
 800777e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007782:	f7f9 fa11 	bl	8000ba8 <__aeabi_uldivmod>
 8007786:	4602      	mov	r2, r0
 8007788:	460b      	mov	r3, r1
 800778a:	4611      	mov	r1, r2
 800778c:	4b38      	ldr	r3, [pc, #224]	@ (8007870 <UART_SetConfig+0x4e4>)
 800778e:	fba3 2301 	umull	r2, r3, r3, r1
 8007792:	095b      	lsrs	r3, r3, #5
 8007794:	2264      	movs	r2, #100	@ 0x64
 8007796:	fb02 f303 	mul.w	r3, r2, r3
 800779a:	1acb      	subs	r3, r1, r3
 800779c:	011b      	lsls	r3, r3, #4
 800779e:	3332      	adds	r3, #50	@ 0x32
 80077a0:	4a33      	ldr	r2, [pc, #204]	@ (8007870 <UART_SetConfig+0x4e4>)
 80077a2:	fba2 2303 	umull	r2, r3, r2, r3
 80077a6:	095b      	lsrs	r3, r3, #5
 80077a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80077ac:	441c      	add	r4, r3
 80077ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077b2:	2200      	movs	r2, #0
 80077b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80077b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80077b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80077bc:	4642      	mov	r2, r8
 80077be:	464b      	mov	r3, r9
 80077c0:	1891      	adds	r1, r2, r2
 80077c2:	60b9      	str	r1, [r7, #8]
 80077c4:	415b      	adcs	r3, r3
 80077c6:	60fb      	str	r3, [r7, #12]
 80077c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077cc:	4641      	mov	r1, r8
 80077ce:	1851      	adds	r1, r2, r1
 80077d0:	6039      	str	r1, [r7, #0]
 80077d2:	4649      	mov	r1, r9
 80077d4:	414b      	adcs	r3, r1
 80077d6:	607b      	str	r3, [r7, #4]
 80077d8:	f04f 0200 	mov.w	r2, #0
 80077dc:	f04f 0300 	mov.w	r3, #0
 80077e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80077e4:	4659      	mov	r1, fp
 80077e6:	00cb      	lsls	r3, r1, #3
 80077e8:	4651      	mov	r1, sl
 80077ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077ee:	4651      	mov	r1, sl
 80077f0:	00ca      	lsls	r2, r1, #3
 80077f2:	4610      	mov	r0, r2
 80077f4:	4619      	mov	r1, r3
 80077f6:	4603      	mov	r3, r0
 80077f8:	4642      	mov	r2, r8
 80077fa:	189b      	adds	r3, r3, r2
 80077fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077fe:	464b      	mov	r3, r9
 8007800:	460a      	mov	r2, r1
 8007802:	eb42 0303 	adc.w	r3, r2, r3
 8007806:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	663b      	str	r3, [r7, #96]	@ 0x60
 8007812:	667a      	str	r2, [r7, #100]	@ 0x64
 8007814:	f04f 0200 	mov.w	r2, #0
 8007818:	f04f 0300 	mov.w	r3, #0
 800781c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007820:	4649      	mov	r1, r9
 8007822:	008b      	lsls	r3, r1, #2
 8007824:	4641      	mov	r1, r8
 8007826:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800782a:	4641      	mov	r1, r8
 800782c:	008a      	lsls	r2, r1, #2
 800782e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007832:	f7f9 f9b9 	bl	8000ba8 <__aeabi_uldivmod>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	4b0d      	ldr	r3, [pc, #52]	@ (8007870 <UART_SetConfig+0x4e4>)
 800783c:	fba3 1302 	umull	r1, r3, r3, r2
 8007840:	095b      	lsrs	r3, r3, #5
 8007842:	2164      	movs	r1, #100	@ 0x64
 8007844:	fb01 f303 	mul.w	r3, r1, r3
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	3332      	adds	r3, #50	@ 0x32
 800784e:	4a08      	ldr	r2, [pc, #32]	@ (8007870 <UART_SetConfig+0x4e4>)
 8007850:	fba2 2303 	umull	r2, r3, r2, r3
 8007854:	095b      	lsrs	r3, r3, #5
 8007856:	f003 020f 	and.w	r2, r3, #15
 800785a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4422      	add	r2, r4
 8007862:	609a      	str	r2, [r3, #8]
}
 8007864:	bf00      	nop
 8007866:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800786a:	46bd      	mov	sp, r7
 800786c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007870:	51eb851f 	.word	0x51eb851f

08007874 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007874:	b084      	sub	sp, #16
 8007876:	b580      	push	{r7, lr}
 8007878:	b084      	sub	sp, #16
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
 800787e:	f107 001c 	add.w	r0, r7, #28
 8007882:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007886:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800788a:	2b01      	cmp	r3, #1
 800788c:	d123      	bne.n	80078d6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007892:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80078a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80078b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d105      	bne.n	80078ca <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f9dc 	bl	8007c88 <USB_CoreReset>
 80078d0:	4603      	mov	r3, r0
 80078d2:	73fb      	strb	r3, [r7, #15]
 80078d4:	e01b      	b.n	800790e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f9d0 	bl	8007c88 <USB_CoreReset>
 80078e8:	4603      	mov	r3, r0
 80078ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80078ec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d106      	bne.n	8007902 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8007900:	e005      	b.n	800790e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007906:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800790e:	7fbb      	ldrb	r3, [r7, #30]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d10b      	bne.n	800792c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f043 0206 	orr.w	r2, r3, #6
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f043 0220 	orr.w	r2, r3, #32
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800792c:	7bfb      	ldrb	r3, [r7, #15]
}
 800792e:	4618      	mov	r0, r3
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007938:	b004      	add	sp, #16
 800793a:	4770      	bx	lr

0800793c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f043 0201 	orr.w	r2, r3, #1
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800795e:	b480      	push	{r7}
 8007960:	b083      	sub	sp, #12
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	f023 0201 	bic.w	r2, r3, #1
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	460b      	mov	r3, r1
 800798a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800798c:	2300      	movs	r3, #0
 800798e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800799c:	78fb      	ldrb	r3, [r7, #3]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d115      	bne.n	80079ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80079ae:	200a      	movs	r0, #10
 80079b0:	f7fa fad0 	bl	8001f54 <HAL_Delay>
      ms += 10U;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	330a      	adds	r3, #10
 80079b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f956 	bl	8007c6c <USB_GetMode>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d01e      	beq.n	8007a04 <USB_SetCurrentMode+0x84>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2bc7      	cmp	r3, #199	@ 0xc7
 80079ca:	d9f0      	bls.n	80079ae <USB_SetCurrentMode+0x2e>
 80079cc:	e01a      	b.n	8007a04 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80079ce:	78fb      	ldrb	r3, [r7, #3]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d115      	bne.n	8007a00 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80079e0:	200a      	movs	r0, #10
 80079e2:	f7fa fab7 	bl	8001f54 <HAL_Delay>
      ms += 10U;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	330a      	adds	r3, #10
 80079ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f93d 	bl	8007c6c <USB_GetMode>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d005      	beq.n	8007a04 <USB_SetCurrentMode+0x84>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2bc7      	cmp	r3, #199	@ 0xc7
 80079fc:	d9f0      	bls.n	80079e0 <USB_SetCurrentMode+0x60>
 80079fe:	e001      	b.n	8007a04 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e005      	b.n	8007a10 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2bc8      	cmp	r3, #200	@ 0xc8
 8007a08:	d101      	bne.n	8007a0e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e000      	b.n	8007a10 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a22:	2300      	movs	r3, #0
 8007a24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a32:	d901      	bls.n	8007a38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e01b      	b.n	8007a70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	daf2      	bge.n	8007a26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a40:	2300      	movs	r3, #0
 8007a42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	019b      	lsls	r3, r3, #6
 8007a48:	f043 0220 	orr.w	r2, r3, #32
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	3301      	adds	r3, #1
 8007a54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a5c:	d901      	bls.n	8007a62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e006      	b.n	8007a70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	f003 0320 	and.w	r3, r3, #32
 8007a6a:	2b20      	cmp	r3, #32
 8007a6c:	d0f0      	beq.n	8007a50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3714      	adds	r7, #20
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a84:	2300      	movs	r3, #0
 8007a86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a94:	d901      	bls.n	8007a9a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007a96:	2303      	movs	r3, #3
 8007a98:	e018      	b.n	8007acc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	daf2      	bge.n	8007a88 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2210      	movs	r2, #16
 8007aaa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ab8:	d901      	bls.n	8007abe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e006      	b.n	8007acc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	f003 0310 	and.w	r3, r3, #16
 8007ac6:	2b10      	cmp	r3, #16
 8007ac8:	d0f0      	beq.n	8007aac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3714      	adds	r7, #20
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b089      	sub	sp, #36	@ 0x24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	4611      	mov	r1, r2
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	71fb      	strb	r3, [r7, #7]
 8007aea:	4613      	mov	r3, r2
 8007aec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007af6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d123      	bne.n	8007b46 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007afe:	88bb      	ldrh	r3, [r7, #4]
 8007b00:	3303      	adds	r3, #3
 8007b02:	089b      	lsrs	r3, r3, #2
 8007b04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007b06:	2300      	movs	r3, #0
 8007b08:	61bb      	str	r3, [r7, #24]
 8007b0a:	e018      	b.n	8007b3e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b0c:	79fb      	ldrb	r3, [r7, #7]
 8007b0e:	031a      	lsls	r2, r3, #12
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	4413      	add	r3, r2
 8007b14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b18:	461a      	mov	r2, r3
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	3301      	adds	r3, #1
 8007b24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	3301      	adds	r3, #1
 8007b36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	61bb      	str	r3, [r7, #24]
 8007b3e:	69ba      	ldr	r2, [r7, #24]
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d3e2      	bcc.n	8007b0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3724      	adds	r7, #36	@ 0x24
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b08b      	sub	sp, #44	@ 0x2c
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007b6a:	88fb      	ldrh	r3, [r7, #6]
 8007b6c:	089b      	lsrs	r3, r3, #2
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007b72:	88fb      	ldrh	r3, [r7, #6]
 8007b74:	f003 0303 	and.w	r3, r3, #3
 8007b78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	623b      	str	r3, [r7, #32]
 8007b7e:	e014      	b.n	8007baa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8e:	3301      	adds	r3, #1
 8007b90:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b94:	3301      	adds	r3, #1
 8007b96:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	623b      	str	r3, [r7, #32]
 8007baa:	6a3a      	ldr	r2, [r7, #32]
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d3e6      	bcc.n	8007b80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007bb2:	8bfb      	ldrh	r3, [r7, #30]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d01e      	beq.n	8007bf6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	f107 0310 	add.w	r3, r7, #16
 8007bc8:	6812      	ldr	r2, [r2, #0]
 8007bca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	6a3b      	ldr	r3, [r7, #32]
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	00db      	lsls	r3, r3, #3
 8007bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bdc:	701a      	strb	r2, [r3, #0]
      i++;
 8007bde:	6a3b      	ldr	r3, [r7, #32]
 8007be0:	3301      	adds	r3, #1
 8007be2:	623b      	str	r3, [r7, #32]
      pDest++;
 8007be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be6:	3301      	adds	r3, #1
 8007be8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007bea:	8bfb      	ldrh	r3, [r7, #30]
 8007bec:	3b01      	subs	r3, #1
 8007bee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007bf0:	8bfb      	ldrh	r3, [r7, #30]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1ea      	bne.n	8007bcc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	372c      	adds	r7, #44	@ 0x2c
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	695b      	ldr	r3, [r3, #20]
 8007c10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	4013      	ands	r3, r2
 8007c1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b085      	sub	sp, #20
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	460b      	mov	r3, r1
 8007c34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007c3a:	78fb      	ldrb	r3, [r7, #3]
 8007c3c:	015a      	lsls	r2, r3, #5
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	4413      	add	r3, r2
 8007c42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007c4a:	78fb      	ldrb	r3, [r7, #3]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c5e:	68bb      	ldr	r3, [r7, #8]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3714      	adds	r7, #20
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	695b      	ldr	r3, [r3, #20]
 8007c78:	f003 0301 	and.w	r3, r3, #1
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c90:	2300      	movs	r3, #0
 8007c92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	3301      	adds	r3, #1
 8007c98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ca0:	d901      	bls.n	8007ca6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	e022      	b.n	8007cec <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	daf2      	bge.n	8007c94 <USB_CoreReset+0xc>

  count = 10U;
 8007cae:	230a      	movs	r3, #10
 8007cb0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007cb2:	e002      	b.n	8007cba <USB_CoreReset+0x32>
  {
    count--;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1f9      	bne.n	8007cb4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	f043 0201 	orr.w	r2, r3, #1
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007cd8:	d901      	bls.n	8007cde <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e006      	b.n	8007cec <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d0f0      	beq.n	8007ccc <USB_CoreReset+0x44>

  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b086      	sub	sp, #24
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007d06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007d18:	461a      	mov	r2, r3
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d22:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d2e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d3a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d119      	bne.n	8007d82 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d10a      	bne.n	8007d6c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007d64:	f043 0304 	orr.w	r3, r3, #4
 8007d68:	6013      	str	r3, [r2, #0]
 8007d6a:	e014      	b.n	8007d96 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007d7a:	f023 0304 	bic.w	r3, r3, #4
 8007d7e:	6013      	str	r3, [r2, #0]
 8007d80:	e009      	b.n	8007d96 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007d90:	f023 0304 	bic.w	r3, r3, #4
 8007d94:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d96:	2110      	movs	r1, #16
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7ff fe3d 	bl	8007a18 <USB_FlushTxFifo>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7ff fe67 	bl	8007a7c <USB_FlushRxFifo>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d001      	beq.n	8007db8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007db8:	2300      	movs	r3, #0
 8007dba:	613b      	str	r3, [r7, #16]
 8007dbc:	e015      	b.n	8007dea <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	015a      	lsls	r2, r3, #5
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dca:	461a      	mov	r2, r3
 8007dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8007dd0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dde:	461a      	mov	r2, r3
 8007de0:	2300      	movs	r3, #0
 8007de2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	3301      	adds	r3, #1
 8007de8:	613b      	str	r3, [r7, #16]
 8007dea:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007dee:	461a      	mov	r2, r3
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d3e3      	bcc.n	8007dbe <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8007e02:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a18      	ldr	r2, [pc, #96]	@ (8007e68 <USB_HostInit+0x170>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d10b      	bne.n	8007e24 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e12:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a15      	ldr	r2, [pc, #84]	@ (8007e6c <USB_HostInit+0x174>)
 8007e18:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a14      	ldr	r2, [pc, #80]	@ (8007e70 <USB_HostInit+0x178>)
 8007e1e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007e22:	e009      	b.n	8007e38 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2280      	movs	r2, #128	@ 0x80
 8007e28:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a11      	ldr	r2, [pc, #68]	@ (8007e74 <USB_HostInit+0x17c>)
 8007e2e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a11      	ldr	r2, [pc, #68]	@ (8007e78 <USB_HostInit+0x180>)
 8007e34:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d105      	bne.n	8007e4c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	f043 0210 	orr.w	r2, r3, #16
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	699a      	ldr	r2, [r3, #24]
 8007e50:	4b0a      	ldr	r3, [pc, #40]	@ (8007e7c <USB_HostInit+0x184>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e64:	b004      	add	sp, #16
 8007e66:	4770      	bx	lr
 8007e68:	40040000 	.word	0x40040000
 8007e6c:	01000200 	.word	0x01000200
 8007e70:	00e00300 	.word	0x00e00300
 8007e74:	00600080 	.word	0x00600080
 8007e78:	004000e0 	.word	0x004000e0
 8007e7c:	a3200008 	.word	0xa3200008

08007e80 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007e9e:	f023 0303 	bic.w	r3, r3, #3
 8007ea2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	78fb      	ldrb	r3, [r7, #3]
 8007eae:	f003 0303 	and.w	r3, r3, #3
 8007eb2:	68f9      	ldr	r1, [r7, #12]
 8007eb4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007ebc:	78fb      	ldrb	r3, [r7, #3]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d107      	bne.n	8007ed2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ec8:	461a      	mov	r2, r3
 8007eca:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007ece:	6053      	str	r3, [r2, #4]
 8007ed0:	e00c      	b.n	8007eec <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007ed2:	78fb      	ldrb	r3, [r7, #3]
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d107      	bne.n	8007ee8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ede:	461a      	mov	r2, r3
 8007ee0:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007ee4:	6053      	str	r3, [r2, #4]
 8007ee6:	e001      	b.n	8007eec <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e000      	b.n	8007eee <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b084      	sub	sp, #16
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007f06:	2300      	movs	r3, #0
 8007f08:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007f1a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f28:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007f2a:	2064      	movs	r0, #100	@ 0x64
 8007f2c:	f7fa f812 	bl	8001f54 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007f38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f3c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007f3e:	200a      	movs	r0, #10
 8007f40:	f7fa f808 	bl	8001f54 <HAL_Delay>

  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007f4e:	b480      	push	{r7}
 8007f50:	b085      	sub	sp, #20
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	460b      	mov	r3, r1
 8007f58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007f72:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d109      	bne.n	8007f92 <USB_DriveVbus+0x44>
 8007f7e:	78fb      	ldrb	r3, [r7, #3]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d106      	bne.n	8007f92 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007f8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007f90:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f9c:	d109      	bne.n	8007fb2 <USB_DriveVbus+0x64>
 8007f9e:	78fb      	ldrb	r3, [r7, #3]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d106      	bne.n	8007fb2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007fac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fb0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	0c5b      	lsrs	r3, r3, #17
 8007fde:	f003 0303 	and.w	r3, r3, #3
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3714      	adds	r7, #20
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b085      	sub	sp, #20
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	b29b      	uxth	r3, r3
}
 8008004:	4618      	mov	r0, r3
 8008006:	3714      	adds	r7, #20
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b088      	sub	sp, #32
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	4608      	mov	r0, r1
 800801a:	4611      	mov	r1, r2
 800801c:	461a      	mov	r2, r3
 800801e:	4603      	mov	r3, r0
 8008020:	70fb      	strb	r3, [r7, #3]
 8008022:	460b      	mov	r3, r1
 8008024:	70bb      	strb	r3, [r7, #2]
 8008026:	4613      	mov	r3, r2
 8008028:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800802a:	2300      	movs	r3, #0
 800802c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008032:	78fb      	ldrb	r3, [r7, #3]
 8008034:	015a      	lsls	r2, r3, #5
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	4413      	add	r3, r2
 800803a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800803e:	461a      	mov	r2, r3
 8008040:	f04f 33ff 	mov.w	r3, #4294967295
 8008044:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008046:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800804a:	2b03      	cmp	r3, #3
 800804c:	d87c      	bhi.n	8008148 <USB_HC_Init+0x138>
 800804e:	a201      	add	r2, pc, #4	@ (adr r2, 8008054 <USB_HC_Init+0x44>)
 8008050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008054:	08008065 	.word	0x08008065
 8008058:	0800810b 	.word	0x0800810b
 800805c:	08008065 	.word	0x08008065
 8008060:	080080cd 	.word	0x080080cd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008064:	78fb      	ldrb	r3, [r7, #3]
 8008066:	015a      	lsls	r2, r3, #5
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	4413      	add	r3, r2
 800806c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008070:	461a      	mov	r2, r3
 8008072:	f240 439d 	movw	r3, #1181	@ 0x49d
 8008076:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008078:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800807c:	2b00      	cmp	r3, #0
 800807e:	da10      	bge.n	80080a2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008080:	78fb      	ldrb	r3, [r7, #3]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	4413      	add	r3, r2
 8008088:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	78fa      	ldrb	r2, [r7, #3]
 8008090:	0151      	lsls	r1, r2, #5
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	440a      	add	r2, r1
 8008096:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800809a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800809e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80080a0:	e055      	b.n	800814e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a6f      	ldr	r2, [pc, #444]	@ (8008264 <USB_HC_Init+0x254>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d151      	bne.n	800814e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80080aa:	78fb      	ldrb	r3, [r7, #3]
 80080ac:	015a      	lsls	r2, r3, #5
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	4413      	add	r3, r2
 80080b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	78fa      	ldrb	r2, [r7, #3]
 80080ba:	0151      	lsls	r1, r2, #5
 80080bc:	693a      	ldr	r2, [r7, #16]
 80080be:	440a      	add	r2, r1
 80080c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080c4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80080c8:	60d3      	str	r3, [r2, #12]
      break;
 80080ca:	e040      	b.n	800814e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80080cc:	78fb      	ldrb	r3, [r7, #3]
 80080ce:	015a      	lsls	r2, r3, #5
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	4413      	add	r3, r2
 80080d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080d8:	461a      	mov	r2, r3
 80080da:	f240 639d 	movw	r3, #1693	@ 0x69d
 80080de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80080e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	da34      	bge.n	8008152 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80080e8:	78fb      	ldrb	r3, [r7, #3]
 80080ea:	015a      	lsls	r2, r3, #5
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	4413      	add	r3, r2
 80080f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	78fa      	ldrb	r2, [r7, #3]
 80080f8:	0151      	lsls	r1, r2, #5
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	440a      	add	r2, r1
 80080fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008106:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008108:	e023      	b.n	8008152 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800810a:	78fb      	ldrb	r3, [r7, #3]
 800810c:	015a      	lsls	r2, r3, #5
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	4413      	add	r3, r2
 8008112:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008116:	461a      	mov	r2, r3
 8008118:	f240 2325 	movw	r3, #549	@ 0x225
 800811c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800811e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008122:	2b00      	cmp	r3, #0
 8008124:	da17      	bge.n	8008156 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008126:	78fb      	ldrb	r3, [r7, #3]
 8008128:	015a      	lsls	r2, r3, #5
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	4413      	add	r3, r2
 800812e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	78fa      	ldrb	r2, [r7, #3]
 8008136:	0151      	lsls	r1, r2, #5
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	440a      	add	r2, r1
 800813c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008140:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008144:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008146:	e006      	b.n	8008156 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	77fb      	strb	r3, [r7, #31]
      break;
 800814c:	e004      	b.n	8008158 <USB_HC_Init+0x148>
      break;
 800814e:	bf00      	nop
 8008150:	e002      	b.n	8008158 <USB_HC_Init+0x148>
      break;
 8008152:	bf00      	nop
 8008154:	e000      	b.n	8008158 <USB_HC_Init+0x148>
      break;
 8008156:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008158:	78fb      	ldrb	r3, [r7, #3]
 800815a:	015a      	lsls	r2, r3, #5
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	4413      	add	r3, r2
 8008160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008164:	461a      	mov	r2, r3
 8008166:	2300      	movs	r3, #0
 8008168:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800816a:	78fb      	ldrb	r3, [r7, #3]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	4413      	add	r3, r2
 8008172:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	78fa      	ldrb	r2, [r7, #3]
 800817a:	0151      	lsls	r1, r2, #5
 800817c:	693a      	ldr	r2, [r7, #16]
 800817e:	440a      	add	r2, r1
 8008180:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008184:	f043 0302 	orr.w	r3, r3, #2
 8008188:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008190:	699a      	ldr	r2, [r3, #24]
 8008192:	78fb      	ldrb	r3, [r7, #3]
 8008194:	f003 030f 	and.w	r3, r3, #15
 8008198:	2101      	movs	r1, #1
 800819a:	fa01 f303 	lsl.w	r3, r1, r3
 800819e:	6939      	ldr	r1, [r7, #16]
 80081a0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80081a4:	4313      	orrs	r3, r2
 80081a6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80081b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	da03      	bge.n	80081c4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80081bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081c0:	61bb      	str	r3, [r7, #24]
 80081c2:	e001      	b.n	80081c8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80081c4:	2300      	movs	r3, #0
 80081c6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f7ff fef9 	bl	8007fc0 <USB_GetHostSpeed>
 80081ce:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80081d0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d106      	bne.n	80081e6 <USB_HC_Init+0x1d6>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d003      	beq.n	80081e6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80081de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80081e2:	617b      	str	r3, [r7, #20]
 80081e4:	e001      	b.n	80081ea <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80081e6:	2300      	movs	r3, #0
 80081e8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081ea:	787b      	ldrb	r3, [r7, #1]
 80081ec:	059b      	lsls	r3, r3, #22
 80081ee:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80081f2:	78bb      	ldrb	r3, [r7, #2]
 80081f4:	02db      	lsls	r3, r3, #11
 80081f6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081fa:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80081fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008200:	049b      	lsls	r3, r3, #18
 8008202:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008206:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8008208:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800820a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800820e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	431a      	orrs	r2, r3
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008218:	78fa      	ldrb	r2, [r7, #3]
 800821a:	0151      	lsls	r1, r2, #5
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	440a      	add	r2, r1
 8008220:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008224:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008228:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800822a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800822e:	2b03      	cmp	r3, #3
 8008230:	d003      	beq.n	800823a <USB_HC_Init+0x22a>
 8008232:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008236:	2b01      	cmp	r3, #1
 8008238:	d10f      	bne.n	800825a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800823a:	78fb      	ldrb	r3, [r7, #3]
 800823c:	015a      	lsls	r2, r3, #5
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	4413      	add	r3, r2
 8008242:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	78fa      	ldrb	r2, [r7, #3]
 800824a:	0151      	lsls	r1, r2, #5
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	440a      	add	r2, r1
 8008250:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008254:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008258:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800825a:	7ffb      	ldrb	r3, [r7, #31]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3720      	adds	r7, #32
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	40040000 	.word	0x40040000

08008268 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b08c      	sub	sp, #48	@ 0x30
 800826c:	af02      	add	r7, sp, #8
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	4613      	mov	r3, r2
 8008274:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	785b      	ldrb	r3, [r3, #1]
 800827e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008280:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008284:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	4a5d      	ldr	r2, [pc, #372]	@ (8008400 <USB_HC_StartXfer+0x198>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d12f      	bne.n	80082ee <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800828e:	79fb      	ldrb	r3, [r7, #7]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d11c      	bne.n	80082ce <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	7c9b      	ldrb	r3, [r3, #18]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d003      	beq.n	80082a4 <USB_HC_StartXfer+0x3c>
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	7c9b      	ldrb	r3, [r3, #18]
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d124      	bne.n	80082ee <USB_HC_StartXfer+0x86>
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	799b      	ldrb	r3, [r3, #6]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d120      	bne.n	80082ee <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	015a      	lsls	r2, r3, #5
 80082b0:	6a3b      	ldr	r3, [r7, #32]
 80082b2:	4413      	add	r3, r2
 80082b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	69fa      	ldr	r2, [r7, #28]
 80082bc:	0151      	lsls	r1, r2, #5
 80082be:	6a3a      	ldr	r2, [r7, #32]
 80082c0:	440a      	add	r2, r1
 80082c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082ca:	60d3      	str	r3, [r2, #12]
 80082cc:	e00f      	b.n	80082ee <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	791b      	ldrb	r3, [r3, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d10b      	bne.n	80082ee <USB_HC_StartXfer+0x86>
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	795b      	ldrb	r3, [r3, #5]
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d107      	bne.n	80082ee <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	785b      	ldrb	r3, [r3, #1]
 80082e2:	4619      	mov	r1, r3
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f000 fb6b 	bl	80089c0 <USB_DoPing>
        return HAL_OK;
 80082ea:	2300      	movs	r3, #0
 80082ec:	e232      	b.n	8008754 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	799b      	ldrb	r3, [r3, #6]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d158      	bne.n	80083a8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80082f6:	2301      	movs	r3, #1
 80082f8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	78db      	ldrb	r3, [r3, #3]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d007      	beq.n	8008312 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008302:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	8a92      	ldrh	r2, [r2, #20]
 8008308:	fb03 f202 	mul.w	r2, r3, r2
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	61da      	str	r2, [r3, #28]
 8008310:	e07c      	b.n	800840c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	7c9b      	ldrb	r3, [r3, #18]
 8008316:	2b01      	cmp	r3, #1
 8008318:	d130      	bne.n	800837c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	2bbc      	cmp	r3, #188	@ 0xbc
 8008320:	d918      	bls.n	8008354 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	8a9b      	ldrh	r3, [r3, #20]
 8008326:	461a      	mov	r2, r3
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	69da      	ldr	r2, [r3, #28]
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d003      	beq.n	8008344 <USB_HC_StartXfer+0xdc>
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	2b02      	cmp	r3, #2
 8008342:	d103      	bne.n	800834c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	2202      	movs	r2, #2
 8008348:	60da      	str	r2, [r3, #12]
 800834a:	e05f      	b.n	800840c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	2201      	movs	r2, #1
 8008350:	60da      	str	r2, [r3, #12]
 8008352:	e05b      	b.n	800840c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	6a1a      	ldr	r2, [r3, #32]
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d007      	beq.n	8008374 <USB_HC_StartXfer+0x10c>
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	2b02      	cmp	r3, #2
 800836a:	d003      	beq.n	8008374 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2204      	movs	r2, #4
 8008370:	60da      	str	r2, [r3, #12]
 8008372:	e04b      	b.n	800840c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	2203      	movs	r2, #3
 8008378:	60da      	str	r2, [r3, #12]
 800837a:	e047      	b.n	800840c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800837c:	79fb      	ldrb	r3, [r7, #7]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d10d      	bne.n	800839e <USB_HC_StartXfer+0x136>
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	8a92      	ldrh	r2, [r2, #20]
 800838a:	4293      	cmp	r3, r2
 800838c:	d907      	bls.n	800839e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800838e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	8a92      	ldrh	r2, [r2, #20]
 8008394:	fb03 f202 	mul.w	r2, r3, r2
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	61da      	str	r2, [r3, #28]
 800839c:	e036      	b.n	800840c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	6a1a      	ldr	r2, [r3, #32]
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	61da      	str	r2, [r3, #28]
 80083a6:	e031      	b.n	800840c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	6a1b      	ldr	r3, [r3, #32]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d018      	beq.n	80083e2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	6a1b      	ldr	r3, [r3, #32]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	8a92      	ldrh	r2, [r2, #20]
 80083b8:	4413      	add	r3, r2
 80083ba:	3b01      	subs	r3, #1
 80083bc:	68ba      	ldr	r2, [r7, #8]
 80083be:	8a92      	ldrh	r2, [r2, #20]
 80083c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80083c4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80083c6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80083c8:	8b7b      	ldrh	r3, [r7, #26]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d90b      	bls.n	80083e6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80083ce:	8b7b      	ldrh	r3, [r7, #26]
 80083d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80083d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	8a92      	ldrh	r2, [r2, #20]
 80083d8:	fb03 f202 	mul.w	r2, r3, r2
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	61da      	str	r2, [r3, #28]
 80083e0:	e001      	b.n	80083e6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80083e2:	2301      	movs	r3, #1
 80083e4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	78db      	ldrb	r3, [r3, #3]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00a      	beq.n	8008404 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80083ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	8a92      	ldrh	r2, [r2, #20]
 80083f4:	fb03 f202 	mul.w	r2, r3, r2
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	61da      	str	r2, [r3, #28]
 80083fc:	e006      	b.n	800840c <USB_HC_StartXfer+0x1a4>
 80083fe:	bf00      	nop
 8008400:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	6a1a      	ldr	r2, [r3, #32]
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	69db      	ldr	r3, [r3, #28]
 8008410:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008414:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008416:	04d9      	lsls	r1, r3, #19
 8008418:	4ba3      	ldr	r3, [pc, #652]	@ (80086a8 <USB_HC_StartXfer+0x440>)
 800841a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800841c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	7d9b      	ldrb	r3, [r3, #22]
 8008422:	075b      	lsls	r3, r3, #29
 8008424:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008428:	69f9      	ldr	r1, [r7, #28]
 800842a:	0148      	lsls	r0, r1, #5
 800842c:	6a39      	ldr	r1, [r7, #32]
 800842e:	4401      	add	r1, r0
 8008430:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008434:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008436:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008438:	79fb      	ldrb	r3, [r7, #7]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d009      	beq.n	8008452 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	6999      	ldr	r1, [r3, #24]
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	4413      	add	r3, r2
 800844a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800844e:	460a      	mov	r2, r1
 8008450:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f003 0301 	and.w	r3, r3, #1
 800845e:	2b00      	cmp	r3, #0
 8008460:	bf0c      	ite	eq
 8008462:	2301      	moveq	r3, #1
 8008464:	2300      	movne	r3, #0
 8008466:	b2db      	uxtb	r3, r3
 8008468:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	6a3b      	ldr	r3, [r7, #32]
 8008470:	4413      	add	r3, r2
 8008472:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	69fa      	ldr	r2, [r7, #28]
 800847a:	0151      	lsls	r1, r2, #5
 800847c:	6a3a      	ldr	r2, [r7, #32]
 800847e:	440a      	add	r2, r1
 8008480:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008484:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008488:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	6a3b      	ldr	r3, [r7, #32]
 8008490:	4413      	add	r3, r2
 8008492:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	7e7b      	ldrb	r3, [r7, #25]
 800849a:	075b      	lsls	r3, r3, #29
 800849c:	69f9      	ldr	r1, [r7, #28]
 800849e:	0148      	lsls	r0, r1, #5
 80084a0:	6a39      	ldr	r1, [r7, #32]
 80084a2:	4401      	add	r1, r0
 80084a4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80084a8:	4313      	orrs	r3, r2
 80084aa:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	799b      	ldrb	r3, [r3, #6]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	f040 80c3 	bne.w	800863c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	7c5b      	ldrb	r3, [r3, #17]
 80084ba:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80084c0:	4313      	orrs	r3, r2
 80084c2:	69fa      	ldr	r2, [r7, #28]
 80084c4:	0151      	lsls	r1, r2, #5
 80084c6:	6a3a      	ldr	r2, [r7, #32]
 80084c8:	440a      	add	r2, r1
 80084ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80084ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80084d2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	015a      	lsls	r2, r3, #5
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	4413      	add	r3, r2
 80084dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	69fa      	ldr	r2, [r7, #28]
 80084e4:	0151      	lsls	r1, r2, #5
 80084e6:	6a3a      	ldr	r2, [r7, #32]
 80084e8:	440a      	add	r2, r1
 80084ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084ee:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80084f2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	79db      	ldrb	r3, [r3, #7]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d123      	bne.n	8008544 <USB_HC_StartXfer+0x2dc>
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	78db      	ldrb	r3, [r3, #3]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d11f      	bne.n	8008544 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	015a      	lsls	r2, r3, #5
 8008508:	6a3b      	ldr	r3, [r7, #32]
 800850a:	4413      	add	r3, r2
 800850c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	69fa      	ldr	r2, [r7, #28]
 8008514:	0151      	lsls	r1, r2, #5
 8008516:	6a3a      	ldr	r2, [r7, #32]
 8008518:	440a      	add	r2, r1
 800851a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800851e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008522:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	6a3b      	ldr	r3, [r7, #32]
 800852a:	4413      	add	r3, r2
 800852c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	69fa      	ldr	r2, [r7, #28]
 8008534:	0151      	lsls	r1, r2, #5
 8008536:	6a3a      	ldr	r2, [r7, #32]
 8008538:	440a      	add	r2, r1
 800853a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800853e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008542:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	7c9b      	ldrb	r3, [r3, #18]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d003      	beq.n	8008554 <USB_HC_StartXfer+0x2ec>
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	7c9b      	ldrb	r3, [r3, #18]
 8008550:	2b03      	cmp	r3, #3
 8008552:	d117      	bne.n	8008584 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008558:	2b01      	cmp	r3, #1
 800855a:	d113      	bne.n	8008584 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	78db      	ldrb	r3, [r3, #3]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d10f      	bne.n	8008584 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	6a3b      	ldr	r3, [r7, #32]
 800856a:	4413      	add	r3, r2
 800856c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	69fa      	ldr	r2, [r7, #28]
 8008574:	0151      	lsls	r1, r2, #5
 8008576:	6a3a      	ldr	r2, [r7, #32]
 8008578:	440a      	add	r2, r1
 800857a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800857e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008582:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	7c9b      	ldrb	r3, [r3, #18]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d162      	bne.n	8008652 <USB_HC_StartXfer+0x3ea>
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	78db      	ldrb	r3, [r3, #3]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d15e      	bne.n	8008652 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	3b01      	subs	r3, #1
 800859a:	2b03      	cmp	r3, #3
 800859c:	d858      	bhi.n	8008650 <USB_HC_StartXfer+0x3e8>
 800859e:	a201      	add	r2, pc, #4	@ (adr r2, 80085a4 <USB_HC_StartXfer+0x33c>)
 80085a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a4:	080085b5 	.word	0x080085b5
 80085a8:	080085d7 	.word	0x080085d7
 80085ac:	080085f9 	.word	0x080085f9
 80085b0:	0800861b 	.word	0x0800861b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	6a3b      	ldr	r3, [r7, #32]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	69fa      	ldr	r2, [r7, #28]
 80085c4:	0151      	lsls	r1, r2, #5
 80085c6:	6a3a      	ldr	r2, [r7, #32]
 80085c8:	440a      	add	r2, r1
 80085ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085d2:	6053      	str	r3, [r2, #4]
          break;
 80085d4:	e03d      	b.n	8008652 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	015a      	lsls	r2, r3, #5
 80085da:	6a3b      	ldr	r3, [r7, #32]
 80085dc:	4413      	add	r3, r2
 80085de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	69fa      	ldr	r2, [r7, #28]
 80085e6:	0151      	lsls	r1, r2, #5
 80085e8:	6a3a      	ldr	r2, [r7, #32]
 80085ea:	440a      	add	r2, r1
 80085ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085f0:	f043 030e 	orr.w	r3, r3, #14
 80085f4:	6053      	str	r3, [r2, #4]
          break;
 80085f6:	e02c      	b.n	8008652 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	015a      	lsls	r2, r3, #5
 80085fc:	6a3b      	ldr	r3, [r7, #32]
 80085fe:	4413      	add	r3, r2
 8008600:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	69fa      	ldr	r2, [r7, #28]
 8008608:	0151      	lsls	r1, r2, #5
 800860a:	6a3a      	ldr	r2, [r7, #32]
 800860c:	440a      	add	r2, r1
 800860e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008612:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008616:	6053      	str	r3, [r2, #4]
          break;
 8008618:	e01b      	b.n	8008652 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	015a      	lsls	r2, r3, #5
 800861e:	6a3b      	ldr	r3, [r7, #32]
 8008620:	4413      	add	r3, r2
 8008622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	69fa      	ldr	r2, [r7, #28]
 800862a:	0151      	lsls	r1, r2, #5
 800862c:	6a3a      	ldr	r2, [r7, #32]
 800862e:	440a      	add	r2, r1
 8008630:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008634:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008638:	6053      	str	r3, [r2, #4]
          break;
 800863a:	e00a      	b.n	8008652 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	015a      	lsls	r2, r3, #5
 8008640:	6a3b      	ldr	r3, [r7, #32]
 8008642:	4413      	add	r3, r2
 8008644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008648:	461a      	mov	r2, r3
 800864a:	2300      	movs	r3, #0
 800864c:	6053      	str	r3, [r2, #4]
 800864e:	e000      	b.n	8008652 <USB_HC_StartXfer+0x3ea>
          break;
 8008650:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	015a      	lsls	r2, r3, #5
 8008656:	6a3b      	ldr	r3, [r7, #32]
 8008658:	4413      	add	r3, r2
 800865a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008668:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	78db      	ldrb	r3, [r3, #3]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d004      	beq.n	800867c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008678:	613b      	str	r3, [r7, #16]
 800867a:	e003      	b.n	8008684 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008682:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800868a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	015a      	lsls	r2, r3, #5
 8008690:	6a3b      	ldr	r3, [r7, #32]
 8008692:	4413      	add	r3, r2
 8008694:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008698:	461a      	mov	r2, r3
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800869e:	79fb      	ldrb	r3, [r7, #7]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d003      	beq.n	80086ac <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80086a4:	2300      	movs	r3, #0
 80086a6:	e055      	b.n	8008754 <USB_HC_StartXfer+0x4ec>
 80086a8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	78db      	ldrb	r3, [r3, #3]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d14e      	bne.n	8008752 <USB_HC_StartXfer+0x4ea>
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	6a1b      	ldr	r3, [r3, #32]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d04a      	beq.n	8008752 <USB_HC_StartXfer+0x4ea>
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	79db      	ldrb	r3, [r3, #7]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d146      	bne.n	8008752 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	7c9b      	ldrb	r3, [r3, #18]
 80086c8:	2b03      	cmp	r3, #3
 80086ca:	d831      	bhi.n	8008730 <USB_HC_StartXfer+0x4c8>
 80086cc:	a201      	add	r2, pc, #4	@ (adr r2, 80086d4 <USB_HC_StartXfer+0x46c>)
 80086ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d2:	bf00      	nop
 80086d4:	080086e5 	.word	0x080086e5
 80086d8:	08008709 	.word	0x08008709
 80086dc:	080086e5 	.word	0x080086e5
 80086e0:	08008709 	.word	0x08008709
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	6a1b      	ldr	r3, [r3, #32]
 80086e8:	3303      	adds	r3, #3
 80086ea:	089b      	lsrs	r3, r3, #2
 80086ec:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80086ee:	8afa      	ldrh	r2, [r7, #22]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d91c      	bls.n	8008734 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	f043 0220 	orr.w	r2, r3, #32
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	619a      	str	r2, [r3, #24]
        }
        break;
 8008706:	e015      	b.n	8008734 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	6a1b      	ldr	r3, [r3, #32]
 800870c:	3303      	adds	r3, #3
 800870e:	089b      	lsrs	r3, r3, #2
 8008710:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008712:	8afa      	ldrh	r2, [r7, #22]
 8008714:	6a3b      	ldr	r3, [r7, #32]
 8008716:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	b29b      	uxth	r3, r3
 800871e:	429a      	cmp	r2, r3
 8008720:	d90a      	bls.n	8008738 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	619a      	str	r2, [r3, #24]
        }
        break;
 800872e:	e003      	b.n	8008738 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008730:	bf00      	nop
 8008732:	e002      	b.n	800873a <USB_HC_StartXfer+0x4d2>
        break;
 8008734:	bf00      	nop
 8008736:	e000      	b.n	800873a <USB_HC_StartXfer+0x4d2>
        break;
 8008738:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	6999      	ldr	r1, [r3, #24]
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	785a      	ldrb	r2, [r3, #1]
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	b29b      	uxth	r3, r3
 8008748:	2000      	movs	r0, #0
 800874a:	9000      	str	r0, [sp, #0]
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f7ff f9c3 	bl	8007ad8 <USB_WritePacket>
  }

  return HAL_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3728      	adds	r7, #40	@ 0x28
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	b29b      	uxth	r3, r3
}
 8008772:	4618      	mov	r0, r3
 8008774:	3714      	adds	r7, #20
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800877e:	b480      	push	{r7}
 8008780:	b089      	sub	sp, #36	@ 0x24
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
 8008786:	460b      	mov	r3, r1
 8008788:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800878e:	78fb      	ldrb	r3, [r7, #3]
 8008790:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008792:	2300      	movs	r3, #0
 8008794:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	015a      	lsls	r2, r3, #5
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	4413      	add	r3, r2
 800879e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	0c9b      	lsrs	r3, r3, #18
 80087a6:	f003 0303 	and.w	r3, r3, #3
 80087aa:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	015a      	lsls	r2, r3, #5
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	4413      	add	r3, r2
 80087b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	0fdb      	lsrs	r3, r3, #31
 80087bc:	f003 0301 	and.w	r3, r3, #1
 80087c0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	015a      	lsls	r2, r3, #5
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	4413      	add	r3, r2
 80087ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	0fdb      	lsrs	r3, r3, #31
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	f003 0320 	and.w	r3, r3, #32
 80087e0:	2b20      	cmp	r3, #32
 80087e2:	d10d      	bne.n	8008800 <USB_HC_Halt+0x82>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d10a      	bne.n	8008800 <USB_HC_Halt+0x82>
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d005      	beq.n	80087fc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d002      	beq.n	80087fc <USB_HC_Halt+0x7e>
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2b03      	cmp	r3, #3
 80087fa:	d101      	bne.n	8008800 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80087fc:	2300      	movs	r3, #0
 80087fe:	e0d8      	b.n	80089b2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d002      	beq.n	800880c <USB_HC_Halt+0x8e>
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	2b02      	cmp	r3, #2
 800880a:	d173      	bne.n	80088f4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	015a      	lsls	r2, r3, #5
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	4413      	add	r3, r2
 8008814:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	69ba      	ldr	r2, [r7, #24]
 800881c:	0151      	lsls	r1, r2, #5
 800881e:	69fa      	ldr	r2, [r7, #28]
 8008820:	440a      	add	r2, r1
 8008822:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008826:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800882a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	f003 0320 	and.w	r3, r3, #32
 8008834:	2b00      	cmp	r3, #0
 8008836:	d14a      	bne.n	80088ce <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800883c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008840:	2b00      	cmp	r3, #0
 8008842:	d133      	bne.n	80088ac <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	015a      	lsls	r2, r3, #5
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	4413      	add	r3, r2
 800884c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	69ba      	ldr	r2, [r7, #24]
 8008854:	0151      	lsls	r1, r2, #5
 8008856:	69fa      	ldr	r2, [r7, #28]
 8008858:	440a      	add	r2, r1
 800885a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800885e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008862:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	015a      	lsls	r2, r3, #5
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	4413      	add	r3, r2
 800886c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	69ba      	ldr	r2, [r7, #24]
 8008874:	0151      	lsls	r1, r2, #5
 8008876:	69fa      	ldr	r2, [r7, #28]
 8008878:	440a      	add	r2, r1
 800887a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800887e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008882:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	3301      	adds	r3, #1
 8008888:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008890:	d82e      	bhi.n	80088f0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	015a      	lsls	r2, r3, #5
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	4413      	add	r3, r2
 800889a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088a8:	d0ec      	beq.n	8008884 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80088aa:	e081      	b.n	80089b0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	015a      	lsls	r2, r3, #5
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	4413      	add	r3, r2
 80088b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	69ba      	ldr	r2, [r7, #24]
 80088bc:	0151      	lsls	r1, r2, #5
 80088be:	69fa      	ldr	r2, [r7, #28]
 80088c0:	440a      	add	r2, r1
 80088c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80088ca:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80088cc:	e070      	b.n	80089b0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	015a      	lsls	r2, r3, #5
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	4413      	add	r3, r2
 80088d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	69ba      	ldr	r2, [r7, #24]
 80088de:	0151      	lsls	r1, r2, #5
 80088e0:	69fa      	ldr	r2, [r7, #28]
 80088e2:	440a      	add	r2, r1
 80088e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80088ec:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80088ee:	e05f      	b.n	80089b0 <USB_HC_Halt+0x232>
            break;
 80088f0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80088f2:	e05d      	b.n	80089b0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	015a      	lsls	r2, r3, #5
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	4413      	add	r3, r2
 80088fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	69ba      	ldr	r2, [r7, #24]
 8008904:	0151      	lsls	r1, r2, #5
 8008906:	69fa      	ldr	r2, [r7, #28]
 8008908:	440a      	add	r2, r1
 800890a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800890e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008912:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d133      	bne.n	800898c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	015a      	lsls	r2, r3, #5
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	4413      	add	r3, r2
 800892c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	69ba      	ldr	r2, [r7, #24]
 8008934:	0151      	lsls	r1, r2, #5
 8008936:	69fa      	ldr	r2, [r7, #28]
 8008938:	440a      	add	r2, r1
 800893a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800893e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008942:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	015a      	lsls	r2, r3, #5
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	4413      	add	r3, r2
 800894c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	69ba      	ldr	r2, [r7, #24]
 8008954:	0151      	lsls	r1, r2, #5
 8008956:	69fa      	ldr	r2, [r7, #28]
 8008958:	440a      	add	r2, r1
 800895a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800895e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008962:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	3301      	adds	r3, #1
 8008968:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008970:	d81d      	bhi.n	80089ae <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	015a      	lsls	r2, r3, #5
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	4413      	add	r3, r2
 800897a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008984:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008988:	d0ec      	beq.n	8008964 <USB_HC_Halt+0x1e6>
 800898a:	e011      	b.n	80089b0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	015a      	lsls	r2, r3, #5
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	4413      	add	r3, r2
 8008994:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	69ba      	ldr	r2, [r7, #24]
 800899c:	0151      	lsls	r1, r2, #5
 800899e:	69fa      	ldr	r2, [r7, #28]
 80089a0:	440a      	add	r2, r1
 80089a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80089aa:	6013      	str	r3, [r2, #0]
 80089ac:	e000      	b.n	80089b0 <USB_HC_Halt+0x232>
          break;
 80089ae:	bf00      	nop
    }
  }

  return HAL_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3724      	adds	r7, #36	@ 0x24
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
	...

080089c0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b087      	sub	sp, #28
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	460b      	mov	r3, r1
 80089ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80089d0:	78fb      	ldrb	r3, [r7, #3]
 80089d2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80089d4:	2301      	movs	r3, #1
 80089d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	04da      	lsls	r2, r3, #19
 80089dc:	4b15      	ldr	r3, [pc, #84]	@ (8008a34 <USB_DoPing+0x74>)
 80089de:	4013      	ands	r3, r2
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	0151      	lsls	r1, r2, #5
 80089e4:	697a      	ldr	r2, [r7, #20]
 80089e6:	440a      	add	r2, r1
 80089e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80089f0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	015a      	lsls	r2, r3, #5
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	4413      	add	r3, r2
 80089fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008a08:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a10:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	015a      	lsls	r2, r3, #5
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	4413      	add	r3, r2
 8008a1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a1e:	461a      	mov	r2, r3
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	371c      	adds	r7, #28
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	1ff80000 	.word	0x1ff80000

08008a38 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b088      	sub	sp, #32
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f7fe ff86 	bl	800795e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008a52:	2110      	movs	r1, #16
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7fe ffdf 	bl	8007a18 <USB_FlushTxFifo>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d001      	beq.n	8008a64 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f7ff f809 	bl	8007a7c <USB_FlushRxFifo>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008a74:	2300      	movs	r3, #0
 8008a76:	61bb      	str	r3, [r7, #24]
 8008a78:	e01f      	b.n	8008aba <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	015a      	lsls	r2, r3, #5
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	4413      	add	r3, r2
 8008a82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008a90:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a98:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008aa0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	015a      	lsls	r2, r3, #5
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008aae:	461a      	mov	r2, r3
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	61bb      	str	r3, [r7, #24]
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	2b0f      	cmp	r3, #15
 8008abe:	d9dc      	bls.n	8008a7a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	61bb      	str	r3, [r7, #24]
 8008ac4:	e034      	b.n	8008b30 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	015a      	lsls	r2, r3, #5
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	4413      	add	r3, r2
 8008ace:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008adc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ae4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008aec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	015a      	lsls	r2, r3, #5
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	4413      	add	r3, r2
 8008af6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008afa:	461a      	mov	r2, r3
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	3301      	adds	r3, #1
 8008b04:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008b0c:	d80c      	bhi.n	8008b28 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	015a      	lsls	r2, r3, #5
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	4413      	add	r3, r2
 8008b16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b24:	d0ec      	beq.n	8008b00 <USB_StopHost+0xc8>
 8008b26:	e000      	b.n	8008b2a <USB_StopHost+0xf2>
        break;
 8008b28:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	61bb      	str	r3, [r7, #24]
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	2b0f      	cmp	r3, #15
 8008b34:	d9c7      	bls.n	8008ac6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b42:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f04f 32ff 	mov.w	r2, #4294967295
 8008b4a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f7fe fef5 	bl	800793c <USB_EnableGlobalInt>

  return ret;
 8008b52:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3720      	adds	r7, #32
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008b5c:	b590      	push	{r4, r7, lr}
 8008b5e:	b089      	sub	sp, #36	@ 0x24
 8008b60:	af04      	add	r7, sp, #16
 8008b62:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008b64:	2301      	movs	r3, #1
 8008b66:	2202      	movs	r2, #2
 8008b68:	2102      	movs	r1, #2
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 fc83 	bl	8009476 <USBH_FindInterface>
 8008b70:	4603      	mov	r3, r0
 8008b72:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
 8008b76:	2bff      	cmp	r3, #255	@ 0xff
 8008b78:	d002      	beq.n	8008b80 <USBH_CDC_InterfaceInit+0x24>
 8008b7a:	7bfb      	ldrb	r3, [r7, #15]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d901      	bls.n	8008b84 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008b80:	2302      	movs	r3, #2
 8008b82:	e13d      	b.n	8008e00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008b84:	7bfb      	ldrb	r3, [r7, #15]
 8008b86:	4619      	mov	r1, r3
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 fc58 	bl	800943e <USBH_SelectInterface>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008b92:	7bbb      	ldrb	r3, [r7, #14]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d001      	beq.n	8008b9c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008b98:	2302      	movs	r3, #2
 8008b9a:	e131      	b.n	8008e00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008ba2:	2050      	movs	r0, #80	@ 0x50
 8008ba4:	f002 fb6a 	bl	800b27c <malloc>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d101      	bne.n	8008bc0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	e11f      	b.n	8008e00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008bc0:	2250      	movs	r2, #80	@ 0x50
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	68b8      	ldr	r0, [r7, #8]
 8008bc6:	f003 fa77 	bl	800c0b8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	211a      	movs	r1, #26
 8008bd0:	fb01 f303 	mul.w	r3, r1, r3
 8008bd4:	4413      	add	r3, r2
 8008bd6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	b25b      	sxtb	r3, r3
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	da15      	bge.n	8008c0e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008be2:	7bfb      	ldrb	r3, [r7, #15]
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	211a      	movs	r1, #26
 8008be8:	fb01 f303 	mul.w	r3, r1, r3
 8008bec:	4413      	add	r3, r2
 8008bee:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008bf2:	781a      	ldrb	r2, [r3, #0]
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	211a      	movs	r1, #26
 8008bfe:	fb01 f303 	mul.w	r3, r1, r3
 8008c02:	4413      	add	r3, r2
 8008c04:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008c08:	881a      	ldrh	r2, [r3, #0]
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	785b      	ldrb	r3, [r3, #1]
 8008c12:	4619      	mov	r1, r3
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f001 ffc4 	bl	800aba2 <USBH_AllocPipe>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	7819      	ldrb	r1, [r3, #0]
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	7858      	ldrb	r0, [r3, #1]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c36:	68ba      	ldr	r2, [r7, #8]
 8008c38:	8952      	ldrh	r2, [r2, #10]
 8008c3a:	9202      	str	r2, [sp, #8]
 8008c3c:	2203      	movs	r2, #3
 8008c3e:	9201      	str	r2, [sp, #4]
 8008c40:	9300      	str	r3, [sp, #0]
 8008c42:	4623      	mov	r3, r4
 8008c44:	4602      	mov	r2, r0
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f001 ff7c 	bl	800ab44 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	2200      	movs	r2, #0
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f002 fa8b 	bl	800b170 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	210a      	movs	r1, #10
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fc08 	bl	8009476 <USBH_FindInterface>
 8008c66:	4603      	mov	r3, r0
 8008c68:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008c6a:	7bfb      	ldrb	r3, [r7, #15]
 8008c6c:	2bff      	cmp	r3, #255	@ 0xff
 8008c6e:	d002      	beq.n	8008c76 <USBH_CDC_InterfaceInit+0x11a>
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d901      	bls.n	8008c7a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008c76:	2302      	movs	r3, #2
 8008c78:	e0c2      	b.n	8008e00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008c7a:	7bfb      	ldrb	r3, [r7, #15]
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	211a      	movs	r1, #26
 8008c80:	fb01 f303 	mul.w	r3, r1, r3
 8008c84:	4413      	add	r3, r2
 8008c86:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	b25b      	sxtb	r3, r3
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	da16      	bge.n	8008cc0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008c92:	7bfb      	ldrb	r3, [r7, #15]
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	211a      	movs	r1, #26
 8008c98:	fb01 f303 	mul.w	r3, r1, r3
 8008c9c:	4413      	add	r3, r2
 8008c9e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008ca2:	781a      	ldrb	r2, [r3, #0]
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	211a      	movs	r1, #26
 8008cae:	fb01 f303 	mul.w	r3, r1, r3
 8008cb2:	4413      	add	r3, r2
 8008cb4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008cb8:	881a      	ldrh	r2, [r3, #0]
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	835a      	strh	r2, [r3, #26]
 8008cbe:	e015      	b.n	8008cec <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	211a      	movs	r1, #26
 8008cc6:	fb01 f303 	mul.w	r3, r1, r3
 8008cca:	4413      	add	r3, r2
 8008ccc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008cd0:	781a      	ldrb	r2, [r3, #0]
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008cd6:	7bfb      	ldrb	r3, [r7, #15]
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	211a      	movs	r1, #26
 8008cdc:	fb01 f303 	mul.w	r3, r1, r3
 8008ce0:	4413      	add	r3, r2
 8008ce2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008ce6:	881a      	ldrh	r2, [r3, #0]
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	211a      	movs	r1, #26
 8008cf2:	fb01 f303 	mul.w	r3, r1, r3
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	b25b      	sxtb	r3, r3
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	da16      	bge.n	8008d32 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	211a      	movs	r1, #26
 8008d0a:	fb01 f303 	mul.w	r3, r1, r3
 8008d0e:	4413      	add	r3, r2
 8008d10:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008d14:	781a      	ldrb	r2, [r3, #0]
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008d1a:	7bfb      	ldrb	r3, [r7, #15]
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	211a      	movs	r1, #26
 8008d20:	fb01 f303 	mul.w	r3, r1, r3
 8008d24:	4413      	add	r3, r2
 8008d26:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008d2a:	881a      	ldrh	r2, [r3, #0]
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	835a      	strh	r2, [r3, #26]
 8008d30:	e015      	b.n	8008d5e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	211a      	movs	r1, #26
 8008d38:	fb01 f303 	mul.w	r3, r1, r3
 8008d3c:	4413      	add	r3, r2
 8008d3e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008d42:	781a      	ldrb	r2, [r3, #0]
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008d48:	7bfb      	ldrb	r3, [r7, #15]
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	211a      	movs	r1, #26
 8008d4e:	fb01 f303 	mul.w	r3, r1, r3
 8008d52:	4413      	add	r3, r2
 8008d54:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008d58:	881a      	ldrh	r2, [r3, #0]
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	7b9b      	ldrb	r3, [r3, #14]
 8008d62:	4619      	mov	r1, r3
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f001 ff1c 	bl	800aba2 <USBH_AllocPipe>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	7bdb      	ldrb	r3, [r3, #15]
 8008d76:	4619      	mov	r1, r3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f001 ff12 	bl	800aba2 <USBH_AllocPipe>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	461a      	mov	r2, r3
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	7b59      	ldrb	r1, [r3, #13]
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	7b98      	ldrb	r0, [r3, #14]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	8b12      	ldrh	r2, [r2, #24]
 8008d9e:	9202      	str	r2, [sp, #8]
 8008da0:	2202      	movs	r2, #2
 8008da2:	9201      	str	r2, [sp, #4]
 8008da4:	9300      	str	r3, [sp, #0]
 8008da6:	4623      	mov	r3, r4
 8008da8:	4602      	mov	r2, r0
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f001 feca 	bl	800ab44 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	7b19      	ldrb	r1, [r3, #12]
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	7bd8      	ldrb	r0, [r3, #15]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	8b52      	ldrh	r2, [r2, #26]
 8008dc8:	9202      	str	r2, [sp, #8]
 8008dca:	2202      	movs	r2, #2
 8008dcc:	9201      	str	r2, [sp, #4]
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	4623      	mov	r3, r4
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f001 feb5 	bl	800ab44 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	7b5b      	ldrb	r3, [r3, #13]
 8008de6:	2200      	movs	r2, #0
 8008de8:	4619      	mov	r1, r3
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f002 f9c0 	bl	800b170 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	7b1b      	ldrb	r3, [r3, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	4619      	mov	r1, r3
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f002 f9b9 	bl	800b170 <USBH_LL_SetToggle>

  return USBH_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd90      	pop	{r4, r7, pc}

08008e08 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e16:	69db      	ldr	r3, [r3, #28]
 8008e18:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00e      	beq.n	8008e40 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	4619      	mov	r1, r3
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f001 feaa 	bl	800ab82 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f001 fed5 	bl	800abe4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	7b1b      	ldrb	r3, [r3, #12]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00e      	beq.n	8008e66 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	7b1b      	ldrb	r3, [r3, #12]
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f001 fe97 	bl	800ab82 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	7b1b      	ldrb	r3, [r3, #12]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f001 fec2 	bl	800abe4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	7b5b      	ldrb	r3, [r3, #13]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00e      	beq.n	8008e8c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	7b5b      	ldrb	r3, [r3, #13]
 8008e72:	4619      	mov	r1, r3
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f001 fe84 	bl	800ab82 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	7b5b      	ldrb	r3, [r3, #13]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f001 feaf 	bl	800abe4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e92:	69db      	ldr	r3, [r3, #28]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00b      	beq.n	8008eb0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e9e:	69db      	ldr	r3, [r3, #28]
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f002 f9f3 	bl	800b28c <free>
    phost->pActiveClass->pData = 0U;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008eac:	2200      	movs	r2, #0
 8008eae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b084      	sub	sp, #16
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	3340      	adds	r3, #64	@ 0x40
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 f8b1 	bl	800903a <GetLineCoding>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008edc:	7afb      	ldrb	r3, [r7, #11]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d105      	bne.n	8008eee <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ee8:	2102      	movs	r1, #2
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008eee:	7afb      	ldrb	r3, [r7, #11]
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008f00:	2301      	movs	r3, #1
 8008f02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f0e:	69db      	ldr	r3, [r3, #28]
 8008f10:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008f18:	2b04      	cmp	r3, #4
 8008f1a:	d877      	bhi.n	800900c <USBH_CDC_Process+0x114>
 8008f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f24 <USBH_CDC_Process+0x2c>)
 8008f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f22:	bf00      	nop
 8008f24:	08008f39 	.word	0x08008f39
 8008f28:	08008f3f 	.word	0x08008f3f
 8008f2c:	08008f6f 	.word	0x08008f6f
 8008f30:	08008fe3 	.word	0x08008fe3
 8008f34:	08008ff1 	.word	0x08008ff1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8008f3c:	e06d      	b.n	800901a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f42:	4619      	mov	r1, r3
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f897 	bl	8009078 <SetLineCoding>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008f4e:	7bbb      	ldrb	r3, [r7, #14]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d104      	bne.n	8008f5e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	2202      	movs	r2, #2
 8008f58:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008f5c:	e058      	b.n	8009010 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008f5e:	7bbb      	ldrb	r3, [r7, #14]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d055      	beq.n	8009010 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	2204      	movs	r2, #4
 8008f68:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008f6c:	e050      	b.n	8009010 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	3340      	adds	r3, #64	@ 0x40
 8008f72:	4619      	mov	r1, r3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 f860 	bl	800903a <GetLineCoding>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008f7e:	7bbb      	ldrb	r3, [r7, #14]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d126      	bne.n	8008fd2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f96:	791b      	ldrb	r3, [r3, #4]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d13b      	bne.n	8009014 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fa6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d133      	bne.n	8009014 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fb6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d12b      	bne.n	8009014 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fc4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d124      	bne.n	8009014 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f958 	bl	8009280 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008fd0:	e020      	b.n	8009014 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d01d      	beq.n	8009014 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	2204      	movs	r2, #4
 8008fdc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008fe0:	e018      	b.n	8009014 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f867 	bl	80090b6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 f8da 	bl	80091a2 <CDC_ProcessReception>
      break;
 8008fee:	e014      	b.n	800901a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f001 f81e 	bl	800a034 <USBH_ClrFeature>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008ffc:	7bbb      	ldrb	r3, [r7, #14]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10a      	bne.n	8009018 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800900a:	e005      	b.n	8009018 <USBH_CDC_Process+0x120>

    default:
      break;
 800900c:	bf00      	nop
 800900e:	e004      	b.n	800901a <USBH_CDC_Process+0x122>
      break;
 8009010:	bf00      	nop
 8009012:	e002      	b.n	800901a <USBH_CDC_Process+0x122>
      break;
 8009014:	bf00      	nop
 8009016:	e000      	b.n	800901a <USBH_CDC_Process+0x122>
      break;
 8009018:	bf00      	nop

  }

  return status;
 800901a:	7bfb      	ldrb	r3, [r7, #15]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	370c      	adds	r7, #12
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr

0800903a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b082      	sub	sp, #8
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
 8009042:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	22a1      	movs	r2, #161	@ 0xa1
 8009048:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2221      	movs	r2, #33	@ 0x21
 800904e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2207      	movs	r2, #7
 8009060:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	2207      	movs	r2, #7
 8009066:	4619      	mov	r1, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f001 fb17 	bl	800a69c <USBH_CtlReq>
 800906e:	4603      	mov	r3, r0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2221      	movs	r2, #33	@ 0x21
 8009086:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2220      	movs	r2, #32
 800908c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2207      	movs	r2, #7
 800909e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	2207      	movs	r2, #7
 80090a4:	4619      	mov	r1, r3
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f001 faf8 	bl	800a69c <USBH_CtlReq>
 80090ac:	4603      	mov	r3, r0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3708      	adds	r7, #8
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b086      	sub	sp, #24
 80090ba:	af02      	add	r7, sp, #8
 80090bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090c4:	69db      	ldr	r3, [r3, #28]
 80090c6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80090c8:	2300      	movs	r3, #0
 80090ca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d002      	beq.n	80090dc <CDC_ProcessTransmission+0x26>
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d023      	beq.n	8009122 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80090da:	e05e      	b.n	800919a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090e0:	68fa      	ldr	r2, [r7, #12]
 80090e2:	8b12      	ldrh	r2, [r2, #24]
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d90b      	bls.n	8009100 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	69d9      	ldr	r1, [r3, #28]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	8b1a      	ldrh	r2, [r3, #24]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	7b5b      	ldrb	r3, [r3, #13]
 80090f4:	2001      	movs	r0, #1
 80090f6:	9000      	str	r0, [sp, #0]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f001 fce0 	bl	800aabe <USBH_BulkSendData>
 80090fe:	e00b      	b.n	8009118 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8009108:	b29a      	uxth	r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	7b5b      	ldrb	r3, [r3, #13]
 800910e:	2001      	movs	r0, #1
 8009110:	9000      	str	r0, [sp, #0]
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f001 fcd3 	bl	800aabe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2202      	movs	r2, #2
 800911c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009120:	e03b      	b.n	800919a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	7b5b      	ldrb	r3, [r3, #13]
 8009126:	4619      	mov	r1, r3
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f001 fff7 	bl	800b11c <USBH_LL_GetURBState>
 800912e:	4603      	mov	r3, r0
 8009130:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009132:	7afb      	ldrb	r3, [r7, #11]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d128      	bne.n	800918a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	8b12      	ldrh	r2, [r2, #24]
 8009140:	4293      	cmp	r3, r2
 8009142:	d90e      	bls.n	8009162 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	8b12      	ldrh	r2, [r2, #24]
 800914c:	1a9a      	subs	r2, r3, r2
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	69db      	ldr	r3, [r3, #28]
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	8b12      	ldrh	r2, [r2, #24]
 800915a:	441a      	add	r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	61da      	str	r2, [r3, #28]
 8009160:	e002      	b.n	8009168 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800916c:	2b00      	cmp	r3, #0
 800916e:	d004      	beq.n	800917a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009178:	e00e      	b.n	8009198 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f868 	bl	8009258 <USBH_CDC_TransmitCallback>
      break;
 8009188:	e006      	b.n	8009198 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800918a:	7afb      	ldrb	r3, [r7, #11]
 800918c:	2b02      	cmp	r3, #2
 800918e:	d103      	bne.n	8009198 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009198:	bf00      	nop
  }
}
 800919a:	bf00      	nop
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b086      	sub	sp, #24
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091b0:	69db      	ldr	r3, [r3, #28]
 80091b2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80091b4:	2300      	movs	r3, #0
 80091b6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80091be:	2b03      	cmp	r3, #3
 80091c0:	d002      	beq.n	80091c8 <CDC_ProcessReception+0x26>
 80091c2:	2b04      	cmp	r3, #4
 80091c4:	d00e      	beq.n	80091e4 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 80091c6:	e043      	b.n	8009250 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	6a19      	ldr	r1, [r3, #32]
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	8b5a      	ldrh	r2, [r3, #26]
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	7b1b      	ldrb	r3, [r3, #12]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f001 fc97 	bl	800ab08 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	2204      	movs	r2, #4
 80091de:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80091e2:	e035      	b.n	8009250 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	7b1b      	ldrb	r3, [r3, #12]
 80091e8:	4619      	mov	r1, r3
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f001 ff96 	bl	800b11c <USBH_LL_GetURBState>
 80091f0:	4603      	mov	r3, r0
 80091f2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80091f4:	7cfb      	ldrb	r3, [r7, #19]
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d129      	bne.n	800924e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	7b1b      	ldrb	r3, [r3, #12]
 80091fe:	4619      	mov	r1, r3
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f001 fef9 	bl	800aff8 <USBH_LL_GetLastXferSize>
 8009206:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	429a      	cmp	r2, r3
 8009210:	d016      	beq.n	8009240 <CDC_ProcessReception+0x9e>
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	8b5b      	ldrh	r3, [r3, #26]
 8009216:	461a      	mov	r2, r3
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	4293      	cmp	r3, r2
 800921c:	d110      	bne.n	8009240 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	1ad2      	subs	r2, r2, r3
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	6a1a      	ldr	r2, [r3, #32]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	441a      	add	r2, r3
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	2203      	movs	r2, #3
 800923a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800923e:	e006      	b.n	800924e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f80f 	bl	800926c <USBH_CDC_ReceiveCallback>
      break;
 800924e:	bf00      	nop
  }
}
 8009250:	bf00      	nop
 8009252:	3718      	adds	r7, #24
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009274:	bf00      	nop
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009288:	bf00      	nop
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	4613      	mov	r3, r2
 80092a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d101      	bne.n	80092ac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80092a8:	2302      	movs	r3, #2
 80092aa:	e029      	b.n	8009300 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	79fa      	ldrb	r2, [r7, #7]
 80092b0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2200      	movs	r2, #0
 80092c0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 f81f 	bl	8009308 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d003      	beq.n	80092f8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f001 fdc9 	bl	800ae90 <USBH_LL_Init>

  return USBH_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009310:	2300      	movs	r3, #0
 8009312:	60fb      	str	r3, [r7, #12]
 8009314:	e009      	b.n	800932a <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	33e0      	adds	r3, #224	@ 0xe0
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	4413      	add	r3, r2
 8009320:	2200      	movs	r2, #0
 8009322:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	3301      	adds	r3, #1
 8009328:	60fb      	str	r3, [r7, #12]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2b0f      	cmp	r3, #15
 800932e:	d9f2      	bls.n	8009316 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009330:	2300      	movs	r3, #0
 8009332:	60fb      	str	r3, [r7, #12]
 8009334:	e009      	b.n	800934a <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	4413      	add	r3, r2
 800933c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009340:	2200      	movs	r2, #0
 8009342:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	3301      	adds	r3, #1
 8009348:	60fb      	str	r3, [r7, #12]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009350:	d3f1      	bcc.n	8009336 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2240      	movs	r2, #64	@ 0x40
 8009376:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2201      	movs	r2, #1
 800938a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	331c      	adds	r3, #28
 80093a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80093a6:	2100      	movs	r1, #0
 80093a8:	4618      	mov	r0, r3
 80093aa:	f002 fe85 	bl	800c0b8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80093b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093b8:	2100      	movs	r1, #0
 80093ba:	4618      	mov	r0, r3
 80093bc:	f002 fe7c 	bl	800c0b8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80093c6:	2212      	movs	r2, #18
 80093c8:	2100      	movs	r1, #0
 80093ca:	4618      	mov	r0, r3
 80093cc:	f002 fe74 	bl	800c0b8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80093d6:	223e      	movs	r2, #62	@ 0x3e
 80093d8:	2100      	movs	r1, #0
 80093da:	4618      	mov	r0, r3
 80093dc:	f002 fe6c 	bl	800c0b8 <memset>

  return USBH_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80093ea:	b480      	push	{r7}
 80093ec:	b085      	sub	sp, #20
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
 80093f2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80093f4:	2300      	movs	r3, #0
 80093f6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d016      	beq.n	800942c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009404:	2b00      	cmp	r3, #0
 8009406:	d10e      	bne.n	8009426 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800940e:	1c59      	adds	r1, r3, #1
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	33de      	adds	r3, #222	@ 0xde
 800941a:	6839      	ldr	r1, [r7, #0]
 800941c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009420:	2300      	movs	r3, #0
 8009422:	73fb      	strb	r3, [r7, #15]
 8009424:	e004      	b.n	8009430 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009426:	2302      	movs	r3, #2
 8009428:	73fb      	strb	r3, [r7, #15]
 800942a:	e001      	b.n	8009430 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800942c:	2302      	movs	r3, #2
 800942e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009430:	7bfb      	ldrb	r3, [r7, #15]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3714      	adds	r7, #20
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800943e:	b480      	push	{r7}
 8009440:	b085      	sub	sp, #20
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	460b      	mov	r3, r1
 8009448:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800944a:	2300      	movs	r3, #0
 800944c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009454:	78fa      	ldrb	r2, [r7, #3]
 8009456:	429a      	cmp	r2, r3
 8009458:	d204      	bcs.n	8009464 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	78fa      	ldrb	r2, [r7, #3]
 800945e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8009462:	e001      	b.n	8009468 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009464:	2302      	movs	r3, #2
 8009466:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009468:	7bfb      	ldrb	r3, [r7, #15]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3714      	adds	r7, #20
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr

08009476 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009476:	b480      	push	{r7}
 8009478:	b087      	sub	sp, #28
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
 800947e:	4608      	mov	r0, r1
 8009480:	4611      	mov	r1, r2
 8009482:	461a      	mov	r2, r3
 8009484:	4603      	mov	r3, r0
 8009486:	70fb      	strb	r3, [r7, #3]
 8009488:	460b      	mov	r3, r1
 800948a:	70bb      	strb	r3, [r7, #2]
 800948c:	4613      	mov	r3, r2
 800948e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009490:	2300      	movs	r3, #0
 8009492:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009494:	2300      	movs	r3, #0
 8009496:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800949e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80094a0:	e025      	b.n	80094ee <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80094a2:	7dfb      	ldrb	r3, [r7, #23]
 80094a4:	221a      	movs	r2, #26
 80094a6:	fb02 f303 	mul.w	r3, r2, r3
 80094aa:	3308      	adds	r3, #8
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	4413      	add	r3, r2
 80094b0:	3302      	adds	r3, #2
 80094b2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	795b      	ldrb	r3, [r3, #5]
 80094b8:	78fa      	ldrb	r2, [r7, #3]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d002      	beq.n	80094c4 <USBH_FindInterface+0x4e>
 80094be:	78fb      	ldrb	r3, [r7, #3]
 80094c0:	2bff      	cmp	r3, #255	@ 0xff
 80094c2:	d111      	bne.n	80094e8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80094c8:	78ba      	ldrb	r2, [r7, #2]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d002      	beq.n	80094d4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80094ce:	78bb      	ldrb	r3, [r7, #2]
 80094d0:	2bff      	cmp	r3, #255	@ 0xff
 80094d2:	d109      	bne.n	80094e8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80094d8:	787a      	ldrb	r2, [r7, #1]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d002      	beq.n	80094e4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80094de:	787b      	ldrb	r3, [r7, #1]
 80094e0:	2bff      	cmp	r3, #255	@ 0xff
 80094e2:	d101      	bne.n	80094e8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80094e4:	7dfb      	ldrb	r3, [r7, #23]
 80094e6:	e006      	b.n	80094f6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80094e8:	7dfb      	ldrb	r3, [r7, #23]
 80094ea:	3301      	adds	r3, #1
 80094ec:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80094ee:	7dfb      	ldrb	r3, [r7, #23]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d9d6      	bls.n	80094a2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80094f4:	23ff      	movs	r3, #255	@ 0xff
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	371c      	adds	r7, #28
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr

08009502 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b082      	sub	sp, #8
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f001 fcfc 	bl	800af08 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009510:	2101      	movs	r1, #1
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f001 fe15 	bl	800b142 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3708      	adds	r7, #8
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
	...

08009524 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b088      	sub	sp, #32
 8009528:	af04      	add	r7, sp, #16
 800952a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800952c:	2302      	movs	r3, #2
 800952e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009530:	2300      	movs	r3, #0
 8009532:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800953a:	b2db      	uxtb	r3, r3
 800953c:	2b01      	cmp	r3, #1
 800953e:	d102      	bne.n	8009546 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2203      	movs	r2, #3
 8009544:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	b2db      	uxtb	r3, r3
 800954c:	2b0b      	cmp	r3, #11
 800954e:	f200 81bc 	bhi.w	80098ca <USBH_Process+0x3a6>
 8009552:	a201      	add	r2, pc, #4	@ (adr r2, 8009558 <USBH_Process+0x34>)
 8009554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009558:	08009589 	.word	0x08009589
 800955c:	080095bb 	.word	0x080095bb
 8009560:	08009625 	.word	0x08009625
 8009564:	08009865 	.word	0x08009865
 8009568:	080098cb 	.word	0x080098cb
 800956c:	080096c5 	.word	0x080096c5
 8009570:	0800980b 	.word	0x0800980b
 8009574:	080096fb 	.word	0x080096fb
 8009578:	0800971b 	.word	0x0800971b
 800957c:	08009739 	.word	0x08009739
 8009580:	0800977d 	.word	0x0800977d
 8009584:	0800984d 	.word	0x0800984d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800958e:	b2db      	uxtb	r3, r3
 8009590:	2b00      	cmp	r3, #0
 8009592:	f000 819c 	beq.w	80098ce <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2201      	movs	r2, #1
 800959a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800959c:	20c8      	movs	r0, #200	@ 0xc8
 800959e:	f001 fe1a 	bl	800b1d6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f001 fd0d 	bl	800afc2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80095b8:	e189      	b.n	80098ce <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d107      	bne.n	80095d6 <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2202      	movs	r2, #2
 80095d2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80095d4:	e18a      	b.n	80098ec <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80095dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80095e0:	d914      	bls.n	800960c <USBH_Process+0xe8>
          phost->device.RstCnt++;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80095e8:	3301      	adds	r3, #1
 80095ea:	b2da      	uxtb	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80095f8:	2b03      	cmp	r3, #3
 80095fa:	d903      	bls.n	8009604 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	220d      	movs	r2, #13
 8009600:	701a      	strb	r2, [r3, #0]
      break;
 8009602:	e173      	b.n	80098ec <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	701a      	strb	r2, [r3, #0]
      break;
 800960a:	e16f      	b.n	80098ec <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009612:	f103 020a 	add.w	r2, r3, #10
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800961c:	200a      	movs	r0, #10
 800961e:	f001 fdda 	bl	800b1d6 <USBH_Delay>
      break;
 8009622:	e163      	b.n	80098ec <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800962a:	2b00      	cmp	r3, #0
 800962c:	d005      	beq.n	800963a <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009634:	2104      	movs	r1, #4
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800963a:	2064      	movs	r0, #100	@ 0x64
 800963c:	f001 fdcb 	bl	800b1d6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f001 fc97 	bl	800af74 <USBH_LL_GetSpeed>
 8009646:	4603      	mov	r3, r0
 8009648:	461a      	mov	r2, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2205      	movs	r2, #5
 8009654:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009656:	2100      	movs	r1, #0
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f001 faa2 	bl	800aba2 <USBH_AllocPipe>
 800965e:	4603      	mov	r3, r0
 8009660:	461a      	mov	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009666:	2180      	movs	r1, #128	@ 0x80
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f001 fa9a 	bl	800aba2 <USBH_AllocPipe>
 800966e:	4603      	mov	r3, r0
 8009670:	461a      	mov	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	7919      	ldrb	r1, [r3, #4]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800968a:	9202      	str	r2, [sp, #8]
 800968c:	2200      	movs	r2, #0
 800968e:	9201      	str	r2, [sp, #4]
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	4603      	mov	r3, r0
 8009694:	2280      	movs	r2, #128	@ 0x80
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f001 fa54 	bl	800ab44 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	7959      	ldrb	r1, [r3, #5]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80096b0:	9202      	str	r2, [sp, #8]
 80096b2:	2200      	movs	r2, #0
 80096b4:	9201      	str	r2, [sp, #4]
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	4603      	mov	r3, r0
 80096ba:	2200      	movs	r2, #0
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f001 fa41 	bl	800ab44 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80096c2:	e113      	b.n	80098ec <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 f917 	bl	80098f8 <USBH_HandleEnum>
 80096ca:	4603      	mov	r3, r0
 80096cc:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80096ce:	7bbb      	ldrb	r3, [r7, #14]
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	f040 80fd 	bne.w	80098d2 <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d103      	bne.n	80096f2 <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2208      	movs	r2, #8
 80096ee:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80096f0:	e0ef      	b.n	80098d2 <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2207      	movs	r2, #7
 80096f6:	701a      	strb	r2, [r3, #0]
      break;
 80096f8:	e0eb      	b.n	80098d2 <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009700:	2b00      	cmp	r3, #0
 8009702:	f000 80e8 	beq.w	80098d6 <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800970c:	2101      	movs	r1, #1
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2208      	movs	r2, #8
 8009716:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8009718:	e0dd      	b.n	80098d6 <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009720:	4619      	mov	r1, r3
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 fc3f 	bl	8009fa6 <USBH_SetCfg>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	f040 80d5 	bne.w	80098da <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2209      	movs	r2, #9
 8009734:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009736:	e0d0      	b.n	80098da <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800973e:	f003 0320 	and.w	r3, r3, #32
 8009742:	2b00      	cmp	r3, #0
 8009744:	d016      	beq.n	8009774 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009746:	2101      	movs	r1, #1
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 fc4f 	bl	8009fec <USBH_SetFeature>
 800974e:	4603      	mov	r3, r0
 8009750:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009752:	7bbb      	ldrb	r3, [r7, #14]
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b00      	cmp	r3, #0
 8009758:	d103      	bne.n	8009762 <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	220a      	movs	r2, #10
 800975e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009760:	e0bd      	b.n	80098de <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8009762:	7bbb      	ldrb	r3, [r7, #14]
 8009764:	b2db      	uxtb	r3, r3
 8009766:	2b03      	cmp	r3, #3
 8009768:	f040 80b9 	bne.w	80098de <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	220a      	movs	r2, #10
 8009770:	701a      	strb	r2, [r3, #0]
      break;
 8009772:	e0b4      	b.n	80098de <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	220a      	movs	r2, #10
 8009778:	701a      	strb	r2, [r3, #0]
      break;
 800977a:	e0b0      	b.n	80098de <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009782:	2b00      	cmp	r3, #0
 8009784:	f000 80ad 	beq.w	80098e2 <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009790:	2300      	movs	r3, #0
 8009792:	73fb      	strb	r3, [r7, #15]
 8009794:	e016      	b.n	80097c4 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009796:	7bfa      	ldrb	r2, [r7, #15]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	32de      	adds	r2, #222	@ 0xde
 800979c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097a0:	791a      	ldrb	r2, [r3, #4]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d108      	bne.n	80097be <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 80097ac:	7bfa      	ldrb	r2, [r7, #15]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	32de      	adds	r2, #222	@ 0xde
 80097b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80097bc:	e005      	b.n	80097ca <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80097be:	7bfb      	ldrb	r3, [r7, #15]
 80097c0:	3301      	adds	r3, #1
 80097c2:	73fb      	strb	r3, [r7, #15]
 80097c4:	7bfb      	ldrb	r3, [r7, #15]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d0e5      	beq.n	8009796 <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d016      	beq.n	8009802 <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	4798      	blx	r3
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d109      	bne.n	80097fa <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2206      	movs	r2, #6
 80097ea:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80097f2:	2103      	movs	r1, #3
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80097f8:	e073      	b.n	80098e2 <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	220d      	movs	r2, #13
 80097fe:	701a      	strb	r2, [r3, #0]
      break;
 8009800:	e06f      	b.n	80098e2 <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	220d      	movs	r2, #13
 8009806:	701a      	strb	r2, [r3, #0]
      break;
 8009808:	e06b      	b.n	80098e2 <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009810:	2b00      	cmp	r3, #0
 8009812:	d017      	beq.n	8009844 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800981a:	691b      	ldr	r3, [r3, #16]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	4798      	blx	r3
 8009820:	4603      	mov	r3, r0
 8009822:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009824:	7bbb      	ldrb	r3, [r7, #14]
 8009826:	b2db      	uxtb	r3, r3
 8009828:	2b00      	cmp	r3, #0
 800982a:	d103      	bne.n	8009834 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	220b      	movs	r2, #11
 8009830:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009832:	e058      	b.n	80098e6 <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8009834:	7bbb      	ldrb	r3, [r7, #14]
 8009836:	b2db      	uxtb	r3, r3
 8009838:	2b02      	cmp	r3, #2
 800983a:	d154      	bne.n	80098e6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	220d      	movs	r2, #13
 8009840:	701a      	strb	r2, [r3, #0]
      break;
 8009842:	e050      	b.n	80098e6 <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	220d      	movs	r2, #13
 8009848:	701a      	strb	r2, [r3, #0]
      break;
 800984a:	e04c      	b.n	80098e6 <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009852:	2b00      	cmp	r3, #0
 8009854:	d049      	beq.n	80098ea <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800985c:	695b      	ldr	r3, [r3, #20]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	4798      	blx	r3
      }
      break;
 8009862:	e042      	b.n	80098ea <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f7ff fd4b 	bl	8009308 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009878:	2b00      	cmp	r3, #0
 800987a:	d009      	beq.n	8009890 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009896:	2b00      	cmp	r3, #0
 8009898:	d005      	beq.n	80098a6 <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80098a0:	2105      	movs	r1, #5
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d107      	bne.n	80098c2 <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f7ff fe21 	bl	8009502 <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80098c0:	e014      	b.n	80098ec <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f001 fb20 	bl	800af08 <USBH_LL_Start>
      break;
 80098c8:	e010      	b.n	80098ec <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 80098ca:	bf00      	nop
 80098cc:	e00e      	b.n	80098ec <USBH_Process+0x3c8>
      break;
 80098ce:	bf00      	nop
 80098d0:	e00c      	b.n	80098ec <USBH_Process+0x3c8>
      break;
 80098d2:	bf00      	nop
 80098d4:	e00a      	b.n	80098ec <USBH_Process+0x3c8>
    break;
 80098d6:	bf00      	nop
 80098d8:	e008      	b.n	80098ec <USBH_Process+0x3c8>
      break;
 80098da:	bf00      	nop
 80098dc:	e006      	b.n	80098ec <USBH_Process+0x3c8>
      break;
 80098de:	bf00      	nop
 80098e0:	e004      	b.n	80098ec <USBH_Process+0x3c8>
      break;
 80098e2:	bf00      	nop
 80098e4:	e002      	b.n	80098ec <USBH_Process+0x3c8>
      break;
 80098e6:	bf00      	nop
 80098e8:	e000      	b.n	80098ec <USBH_Process+0x3c8>
      break;
 80098ea:	bf00      	nop
  }
  return USBH_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop

080098f8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b088      	sub	sp, #32
 80098fc:	af04      	add	r7, sp, #16
 80098fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009900:	2301      	movs	r3, #1
 8009902:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009904:	2301      	movs	r3, #1
 8009906:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	785b      	ldrb	r3, [r3, #1]
 800990c:	2b07      	cmp	r3, #7
 800990e:	f200 81bd 	bhi.w	8009c8c <USBH_HandleEnum+0x394>
 8009912:	a201      	add	r2, pc, #4	@ (adr r2, 8009918 <USBH_HandleEnum+0x20>)
 8009914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009918:	08009939 	.word	0x08009939
 800991c:	080099f3 	.word	0x080099f3
 8009920:	08009a5d 	.word	0x08009a5d
 8009924:	08009ae7 	.word	0x08009ae7
 8009928:	08009b51 	.word	0x08009b51
 800992c:	08009bc1 	.word	0x08009bc1
 8009930:	08009c07 	.word	0x08009c07
 8009934:	08009c4d 	.word	0x08009c4d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009938:	2108      	movs	r1, #8
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 fa50 	bl	8009de0 <USBH_Get_DevDesc>
 8009940:	4603      	mov	r3, r0
 8009942:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009944:	7bbb      	ldrb	r3, [r7, #14]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d12e      	bne.n	80099a8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	7919      	ldrb	r1, [r3, #4]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800996e:	9202      	str	r2, [sp, #8]
 8009970:	2200      	movs	r2, #0
 8009972:	9201      	str	r2, [sp, #4]
 8009974:	9300      	str	r3, [sp, #0]
 8009976:	4603      	mov	r3, r0
 8009978:	2280      	movs	r2, #128	@ 0x80
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f001 f8e2 	bl	800ab44 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	7959      	ldrb	r1, [r3, #5]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009994:	9202      	str	r2, [sp, #8]
 8009996:	2200      	movs	r2, #0
 8009998:	9201      	str	r2, [sp, #4]
 800999a:	9300      	str	r3, [sp, #0]
 800999c:	4603      	mov	r3, r0
 800999e:	2200      	movs	r2, #0
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f001 f8cf 	bl	800ab44 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80099a6:	e173      	b.n	8009c90 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099a8:	7bbb      	ldrb	r3, [r7, #14]
 80099aa:	2b03      	cmp	r3, #3
 80099ac:	f040 8170 	bne.w	8009c90 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80099b6:	3301      	adds	r3, #1
 80099b8:	b2da      	uxtb	r2, r3
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80099c6:	2b03      	cmp	r3, #3
 80099c8:	d903      	bls.n	80099d2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	220d      	movs	r2, #13
 80099ce:	701a      	strb	r2, [r3, #0]
      break;
 80099d0:	e15e      	b.n	8009c90 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	795b      	ldrb	r3, [r3, #5]
 80099d6:	4619      	mov	r1, r3
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f001 f903 	bl	800abe4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	791b      	ldrb	r3, [r3, #4]
 80099e2:	4619      	mov	r1, r3
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f001 f8fd 	bl	800abe4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	701a      	strb	r2, [r3, #0]
      break;
 80099f0:	e14e      	b.n	8009c90 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80099f2:	2112      	movs	r1, #18
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f9f3 	bl	8009de0 <USBH_Get_DevDesc>
 80099fa:	4603      	mov	r3, r0
 80099fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099fe:	7bbb      	ldrb	r3, [r7, #14]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d103      	bne.n	8009a0c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2202      	movs	r2, #2
 8009a08:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009a0a:	e143      	b.n	8009c94 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a0c:	7bbb      	ldrb	r3, [r7, #14]
 8009a0e:	2b03      	cmp	r3, #3
 8009a10:	f040 8140 	bne.w	8009c94 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	b2da      	uxtb	r2, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009a2a:	2b03      	cmp	r3, #3
 8009a2c:	d903      	bls.n	8009a36 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	220d      	movs	r2, #13
 8009a32:	701a      	strb	r2, [r3, #0]
      break;
 8009a34:	e12e      	b.n	8009c94 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	795b      	ldrb	r3, [r3, #5]
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f001 f8d1 	bl	800abe4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	791b      	ldrb	r3, [r3, #4]
 8009a46:	4619      	mov	r1, r3
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f001 f8cb 	bl	800abe4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	701a      	strb	r2, [r3, #0]
      break;
 8009a5a:	e11b      	b.n	8009c94 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009a5c:	2101      	movs	r1, #1
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fa7d 	bl	8009f5e <USBH_SetAddress>
 8009a64:	4603      	mov	r3, r0
 8009a66:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a68:	7bbb      	ldrb	r3, [r7, #14]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d130      	bne.n	8009ad0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009a6e:	2002      	movs	r0, #2
 8009a70:	f001 fbb1 	bl	800b1d6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2203      	movs	r2, #3
 8009a80:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	7919      	ldrb	r1, [r3, #4]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009a96:	9202      	str	r2, [sp, #8]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	9201      	str	r2, [sp, #4]
 8009a9c:	9300      	str	r3, [sp, #0]
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2280      	movs	r2, #128	@ 0x80
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f001 f84e 	bl	800ab44 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	7959      	ldrb	r1, [r3, #5]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009abc:	9202      	str	r2, [sp, #8]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	9201      	str	r2, [sp, #4]
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f001 f83b 	bl	800ab44 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009ace:	e0e3      	b.n	8009c98 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ad0:	7bbb      	ldrb	r3, [r7, #14]
 8009ad2:	2b03      	cmp	r3, #3
 8009ad4:	f040 80e0 	bne.w	8009c98 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	220d      	movs	r2, #13
 8009adc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	705a      	strb	r2, [r3, #1]
      break;
 8009ae4:	e0d8      	b.n	8009c98 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009ae6:	2109      	movs	r1, #9
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 f9a5 	bl	8009e38 <USBH_Get_CfgDesc>
 8009aee:	4603      	mov	r3, r0
 8009af0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009af2:	7bbb      	ldrb	r3, [r7, #14]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d103      	bne.n	8009b00 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2204      	movs	r2, #4
 8009afc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009afe:	e0cd      	b.n	8009c9c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b00:	7bbb      	ldrb	r3, [r7, #14]
 8009b02:	2b03      	cmp	r3, #3
 8009b04:	f040 80ca 	bne.w	8009c9c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009b0e:	3301      	adds	r3, #1
 8009b10:	b2da      	uxtb	r2, r3
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009b1e:	2b03      	cmp	r3, #3
 8009b20:	d903      	bls.n	8009b2a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	220d      	movs	r2, #13
 8009b26:	701a      	strb	r2, [r3, #0]
      break;
 8009b28:	e0b8      	b.n	8009c9c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	795b      	ldrb	r3, [r3, #5]
 8009b2e:	4619      	mov	r1, r3
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f001 f857 	bl	800abe4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	791b      	ldrb	r3, [r3, #4]
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f001 f851 	bl	800abe4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	701a      	strb	r2, [r3, #0]
      break;
 8009b4e:	e0a5      	b.n	8009c9c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009b56:	4619      	mov	r1, r3
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f96d 	bl	8009e38 <USBH_Get_CfgDesc>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b62:	7bbb      	ldrb	r3, [r7, #14]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d103      	bne.n	8009b70 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2205      	movs	r2, #5
 8009b6c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009b6e:	e097      	b.n	8009ca0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b70:	7bbb      	ldrb	r3, [r7, #14]
 8009b72:	2b03      	cmp	r3, #3
 8009b74:	f040 8094 	bne.w	8009ca0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009b7e:	3301      	adds	r3, #1
 8009b80:	b2da      	uxtb	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009b8e:	2b03      	cmp	r3, #3
 8009b90:	d903      	bls.n	8009b9a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	220d      	movs	r2, #13
 8009b96:	701a      	strb	r2, [r3, #0]
      break;
 8009b98:	e082      	b.n	8009ca0 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	795b      	ldrb	r3, [r3, #5]
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f001 f81f 	bl	800abe4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	791b      	ldrb	r3, [r3, #4]
 8009baa:	4619      	mov	r1, r3
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f001 f819 	bl	800abe4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	701a      	strb	r2, [r3, #0]
      break;
 8009bbe:	e06f      	b.n	8009ca0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d019      	beq.n	8009bfe <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009bd6:	23ff      	movs	r3, #255	@ 0xff
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f957 	bl	8009e8c <USBH_Get_StringDesc>
 8009bde:	4603      	mov	r3, r0
 8009be0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009be2:	7bbb      	ldrb	r3, [r7, #14]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d103      	bne.n	8009bf0 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2206      	movs	r2, #6
 8009bec:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009bee:	e059      	b.n	8009ca4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009bf0:	7bbb      	ldrb	r3, [r7, #14]
 8009bf2:	2b03      	cmp	r3, #3
 8009bf4:	d156      	bne.n	8009ca4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2206      	movs	r2, #6
 8009bfa:	705a      	strb	r2, [r3, #1]
      break;
 8009bfc:	e052      	b.n	8009ca4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2206      	movs	r2, #6
 8009c02:	705a      	strb	r2, [r3, #1]
      break;
 8009c04:	e04e      	b.n	8009ca4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d019      	beq.n	8009c44 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009c1c:	23ff      	movs	r3, #255	@ 0xff
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 f934 	bl	8009e8c <USBH_Get_StringDesc>
 8009c24:	4603      	mov	r3, r0
 8009c26:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009c28:	7bbb      	ldrb	r3, [r7, #14]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d103      	bne.n	8009c36 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2207      	movs	r2, #7
 8009c32:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009c34:	e038      	b.n	8009ca8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c36:	7bbb      	ldrb	r3, [r7, #14]
 8009c38:	2b03      	cmp	r3, #3
 8009c3a:	d135      	bne.n	8009ca8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2207      	movs	r2, #7
 8009c40:	705a      	strb	r2, [r3, #1]
      break;
 8009c42:	e031      	b.n	8009ca8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2207      	movs	r2, #7
 8009c48:	705a      	strb	r2, [r3, #1]
      break;
 8009c4a:	e02d      	b.n	8009ca8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d017      	beq.n	8009c86 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009c62:	23ff      	movs	r3, #255	@ 0xff
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 f911 	bl	8009e8c <USBH_Get_StringDesc>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009c6e:	7bbb      	ldrb	r3, [r7, #14]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d102      	bne.n	8009c7a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009c78:	e018      	b.n	8009cac <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c7a:	7bbb      	ldrb	r3, [r7, #14]
 8009c7c:	2b03      	cmp	r3, #3
 8009c7e:	d115      	bne.n	8009cac <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	73fb      	strb	r3, [r7, #15]
      break;
 8009c84:	e012      	b.n	8009cac <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009c86:	2300      	movs	r3, #0
 8009c88:	73fb      	strb	r3, [r7, #15]
      break;
 8009c8a:	e00f      	b.n	8009cac <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009c8c:	bf00      	nop
 8009c8e:	e00e      	b.n	8009cae <USBH_HandleEnum+0x3b6>
      break;
 8009c90:	bf00      	nop
 8009c92:	e00c      	b.n	8009cae <USBH_HandleEnum+0x3b6>
      break;
 8009c94:	bf00      	nop
 8009c96:	e00a      	b.n	8009cae <USBH_HandleEnum+0x3b6>
      break;
 8009c98:	bf00      	nop
 8009c9a:	e008      	b.n	8009cae <USBH_HandleEnum+0x3b6>
      break;
 8009c9c:	bf00      	nop
 8009c9e:	e006      	b.n	8009cae <USBH_HandleEnum+0x3b6>
      break;
 8009ca0:	bf00      	nop
 8009ca2:	e004      	b.n	8009cae <USBH_HandleEnum+0x3b6>
      break;
 8009ca4:	bf00      	nop
 8009ca6:	e002      	b.n	8009cae <USBH_HandleEnum+0x3b6>
      break;
 8009ca8:	bf00      	nop
 8009caa:	e000      	b.n	8009cae <USBH_HandleEnum+0x3b6>
      break;
 8009cac:	bf00      	nop
  }
  return Status;
 8009cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	683a      	ldr	r2, [r7, #0]
 8009cc6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009cca:	bf00      	nop
 8009ccc:	370c      	adds	r7, #12
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr

08009cd6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b082      	sub	sp, #8
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009ce4:	1c5a      	adds	r2, r3, #1
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 f804 	bl	8009cfa <USBH_HandleSof>
}
 8009cf2:	bf00      	nop
 8009cf4:	3708      	adds	r7, #8
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b082      	sub	sp, #8
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	2b0b      	cmp	r3, #11
 8009d0a:	d10a      	bne.n	8009d22 <USBH_HandleSof+0x28>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d005      	beq.n	8009d22 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	4798      	blx	r3
  }
}
 8009d22:	bf00      	nop
 8009d24:	3708      	adds	r7, #8
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009d2a:	b480      	push	{r7}
 8009d2c:	b083      	sub	sp, #12
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 8009d3a:	bf00      	nop
}
 8009d3c:	370c      	adds	r7, #12
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr

08009d46 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009d46:	b480      	push	{r7}
 8009d48:	b083      	sub	sp, #12
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8009d5e:	bf00      	nop
}
 8009d60:	370c      	adds	r7, #12
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr

08009d6a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009d6a:	b480      	push	{r7}
 8009d6c:	b083      	sub	sp, #12
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2201      	movs	r2, #1
 8009da4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f001 f8c0 	bl	800af3e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	791b      	ldrb	r3, [r3, #4]
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 ff0d 	bl	800abe4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	795b      	ldrb	r3, [r3, #5]
 8009dce:	4619      	mov	r1, r3
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 ff07 	bl	800abe4 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b086      	sub	sp, #24
 8009de4:	af02      	add	r7, sp, #8
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	460b      	mov	r3, r1
 8009dea:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009dec:	887b      	ldrh	r3, [r7, #2]
 8009dee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009df2:	d901      	bls.n	8009df8 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009df4:	2303      	movs	r3, #3
 8009df6:	e01b      	b.n	8009e30 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009dfe:	887b      	ldrh	r3, [r7, #2]
 8009e00:	9300      	str	r3, [sp, #0]
 8009e02:	4613      	mov	r3, r2
 8009e04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009e08:	2100      	movs	r1, #0
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 f872 	bl	8009ef4 <USBH_GetDescriptor>
 8009e10:	4603      	mov	r3, r0
 8009e12:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d109      	bne.n	8009e2e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009e20:	887a      	ldrh	r2, [r7, #2]
 8009e22:	4619      	mov	r1, r3
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f929 	bl	800a07c <USBH_ParseDevDesc>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af02      	add	r7, sp, #8
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	460b      	mov	r3, r1
 8009e42:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	331c      	adds	r3, #28
 8009e48:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009e4a:	887b      	ldrh	r3, [r7, #2]
 8009e4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e50:	d901      	bls.n	8009e56 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009e52:	2303      	movs	r3, #3
 8009e54:	e016      	b.n	8009e84 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009e56:	887b      	ldrh	r3, [r7, #2]
 8009e58:	9300      	str	r3, [sp, #0]
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e60:	2100      	movs	r1, #0
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f846 	bl	8009ef4 <USBH_GetDescriptor>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d107      	bne.n	8009e82 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009e72:	887b      	ldrh	r3, [r7, #2]
 8009e74:	461a      	mov	r2, r3
 8009e76:	68b9      	ldr	r1, [r7, #8]
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 f9af 	bl	800a1dc <USBH_ParseCfgDesc>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3710      	adds	r7, #16
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b088      	sub	sp, #32
 8009e90:	af02      	add	r7, sp, #8
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	607a      	str	r2, [r7, #4]
 8009e96:	461a      	mov	r2, r3
 8009e98:	460b      	mov	r3, r1
 8009e9a:	72fb      	strb	r3, [r7, #11]
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009ea0:	893b      	ldrh	r3, [r7, #8]
 8009ea2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ea6:	d802      	bhi.n	8009eae <USBH_Get_StringDesc+0x22>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d101      	bne.n	8009eb2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009eae:	2303      	movs	r3, #3
 8009eb0:	e01c      	b.n	8009eec <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009eb2:	7afb      	ldrb	r3, [r7, #11]
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009eba:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009ec2:	893b      	ldrh	r3, [r7, #8]
 8009ec4:	9300      	str	r3, [sp, #0]
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	2100      	movs	r1, #0
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f000 f812 	bl	8009ef4 <USBH_GetDescriptor>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009ed4:	7dfb      	ldrb	r3, [r7, #23]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d107      	bne.n	8009eea <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009ee0:	893a      	ldrh	r2, [r7, #8]
 8009ee2:	6879      	ldr	r1, [r7, #4]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f000 fb8c 	bl	800a602 <USBH_ParseStringDesc>
  }

  return status;
 8009eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3718      	adds	r7, #24
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	607b      	str	r3, [r7, #4]
 8009efe:	460b      	mov	r3, r1
 8009f00:	72fb      	strb	r3, [r7, #11]
 8009f02:	4613      	mov	r3, r2
 8009f04:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	789b      	ldrb	r3, [r3, #2]
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d11c      	bne.n	8009f48 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009f0e:	7afb      	ldrb	r3, [r7, #11]
 8009f10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009f14:	b2da      	uxtb	r2, r3
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2206      	movs	r2, #6
 8009f1e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	893a      	ldrh	r2, [r7, #8]
 8009f24:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009f26:	893b      	ldrh	r3, [r7, #8]
 8009f28:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009f2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f30:	d104      	bne.n	8009f3c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f240 4209 	movw	r2, #1033	@ 0x409
 8009f38:	829a      	strh	r2, [r3, #20]
 8009f3a:	e002      	b.n	8009f42 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	8b3a      	ldrh	r2, [r7, #24]
 8009f46:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009f48:	8b3b      	ldrh	r3, [r7, #24]
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	6879      	ldr	r1, [r7, #4]
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	f000 fba4 	bl	800a69c <USBH_CtlReq>
 8009f54:	4603      	mov	r3, r0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b082      	sub	sp, #8
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	460b      	mov	r3, r1
 8009f68:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	789b      	ldrb	r3, [r3, #2]
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d10f      	bne.n	8009f92 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2205      	movs	r2, #5
 8009f7c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009f7e:	78fb      	ldrb	r3, [r7, #3]
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009f92:	2200      	movs	r2, #0
 8009f94:	2100      	movs	r1, #0
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 fb80 	bl	800a69c <USBH_CtlReq>
 8009f9c:	4603      	mov	r3, r0
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3708      	adds	r7, #8
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b082      	sub	sp, #8
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
 8009fae:	460b      	mov	r3, r1
 8009fb0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	789b      	ldrb	r3, [r3, #2]
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d10e      	bne.n	8009fd8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2209      	movs	r2, #9
 8009fc4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	887a      	ldrh	r2, [r7, #2]
 8009fca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009fd8:	2200      	movs	r2, #0
 8009fda:	2100      	movs	r1, #0
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 fb5d 	bl	800a69c <USBH_CtlReq>
 8009fe2:	4603      	mov	r3, r0
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3708      	adds	r7, #8
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	789b      	ldrb	r3, [r3, #2]
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d10f      	bne.n	800a020 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2203      	movs	r2, #3
 800a00a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a00c:	78fb      	ldrb	r3, [r7, #3]
 800a00e:	b29a      	uxth	r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a020:	2200      	movs	r2, #0
 800a022:	2100      	movs	r1, #0
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 fb39 	bl	800a69c <USBH_CtlReq>
 800a02a:	4603      	mov	r3, r0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3708      	adds	r7, #8
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	460b      	mov	r3, r1
 800a03e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	789b      	ldrb	r3, [r3, #2]
 800a044:	2b01      	cmp	r3, #1
 800a046:	d10f      	bne.n	800a068 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2202      	movs	r2, #2
 800a04c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2201      	movs	r2, #1
 800a052:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a05a:	78fb      	ldrb	r3, [r7, #3]
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a068:	2200      	movs	r2, #0
 800a06a:	2100      	movs	r1, #0
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 fb15 	bl	800a69c <USBH_CtlReq>
 800a072:	4603      	mov	r3, r0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b087      	sub	sp, #28
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	4613      	mov	r3, r2
 800a088:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a090:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a092:	2300      	movs	r3, #0
 800a094:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d101      	bne.n	800a0a0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a09c:	2302      	movs	r3, #2
 800a09e:	e094      	b.n	800a1ca <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	781a      	ldrb	r2, [r3, #0]
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	785a      	ldrb	r2, [r3, #1]
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	3302      	adds	r3, #2
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	3303      	adds	r3, #3
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	021b      	lsls	r3, r3, #8
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	b29a      	uxth	r2, r3
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	791a      	ldrb	r2, [r3, #4]
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	795a      	ldrb	r2, [r3, #5]
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	799a      	ldrb	r2, [r3, #6]
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	79da      	ldrb	r2, [r3, #7]
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d004      	beq.n	800a0fe <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d11b      	bne.n	800a136 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	79db      	ldrb	r3, [r3, #7]
 800a102:	2b20      	cmp	r3, #32
 800a104:	dc0f      	bgt.n	800a126 <USBH_ParseDevDesc+0xaa>
 800a106:	2b08      	cmp	r3, #8
 800a108:	db0f      	blt.n	800a12a <USBH_ParseDevDesc+0xae>
 800a10a:	3b08      	subs	r3, #8
 800a10c:	4a32      	ldr	r2, [pc, #200]	@ (800a1d8 <USBH_ParseDevDesc+0x15c>)
 800a10e:	fa22 f303 	lsr.w	r3, r2, r3
 800a112:	f003 0301 	and.w	r3, r3, #1
 800a116:	2b00      	cmp	r3, #0
 800a118:	bf14      	ite	ne
 800a11a:	2301      	movne	r3, #1
 800a11c:	2300      	moveq	r3, #0
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	2b00      	cmp	r3, #0
 800a122:	d106      	bne.n	800a132 <USBH_ParseDevDesc+0xb6>
 800a124:	e001      	b.n	800a12a <USBH_ParseDevDesc+0xae>
 800a126:	2b40      	cmp	r3, #64	@ 0x40
 800a128:	d003      	beq.n	800a132 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	2208      	movs	r2, #8
 800a12e:	71da      	strb	r2, [r3, #7]
        break;
 800a130:	e000      	b.n	800a134 <USBH_ParseDevDesc+0xb8>
        break;
 800a132:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a134:	e00e      	b.n	800a154 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d107      	bne.n	800a150 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	79db      	ldrb	r3, [r3, #7]
 800a144:	2b08      	cmp	r3, #8
 800a146:	d005      	beq.n	800a154 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	2208      	movs	r2, #8
 800a14c:	71da      	strb	r2, [r3, #7]
 800a14e:	e001      	b.n	800a154 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a150:	2303      	movs	r3, #3
 800a152:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a154:	88fb      	ldrh	r3, [r7, #6]
 800a156:	2b08      	cmp	r3, #8
 800a158:	d936      	bls.n	800a1c8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	3308      	adds	r3, #8
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	461a      	mov	r2, r3
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	3309      	adds	r3, #9
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	021b      	lsls	r3, r3, #8
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	4313      	orrs	r3, r2
 800a16e:	b29a      	uxth	r2, r3
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	330a      	adds	r3, #10
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	461a      	mov	r2, r3
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	330b      	adds	r3, #11
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	021b      	lsls	r3, r3, #8
 800a184:	b29b      	uxth	r3, r3
 800a186:	4313      	orrs	r3, r2
 800a188:	b29a      	uxth	r2, r3
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	330c      	adds	r3, #12
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	461a      	mov	r2, r3
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	330d      	adds	r3, #13
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	021b      	lsls	r3, r3, #8
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	b29a      	uxth	r2, r3
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	7b9a      	ldrb	r2, [r3, #14]
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	7bda      	ldrb	r2, [r3, #15]
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	7c1a      	ldrb	r2, [r3, #16]
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	7c5a      	ldrb	r2, [r3, #17]
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a1c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	371c      	adds	r7, #28
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	01000101 	.word	0x01000101

0800a1dc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b08c      	sub	sp, #48	@ 0x30
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a1f0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a1fe:	2300      	movs	r3, #0
 800a200:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d101      	bne.n	800a20e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a20a:	2302      	movs	r3, #2
 800a20c:	e0de      	b.n	800a3cc <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	2b09      	cmp	r3, #9
 800a218:	d002      	beq.n	800a220 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a21c:	2209      	movs	r2, #9
 800a21e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	781a      	ldrb	r2, [r3, #0]
 800a224:	6a3b      	ldr	r3, [r7, #32]
 800a226:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	785a      	ldrb	r2, [r3, #1]
 800a22c:	6a3b      	ldr	r3, [r7, #32]
 800a22e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	3302      	adds	r3, #2
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	461a      	mov	r2, r3
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	3303      	adds	r3, #3
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	021b      	lsls	r3, r3, #8
 800a240:	b29b      	uxth	r3, r3
 800a242:	4313      	orrs	r3, r2
 800a244:	b29b      	uxth	r3, r3
 800a246:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a24a:	bf28      	it	cs
 800a24c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a250:	b29a      	uxth	r2, r3
 800a252:	6a3b      	ldr	r3, [r7, #32]
 800a254:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	791a      	ldrb	r2, [r3, #4]
 800a25a:	6a3b      	ldr	r3, [r7, #32]
 800a25c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	795a      	ldrb	r2, [r3, #5]
 800a262:	6a3b      	ldr	r3, [r7, #32]
 800a264:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	799a      	ldrb	r2, [r3, #6]
 800a26a:	6a3b      	ldr	r3, [r7, #32]
 800a26c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	79da      	ldrb	r2, [r3, #7]
 800a272:	6a3b      	ldr	r3, [r7, #32]
 800a274:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	7a1a      	ldrb	r2, [r3, #8]
 800a27a:	6a3b      	ldr	r3, [r7, #32]
 800a27c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a27e:	88fb      	ldrh	r3, [r7, #6]
 800a280:	2b09      	cmp	r3, #9
 800a282:	f240 80a1 	bls.w	800a3c8 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800a286:	2309      	movs	r3, #9
 800a288:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a28a:	2300      	movs	r3, #0
 800a28c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a28e:	e085      	b.n	800a39c <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a290:	f107 0316 	add.w	r3, r7, #22
 800a294:	4619      	mov	r1, r3
 800a296:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a298:	f000 f9e6 	bl	800a668 <USBH_GetNextDesc>
 800a29c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a0:	785b      	ldrb	r3, [r3, #1]
 800a2a2:	2b04      	cmp	r3, #4
 800a2a4:	d17a      	bne.n	800a39c <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	2b09      	cmp	r3, #9
 800a2ac:	d002      	beq.n	800a2b4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b0:	2209      	movs	r2, #9
 800a2b2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a2b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2b8:	221a      	movs	r2, #26
 800a2ba:	fb02 f303 	mul.w	r3, r2, r3
 800a2be:	3308      	adds	r3, #8
 800a2c0:	6a3a      	ldr	r2, [r7, #32]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	3302      	adds	r3, #2
 800a2c6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a2c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2ca:	69f8      	ldr	r0, [r7, #28]
 800a2cc:	f000 f882 	bl	800a3d4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a2da:	e043      	b.n	800a364 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a2dc:	f107 0316 	add.w	r3, r7, #22
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2e4:	f000 f9c0 	bl	800a668 <USBH_GetNextDesc>
 800a2e8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ec:	785b      	ldrb	r3, [r3, #1]
 800a2ee:	2b05      	cmp	r3, #5
 800a2f0:	d138      	bne.n	800a364 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	795b      	ldrb	r3, [r3, #5]
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d113      	bne.n	800a322 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a2fe:	2b02      	cmp	r3, #2
 800a300:	d003      	beq.n	800a30a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a302:	69fb      	ldr	r3, [r7, #28]
 800a304:	799b      	ldrb	r3, [r3, #6]
 800a306:	2b03      	cmp	r3, #3
 800a308:	d10b      	bne.n	800a322 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	79db      	ldrb	r3, [r3, #7]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d10b      	bne.n	800a32a <USBH_ParseCfgDesc+0x14e>
 800a312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	2b09      	cmp	r3, #9
 800a318:	d007      	beq.n	800a32a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a31c:	2209      	movs	r2, #9
 800a31e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a320:	e003      	b.n	800a32a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a324:	2207      	movs	r2, #7
 800a326:	701a      	strb	r2, [r3, #0]
 800a328:	e000      	b.n	800a32c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a32a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a32c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a330:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a334:	3201      	adds	r2, #1
 800a336:	00d2      	lsls	r2, r2, #3
 800a338:	211a      	movs	r1, #26
 800a33a:	fb01 f303 	mul.w	r3, r1, r3
 800a33e:	4413      	add	r3, r2
 800a340:	3308      	adds	r3, #8
 800a342:	6a3a      	ldr	r2, [r7, #32]
 800a344:	4413      	add	r3, r2
 800a346:	3304      	adds	r3, #4
 800a348:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a34a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a34c:	69b9      	ldr	r1, [r7, #24]
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f000 f86f 	bl	800a432 <USBH_ParseEPDesc>
 800a354:	4603      	mov	r3, r0
 800a356:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a35a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a35e:	3301      	adds	r3, #1
 800a360:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a364:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d80a      	bhi.n	800a382 <USBH_ParseCfgDesc+0x1a6>
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	791b      	ldrb	r3, [r3, #4]
 800a370:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a374:	429a      	cmp	r2, r3
 800a376:	d204      	bcs.n	800a382 <USBH_ParseCfgDesc+0x1a6>
 800a378:	6a3b      	ldr	r3, [r7, #32]
 800a37a:	885a      	ldrh	r2, [r3, #2]
 800a37c:	8afb      	ldrh	r3, [r7, #22]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d8ac      	bhi.n	800a2dc <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	791b      	ldrb	r3, [r3, #4]
 800a386:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d201      	bcs.n	800a392 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800a38e:	2303      	movs	r3, #3
 800a390:	e01c      	b.n	800a3cc <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800a392:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a396:	3301      	adds	r3, #1
 800a398:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a39c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d805      	bhi.n	800a3b0 <USBH_ParseCfgDesc+0x1d4>
 800a3a4:	6a3b      	ldr	r3, [r7, #32]
 800a3a6:	885a      	ldrh	r2, [r3, #2]
 800a3a8:	8afb      	ldrh	r3, [r7, #22]
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	f63f af70 	bhi.w	800a290 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a3b0:	6a3b      	ldr	r3, [r7, #32]
 800a3b2:	791b      	ldrb	r3, [r3, #4]
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	bf28      	it	cs
 800a3b8:	2302      	movcs	r3, #2
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d201      	bcs.n	800a3c8 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800a3c4:	2303      	movs	r3, #3
 800a3c6:	e001      	b.n	800a3cc <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800a3c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3730      	adds	r7, #48	@ 0x30
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	781a      	ldrb	r2, [r3, #0]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	785a      	ldrb	r2, [r3, #1]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	789a      	ldrb	r2, [r3, #2]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	78da      	ldrb	r2, [r3, #3]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	791a      	ldrb	r2, [r3, #4]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	795a      	ldrb	r2, [r3, #5]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	799a      	ldrb	r2, [r3, #6]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	79da      	ldrb	r2, [r3, #7]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	7a1a      	ldrb	r2, [r3, #8]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	721a      	strb	r2, [r3, #8]
}
 800a426:	bf00      	nop
 800a428:	370c      	adds	r7, #12
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr

0800a432 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a432:	b480      	push	{r7}
 800a434:	b087      	sub	sp, #28
 800a436:	af00      	add	r7, sp, #0
 800a438:	60f8      	str	r0, [r7, #12]
 800a43a:	60b9      	str	r1, [r7, #8]
 800a43c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a43e:	2300      	movs	r3, #0
 800a440:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	781a      	ldrb	r2, [r3, #0]
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	785a      	ldrb	r2, [r3, #1]
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	789a      	ldrb	r2, [r3, #2]
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	78da      	ldrb	r2, [r3, #3]
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	3304      	adds	r3, #4
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	461a      	mov	r2, r3
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	3305      	adds	r3, #5
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	021b      	lsls	r3, r3, #8
 800a472:	b29b      	uxth	r3, r3
 800a474:	4313      	orrs	r3, r2
 800a476:	b29a      	uxth	r2, r3
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	799a      	ldrb	r2, [r3, #6]
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	889b      	ldrh	r3, [r3, #4]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d009      	beq.n	800a4a0 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a490:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a494:	d804      	bhi.n	800a4a0 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a49a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a49e:	d901      	bls.n	800a4a4 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a4a0:	2303      	movs	r3, #3
 800a4a2:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d136      	bne.n	800a51c <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	78db      	ldrb	r3, [r3, #3]
 800a4b2:	f003 0303 	and.w	r3, r3, #3
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d108      	bne.n	800a4cc <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	889b      	ldrh	r3, [r3, #4]
 800a4be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4c2:	f240 8097 	bls.w	800a5f4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	75fb      	strb	r3, [r7, #23]
 800a4ca:	e093      	b.n	800a5f4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	78db      	ldrb	r3, [r3, #3]
 800a4d0:	f003 0303 	and.w	r3, r3, #3
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d107      	bne.n	800a4e8 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	889b      	ldrh	r3, [r3, #4]
 800a4dc:	2b40      	cmp	r3, #64	@ 0x40
 800a4de:	f240 8089 	bls.w	800a5f4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a4e2:	2303      	movs	r3, #3
 800a4e4:	75fb      	strb	r3, [r7, #23]
 800a4e6:	e085      	b.n	800a5f4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	78db      	ldrb	r3, [r3, #3]
 800a4ec:	f003 0303 	and.w	r3, r3, #3
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d005      	beq.n	800a500 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	78db      	ldrb	r3, [r3, #3]
 800a4f8:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a4fc:	2b03      	cmp	r3, #3
 800a4fe:	d10a      	bne.n	800a516 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	799b      	ldrb	r3, [r3, #6]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d003      	beq.n	800a510 <USBH_ParseEPDesc+0xde>
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	799b      	ldrb	r3, [r3, #6]
 800a50c:	2b10      	cmp	r3, #16
 800a50e:	d970      	bls.n	800a5f2 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a510:	2303      	movs	r3, #3
 800a512:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a514:	e06d      	b.n	800a5f2 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a516:	2303      	movs	r3, #3
 800a518:	75fb      	strb	r3, [r7, #23]
 800a51a:	e06b      	b.n	800a5f4 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a522:	2b01      	cmp	r3, #1
 800a524:	d13c      	bne.n	800a5a0 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	78db      	ldrb	r3, [r3, #3]
 800a52a:	f003 0303 	and.w	r3, r3, #3
 800a52e:	2b02      	cmp	r3, #2
 800a530:	d005      	beq.n	800a53e <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	78db      	ldrb	r3, [r3, #3]
 800a536:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d106      	bne.n	800a54c <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	889b      	ldrh	r3, [r3, #4]
 800a542:	2b40      	cmp	r3, #64	@ 0x40
 800a544:	d956      	bls.n	800a5f4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a546:	2303      	movs	r3, #3
 800a548:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a54a:	e053      	b.n	800a5f4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	78db      	ldrb	r3, [r3, #3]
 800a550:	f003 0303 	and.w	r3, r3, #3
 800a554:	2b01      	cmp	r3, #1
 800a556:	d10e      	bne.n	800a576 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	799b      	ldrb	r3, [r3, #6]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d007      	beq.n	800a570 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a564:	2b10      	cmp	r3, #16
 800a566:	d803      	bhi.n	800a570 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a56c:	2b40      	cmp	r3, #64	@ 0x40
 800a56e:	d941      	bls.n	800a5f4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a570:	2303      	movs	r3, #3
 800a572:	75fb      	strb	r3, [r7, #23]
 800a574:	e03e      	b.n	800a5f4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	78db      	ldrb	r3, [r3, #3]
 800a57a:	f003 0303 	and.w	r3, r3, #3
 800a57e:	2b03      	cmp	r3, #3
 800a580:	d10b      	bne.n	800a59a <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	799b      	ldrb	r3, [r3, #6]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d004      	beq.n	800a594 <USBH_ParseEPDesc+0x162>
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	889b      	ldrh	r3, [r3, #4]
 800a58e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a592:	d32f      	bcc.n	800a5f4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a594:	2303      	movs	r3, #3
 800a596:	75fb      	strb	r3, [r7, #23]
 800a598:	e02c      	b.n	800a5f4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a59a:	2303      	movs	r3, #3
 800a59c:	75fb      	strb	r3, [r7, #23]
 800a59e:	e029      	b.n	800a5f4 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d120      	bne.n	800a5ec <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	78db      	ldrb	r3, [r3, #3]
 800a5ae:	f003 0303 	and.w	r3, r3, #3
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d106      	bne.n	800a5c4 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	889b      	ldrh	r3, [r3, #4]
 800a5ba:	2b08      	cmp	r3, #8
 800a5bc:	d01a      	beq.n	800a5f4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a5be:	2303      	movs	r3, #3
 800a5c0:	75fb      	strb	r3, [r7, #23]
 800a5c2:	e017      	b.n	800a5f4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	78db      	ldrb	r3, [r3, #3]
 800a5c8:	f003 0303 	and.w	r3, r3, #3
 800a5cc:	2b03      	cmp	r3, #3
 800a5ce:	d10a      	bne.n	800a5e6 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	799b      	ldrb	r3, [r3, #6]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d003      	beq.n	800a5e0 <USBH_ParseEPDesc+0x1ae>
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	889b      	ldrh	r3, [r3, #4]
 800a5dc:	2b08      	cmp	r3, #8
 800a5de:	d909      	bls.n	800a5f4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a5e0:	2303      	movs	r3, #3
 800a5e2:	75fb      	strb	r3, [r7, #23]
 800a5e4:	e006      	b.n	800a5f4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a5e6:	2303      	movs	r3, #3
 800a5e8:	75fb      	strb	r3, [r7, #23]
 800a5ea:	e003      	b.n	800a5f4 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	75fb      	strb	r3, [r7, #23]
 800a5f0:	e000      	b.n	800a5f4 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a5f2:	bf00      	nop
  }

  return status;
 800a5f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	371c      	adds	r7, #28
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a600:	4770      	bx	lr

0800a602 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a602:	b480      	push	{r7}
 800a604:	b087      	sub	sp, #28
 800a606:	af00      	add	r7, sp, #0
 800a608:	60f8      	str	r0, [r7, #12]
 800a60a:	60b9      	str	r1, [r7, #8]
 800a60c:	4613      	mov	r3, r2
 800a60e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	3301      	adds	r3, #1
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	2b03      	cmp	r3, #3
 800a618:	d120      	bne.n	800a65c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	1e9a      	subs	r2, r3, #2
 800a620:	88fb      	ldrh	r3, [r7, #6]
 800a622:	4293      	cmp	r3, r2
 800a624:	bf28      	it	cs
 800a626:	4613      	movcs	r3, r2
 800a628:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	3302      	adds	r3, #2
 800a62e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a630:	2300      	movs	r3, #0
 800a632:	82fb      	strh	r3, [r7, #22]
 800a634:	e00b      	b.n	800a64e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a636:	8afb      	ldrh	r3, [r7, #22]
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	4413      	add	r3, r2
 800a63c:	781a      	ldrb	r2, [r3, #0]
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	3301      	adds	r3, #1
 800a646:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a648:	8afb      	ldrh	r3, [r7, #22]
 800a64a:	3302      	adds	r3, #2
 800a64c:	82fb      	strh	r3, [r7, #22]
 800a64e:	8afa      	ldrh	r2, [r7, #22]
 800a650:	8abb      	ldrh	r3, [r7, #20]
 800a652:	429a      	cmp	r2, r3
 800a654:	d3ef      	bcc.n	800a636 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	2200      	movs	r2, #0
 800a65a:	701a      	strb	r2, [r3, #0]
  }
}
 800a65c:	bf00      	nop
 800a65e:	371c      	adds	r7, #28
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	881b      	ldrh	r3, [r3, #0]
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	7812      	ldrb	r2, [r2, #0]
 800a67a:	4413      	add	r3, r2
 800a67c:	b29a      	uxth	r2, r3
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	4413      	add	r3, r2
 800a68c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a68e:	68fb      	ldr	r3, [r7, #12]
}
 800a690:	4618      	mov	r0, r3
 800a692:	3714      	adds	r7, #20
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b086      	sub	sp, #24
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	789b      	ldrb	r3, [r3, #2]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d002      	beq.n	800a6bc <USBH_CtlReq+0x20>
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d00f      	beq.n	800a6da <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800a6ba:	e027      	b.n	800a70c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	68ba      	ldr	r2, [r7, #8]
 800a6c0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	88fa      	ldrh	r2, [r7, #6]
 800a6c6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2202      	movs	r2, #2
 800a6d2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	75fb      	strb	r3, [r7, #23]
      break;
 800a6d8:	e018      	b.n	800a70c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f000 f81c 	bl	800a718 <USBH_HandleControl>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a6e4:	7dfb      	ldrb	r3, [r7, #23]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d002      	beq.n	800a6f0 <USBH_CtlReq+0x54>
 800a6ea:	7dfb      	ldrb	r3, [r7, #23]
 800a6ec:	2b03      	cmp	r3, #3
 800a6ee:	d106      	bne.n	800a6fe <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	761a      	strb	r2, [r3, #24]
      break;
 800a6fc:	e005      	b.n	800a70a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a6fe:	7dfb      	ldrb	r3, [r7, #23]
 800a700:	2b02      	cmp	r3, #2
 800a702:	d102      	bne.n	800a70a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2201      	movs	r2, #1
 800a708:	709a      	strb	r2, [r3, #2]
      break;
 800a70a:	bf00      	nop
  }
  return status;
 800a70c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3718      	adds	r7, #24
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
	...

0800a718 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b086      	sub	sp, #24
 800a71c:	af02      	add	r7, sp, #8
 800a71e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a720:	2301      	movs	r3, #1
 800a722:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a724:	2300      	movs	r3, #0
 800a726:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	7e1b      	ldrb	r3, [r3, #24]
 800a72c:	3b01      	subs	r3, #1
 800a72e:	2b0a      	cmp	r3, #10
 800a730:	f200 8157 	bhi.w	800a9e2 <USBH_HandleControl+0x2ca>
 800a734:	a201      	add	r2, pc, #4	@ (adr r2, 800a73c <USBH_HandleControl+0x24>)
 800a736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a73a:	bf00      	nop
 800a73c:	0800a769 	.word	0x0800a769
 800a740:	0800a783 	.word	0x0800a783
 800a744:	0800a7ed 	.word	0x0800a7ed
 800a748:	0800a813 	.word	0x0800a813
 800a74c:	0800a84d 	.word	0x0800a84d
 800a750:	0800a877 	.word	0x0800a877
 800a754:	0800a8c9 	.word	0x0800a8c9
 800a758:	0800a8eb 	.word	0x0800a8eb
 800a75c:	0800a927 	.word	0x0800a927
 800a760:	0800a94d 	.word	0x0800a94d
 800a764:	0800a98b 	.word	0x0800a98b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f103 0110 	add.w	r1, r3, #16
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	795b      	ldrb	r3, [r3, #5]
 800a772:	461a      	mov	r2, r3
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 f945 	bl	800aa04 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2202      	movs	r2, #2
 800a77e:	761a      	strb	r2, [r3, #24]
      break;
 800a780:	e13a      	b.n	800a9f8 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	795b      	ldrb	r3, [r3, #5]
 800a786:	4619      	mov	r1, r3
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 fcc7 	bl	800b11c <USBH_LL_GetURBState>
 800a78e:	4603      	mov	r3, r0
 800a790:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a792:	7bbb      	ldrb	r3, [r7, #14]
 800a794:	2b01      	cmp	r3, #1
 800a796:	d11e      	bne.n	800a7d6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	7c1b      	ldrb	r3, [r3, #16]
 800a79c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a7a0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	8adb      	ldrh	r3, [r3, #22]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00a      	beq.n	800a7c0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a7aa:	7b7b      	ldrb	r3, [r7, #13]
 800a7ac:	2b80      	cmp	r3, #128	@ 0x80
 800a7ae:	d103      	bne.n	800a7b8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2203      	movs	r2, #3
 800a7b4:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800a7b6:	e116      	b.n	800a9e6 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2205      	movs	r2, #5
 800a7bc:	761a      	strb	r2, [r3, #24]
      break;
 800a7be:	e112      	b.n	800a9e6 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 800a7c0:	7b7b      	ldrb	r3, [r7, #13]
 800a7c2:	2b80      	cmp	r3, #128	@ 0x80
 800a7c4:	d103      	bne.n	800a7ce <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2209      	movs	r2, #9
 800a7ca:	761a      	strb	r2, [r3, #24]
      break;
 800a7cc:	e10b      	b.n	800a9e6 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2207      	movs	r2, #7
 800a7d2:	761a      	strb	r2, [r3, #24]
      break;
 800a7d4:	e107      	b.n	800a9e6 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a7d6:	7bbb      	ldrb	r3, [r7, #14]
 800a7d8:	2b04      	cmp	r3, #4
 800a7da:	d003      	beq.n	800a7e4 <USBH_HandleControl+0xcc>
 800a7dc:	7bbb      	ldrb	r3, [r7, #14]
 800a7de:	2b02      	cmp	r3, #2
 800a7e0:	f040 8101 	bne.w	800a9e6 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	220b      	movs	r2, #11
 800a7e8:	761a      	strb	r2, [r3, #24]
      break;
 800a7ea:	e0fc      	b.n	800a9e6 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a7f2:	b29a      	uxth	r2, r3
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6899      	ldr	r1, [r3, #8]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	899a      	ldrh	r2, [r3, #12]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	791b      	ldrb	r3, [r3, #4]
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 f93c 	bl	800aa82 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2204      	movs	r2, #4
 800a80e:	761a      	strb	r2, [r3, #24]
      break;
 800a810:	e0f2      	b.n	800a9f8 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	791b      	ldrb	r3, [r3, #4]
 800a816:	4619      	mov	r1, r3
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 fc7f 	bl	800b11c <USBH_LL_GetURBState>
 800a81e:	4603      	mov	r3, r0
 800a820:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a822:	7bbb      	ldrb	r3, [r7, #14]
 800a824:	2b01      	cmp	r3, #1
 800a826:	d103      	bne.n	800a830 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2209      	movs	r2, #9
 800a82c:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800a82e:	e0dc      	b.n	800a9ea <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 800a830:	7bbb      	ldrb	r3, [r7, #14]
 800a832:	2b05      	cmp	r3, #5
 800a834:	d102      	bne.n	800a83c <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800a836:	2303      	movs	r3, #3
 800a838:	73fb      	strb	r3, [r7, #15]
      break;
 800a83a:	e0d6      	b.n	800a9ea <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 800a83c:	7bbb      	ldrb	r3, [r7, #14]
 800a83e:	2b04      	cmp	r3, #4
 800a840:	f040 80d3 	bne.w	800a9ea <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	220b      	movs	r2, #11
 800a848:	761a      	strb	r2, [r3, #24]
      break;
 800a84a:	e0ce      	b.n	800a9ea <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6899      	ldr	r1, [r3, #8]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	899a      	ldrh	r2, [r3, #12]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	795b      	ldrb	r3, [r3, #5]
 800a858:	2001      	movs	r0, #1
 800a85a:	9000      	str	r0, [sp, #0]
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 f8eb 	bl	800aa38 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a868:	b29a      	uxth	r2, r3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2206      	movs	r2, #6
 800a872:	761a      	strb	r2, [r3, #24]
      break;
 800a874:	e0c0      	b.n	800a9f8 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	795b      	ldrb	r3, [r3, #5]
 800a87a:	4619      	mov	r1, r3
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 fc4d 	bl	800b11c <USBH_LL_GetURBState>
 800a882:	4603      	mov	r3, r0
 800a884:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a886:	7bbb      	ldrb	r3, [r7, #14]
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d103      	bne.n	800a894 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2207      	movs	r2, #7
 800a890:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800a892:	e0ac      	b.n	800a9ee <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 800a894:	7bbb      	ldrb	r3, [r7, #14]
 800a896:	2b05      	cmp	r3, #5
 800a898:	d105      	bne.n	800a8a6 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	220c      	movs	r2, #12
 800a89e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a8a4:	e0a3      	b.n	800a9ee <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a8a6:	7bbb      	ldrb	r3, [r7, #14]
 800a8a8:	2b02      	cmp	r3, #2
 800a8aa:	d103      	bne.n	800a8b4 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2205      	movs	r2, #5
 800a8b0:	761a      	strb	r2, [r3, #24]
      break;
 800a8b2:	e09c      	b.n	800a9ee <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 800a8b4:	7bbb      	ldrb	r3, [r7, #14]
 800a8b6:	2b04      	cmp	r3, #4
 800a8b8:	f040 8099 	bne.w	800a9ee <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	220b      	movs	r2, #11
 800a8c0:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a8c2:	2302      	movs	r3, #2
 800a8c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a8c6:	e092      	b.n	800a9ee <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	791b      	ldrb	r3, [r3, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	2100      	movs	r1, #0
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 f8d6 	bl	800aa82 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a8dc:	b29a      	uxth	r2, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2208      	movs	r2, #8
 800a8e6:	761a      	strb	r2, [r3, #24]

      break;
 800a8e8:	e086      	b.n	800a9f8 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	791b      	ldrb	r3, [r3, #4]
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 fc13 	bl	800b11c <USBH_LL_GetURBState>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a8fa:	7bbb      	ldrb	r3, [r7, #14]
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d105      	bne.n	800a90c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	220d      	movs	r2, #13
 800a904:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a906:	2300      	movs	r3, #0
 800a908:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800a90a:	e072      	b.n	800a9f2 <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 800a90c:	7bbb      	ldrb	r3, [r7, #14]
 800a90e:	2b04      	cmp	r3, #4
 800a910:	d103      	bne.n	800a91a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	220b      	movs	r2, #11
 800a916:	761a      	strb	r2, [r3, #24]
      break;
 800a918:	e06b      	b.n	800a9f2 <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800a91a:	7bbb      	ldrb	r3, [r7, #14]
 800a91c:	2b05      	cmp	r3, #5
 800a91e:	d168      	bne.n	800a9f2 <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 800a920:	2303      	movs	r3, #3
 800a922:	73fb      	strb	r3, [r7, #15]
      break;
 800a924:	e065      	b.n	800a9f2 <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	795b      	ldrb	r3, [r3, #5]
 800a92a:	2201      	movs	r2, #1
 800a92c:	9200      	str	r2, [sp, #0]
 800a92e:	2200      	movs	r2, #0
 800a930:	2100      	movs	r1, #0
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f880 	bl	800aa38 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a93e:	b29a      	uxth	r2, r3
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	220a      	movs	r2, #10
 800a948:	761a      	strb	r2, [r3, #24]
      break;
 800a94a:	e055      	b.n	800a9f8 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	795b      	ldrb	r3, [r3, #5]
 800a950:	4619      	mov	r1, r3
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 fbe2 	bl	800b11c <USBH_LL_GetURBState>
 800a958:	4603      	mov	r3, r0
 800a95a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a95c:	7bbb      	ldrb	r3, [r7, #14]
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d105      	bne.n	800a96e <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800a962:	2300      	movs	r3, #0
 800a964:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	220d      	movs	r2, #13
 800a96a:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800a96c:	e043      	b.n	800a9f6 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a96e:	7bbb      	ldrb	r3, [r7, #14]
 800a970:	2b02      	cmp	r3, #2
 800a972:	d103      	bne.n	800a97c <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2209      	movs	r2, #9
 800a978:	761a      	strb	r2, [r3, #24]
      break;
 800a97a:	e03c      	b.n	800a9f6 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800a97c:	7bbb      	ldrb	r3, [r7, #14]
 800a97e:	2b04      	cmp	r3, #4
 800a980:	d139      	bne.n	800a9f6 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	220b      	movs	r2, #11
 800a986:	761a      	strb	r2, [r3, #24]
      break;
 800a988:	e035      	b.n	800a9f6 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	7e5b      	ldrb	r3, [r3, #25]
 800a98e:	3301      	adds	r3, #1
 800a990:	b2da      	uxtb	r2, r3
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	765a      	strb	r2, [r3, #25]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	7e5b      	ldrb	r3, [r3, #25]
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d806      	bhi.n	800a9ac <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a9aa:	e025      	b.n	800a9f8 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a9b2:	2106      	movs	r1, #6
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	795b      	ldrb	r3, [r3, #5]
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 f90d 	bl	800abe4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	791b      	ldrb	r3, [r3, #4]
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f907 	bl	800abe4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a9dc:	2302      	movs	r3, #2
 800a9de:	73fb      	strb	r3, [r7, #15]
      break;
 800a9e0:	e00a      	b.n	800a9f8 <USBH_HandleControl+0x2e0>

    default:
      break;
 800a9e2:	bf00      	nop
 800a9e4:	e008      	b.n	800a9f8 <USBH_HandleControl+0x2e0>
      break;
 800a9e6:	bf00      	nop
 800a9e8:	e006      	b.n	800a9f8 <USBH_HandleControl+0x2e0>
      break;
 800a9ea:	bf00      	nop
 800a9ec:	e004      	b.n	800a9f8 <USBH_HandleControl+0x2e0>
      break;
 800a9ee:	bf00      	nop
 800a9f0:	e002      	b.n	800a9f8 <USBH_HandleControl+0x2e0>
      break;
 800a9f2:	bf00      	nop
 800a9f4:	e000      	b.n	800a9f8 <USBH_HandleControl+0x2e0>
      break;
 800a9f6:	bf00      	nop
  }

  return status;
 800a9f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop

0800aa04 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b088      	sub	sp, #32
 800aa08:	af04      	add	r7, sp, #16
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	4613      	mov	r3, r2
 800aa10:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa12:	79f9      	ldrb	r1, [r7, #7]
 800aa14:	2300      	movs	r3, #0
 800aa16:	9303      	str	r3, [sp, #12]
 800aa18:	2308      	movs	r3, #8
 800aa1a:	9302      	str	r3, [sp, #8]
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	9301      	str	r3, [sp, #4]
 800aa20:	2300      	movs	r3, #0
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	2300      	movs	r3, #0
 800aa26:	2200      	movs	r2, #0
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	f000 fb46 	bl	800b0ba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800aa2e:	2300      	movs	r3, #0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3710      	adds	r7, #16
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b088      	sub	sp, #32
 800aa3c:	af04      	add	r7, sp, #16
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	4611      	mov	r1, r2
 800aa44:	461a      	mov	r2, r3
 800aa46:	460b      	mov	r3, r1
 800aa48:	80fb      	strh	r3, [r7, #6]
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d001      	beq.n	800aa5c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa5c:	7979      	ldrb	r1, [r7, #5]
 800aa5e:	7e3b      	ldrb	r3, [r7, #24]
 800aa60:	9303      	str	r3, [sp, #12]
 800aa62:	88fb      	ldrh	r3, [r7, #6]
 800aa64:	9302      	str	r3, [sp, #8]
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	9301      	str	r3, [sp, #4]
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	9300      	str	r3, [sp, #0]
 800aa6e:	2300      	movs	r3, #0
 800aa70:	2200      	movs	r2, #0
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	f000 fb21 	bl	800b0ba <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3710      	adds	r7, #16
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b088      	sub	sp, #32
 800aa86:	af04      	add	r7, sp, #16
 800aa88:	60f8      	str	r0, [r7, #12]
 800aa8a:	60b9      	str	r1, [r7, #8]
 800aa8c:	4611      	mov	r1, r2
 800aa8e:	461a      	mov	r2, r3
 800aa90:	460b      	mov	r3, r1
 800aa92:	80fb      	strh	r3, [r7, #6]
 800aa94:	4613      	mov	r3, r2
 800aa96:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa98:	7979      	ldrb	r1, [r7, #5]
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	9303      	str	r3, [sp, #12]
 800aa9e:	88fb      	ldrh	r3, [r7, #6]
 800aaa0:	9302      	str	r3, [sp, #8]
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	9301      	str	r3, [sp, #4]
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	9300      	str	r3, [sp, #0]
 800aaaa:	2300      	movs	r3, #0
 800aaac:	2201      	movs	r2, #1
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	f000 fb03 	bl	800b0ba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aab4:	2300      	movs	r3, #0

}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b088      	sub	sp, #32
 800aac2:	af04      	add	r7, sp, #16
 800aac4:	60f8      	str	r0, [r7, #12]
 800aac6:	60b9      	str	r1, [r7, #8]
 800aac8:	4611      	mov	r1, r2
 800aaca:	461a      	mov	r2, r3
 800aacc:	460b      	mov	r3, r1
 800aace:	80fb      	strh	r3, [r7, #6]
 800aad0:	4613      	mov	r3, r2
 800aad2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d001      	beq.n	800aae2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800aade:	2300      	movs	r3, #0
 800aae0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aae2:	7979      	ldrb	r1, [r7, #5]
 800aae4:	7e3b      	ldrb	r3, [r7, #24]
 800aae6:	9303      	str	r3, [sp, #12]
 800aae8:	88fb      	ldrh	r3, [r7, #6]
 800aaea:	9302      	str	r3, [sp, #8]
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	9301      	str	r3, [sp, #4]
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	9300      	str	r3, [sp, #0]
 800aaf4:	2302      	movs	r3, #2
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	68f8      	ldr	r0, [r7, #12]
 800aafa:	f000 fade 	bl	800b0ba <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3710      	adds	r7, #16
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b088      	sub	sp, #32
 800ab0c:	af04      	add	r7, sp, #16
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	4611      	mov	r1, r2
 800ab14:	461a      	mov	r2, r3
 800ab16:	460b      	mov	r3, r1
 800ab18:	80fb      	strh	r3, [r7, #6]
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ab1e:	7979      	ldrb	r1, [r7, #5]
 800ab20:	2300      	movs	r3, #0
 800ab22:	9303      	str	r3, [sp, #12]
 800ab24:	88fb      	ldrh	r3, [r7, #6]
 800ab26:	9302      	str	r3, [sp, #8]
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	9301      	str	r3, [sp, #4]
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	9300      	str	r3, [sp, #0]
 800ab30:	2302      	movs	r3, #2
 800ab32:	2201      	movs	r2, #1
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	f000 fac0 	bl	800b0ba <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ab3a:	2300      	movs	r3, #0
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3710      	adds	r7, #16
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b086      	sub	sp, #24
 800ab48:	af04      	add	r7, sp, #16
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	4608      	mov	r0, r1
 800ab4e:	4611      	mov	r1, r2
 800ab50:	461a      	mov	r2, r3
 800ab52:	4603      	mov	r3, r0
 800ab54:	70fb      	strb	r3, [r7, #3]
 800ab56:	460b      	mov	r3, r1
 800ab58:	70bb      	strb	r3, [r7, #2]
 800ab5a:	4613      	mov	r3, r2
 800ab5c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ab5e:	7878      	ldrb	r0, [r7, #1]
 800ab60:	78ba      	ldrb	r2, [r7, #2]
 800ab62:	78f9      	ldrb	r1, [r7, #3]
 800ab64:	8b3b      	ldrh	r3, [r7, #24]
 800ab66:	9302      	str	r3, [sp, #8]
 800ab68:	7d3b      	ldrb	r3, [r7, #20]
 800ab6a:	9301      	str	r3, [sp, #4]
 800ab6c:	7c3b      	ldrb	r3, [r7, #16]
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	4603      	mov	r3, r0
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 fa53 	bl	800b01e <USBH_LL_OpenPipe>

  return USBH_OK;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b082      	sub	sp, #8
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ab8e:	78fb      	ldrb	r3, [r7, #3]
 800ab90:	4619      	mov	r1, r3
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 fa72 	bl	800b07c <USBH_LL_ClosePipe>

  return USBH_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3708      	adds	r7, #8
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b084      	sub	sp, #16
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
 800abaa:	460b      	mov	r3, r1
 800abac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 f836 	bl	800ac20 <USBH_GetFreePipe>
 800abb4:	4603      	mov	r3, r0
 800abb6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800abb8:	89fb      	ldrh	r3, [r7, #14]
 800abba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d00a      	beq.n	800abd8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800abc2:	78fa      	ldrb	r2, [r7, #3]
 800abc4:	89fb      	ldrh	r3, [r7, #14]
 800abc6:	f003 030f 	and.w	r3, r3, #15
 800abca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800abce:	6879      	ldr	r1, [r7, #4]
 800abd0:	33e0      	adds	r3, #224	@ 0xe0
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	440b      	add	r3, r1
 800abd6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800abd8:	89fb      	ldrh	r3, [r7, #14]
 800abda:	b2db      	uxtb	r3, r3
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3710      	adds	r7, #16
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	460b      	mov	r3, r1
 800abee:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800abf0:	78fb      	ldrb	r3, [r7, #3]
 800abf2:	2b0f      	cmp	r3, #15
 800abf4:	d80d      	bhi.n	800ac12 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800abf6:	78fb      	ldrb	r3, [r7, #3]
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	33e0      	adds	r3, #224	@ 0xe0
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	4413      	add	r3, r2
 800ac00:	685a      	ldr	r2, [r3, #4]
 800ac02:	78fb      	ldrb	r3, [r7, #3]
 800ac04:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ac08:	6879      	ldr	r1, [r7, #4]
 800ac0a:	33e0      	adds	r3, #224	@ 0xe0
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	440b      	add	r3, r1
 800ac10:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	370c      	adds	r7, #12
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b085      	sub	sp, #20
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	73fb      	strb	r3, [r7, #15]
 800ac30:	e00f      	b.n	800ac52 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ac32:	7bfb      	ldrb	r3, [r7, #15]
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	33e0      	adds	r3, #224	@ 0xe0
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	4413      	add	r3, r2
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d102      	bne.n	800ac4c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ac46:	7bfb      	ldrb	r3, [r7, #15]
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	e007      	b.n	800ac5c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ac4c:	7bfb      	ldrb	r3, [r7, #15]
 800ac4e:	3301      	adds	r3, #1
 800ac50:	73fb      	strb	r3, [r7, #15]
 800ac52:	7bfb      	ldrb	r3, [r7, #15]
 800ac54:	2b0f      	cmp	r3, #15
 800ac56:	d9ec      	bls.n	800ac32 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ac58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3714      	adds	r7, #20
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	490e      	ldr	r1, [pc, #56]	@ (800aca8 <MX_USB_HOST_Init+0x40>)
 800ac70:	480e      	ldr	r0, [pc, #56]	@ (800acac <MX_USB_HOST_Init+0x44>)
 800ac72:	f7fe fb0f 	bl	8009294 <USBH_Init>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d001      	beq.n	800ac80 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ac7c:	f7f6 fdc0 	bl	8001800 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ac80:	490b      	ldr	r1, [pc, #44]	@ (800acb0 <MX_USB_HOST_Init+0x48>)
 800ac82:	480a      	ldr	r0, [pc, #40]	@ (800acac <MX_USB_HOST_Init+0x44>)
 800ac84:	f7fe fbb1 	bl	80093ea <USBH_RegisterClass>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d001      	beq.n	800ac92 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ac8e:	f7f6 fdb7 	bl	8001800 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ac92:	4806      	ldr	r0, [pc, #24]	@ (800acac <MX_USB_HOST_Init+0x44>)
 800ac94:	f7fe fc35 	bl	8009502 <USBH_Start>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d001      	beq.n	800aca2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ac9e:	f7f6 fdaf 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800aca2:	bf00      	nop
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	0800acc9 	.word	0x0800acc9
 800acac:	2000040c 	.word	0x2000040c
 800acb0:	2000000c 	.word	0x2000000c

0800acb4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800acb8:	4802      	ldr	r0, [pc, #8]	@ (800acc4 <MX_USB_HOST_Process+0x10>)
 800acba:	f7fe fc33 	bl	8009524 <USBH_Process>
}
 800acbe:	bf00      	nop
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	2000040c 	.word	0x2000040c

0800acc8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	460b      	mov	r3, r1
 800acd2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800acd4:	78fb      	ldrb	r3, [r7, #3]
 800acd6:	3b01      	subs	r3, #1
 800acd8:	2b04      	cmp	r3, #4
 800acda:	d819      	bhi.n	800ad10 <USBH_UserProcess+0x48>
 800acdc:	a201      	add	r2, pc, #4	@ (adr r2, 800ace4 <USBH_UserProcess+0x1c>)
 800acde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace2:	bf00      	nop
 800ace4:	0800ad11 	.word	0x0800ad11
 800ace8:	0800ad01 	.word	0x0800ad01
 800acec:	0800ad11 	.word	0x0800ad11
 800acf0:	0800ad09 	.word	0x0800ad09
 800acf4:	0800acf9 	.word	0x0800acf9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800acf8:	4b09      	ldr	r3, [pc, #36]	@ (800ad20 <USBH_UserProcess+0x58>)
 800acfa:	2203      	movs	r2, #3
 800acfc:	701a      	strb	r2, [r3, #0]
  break;
 800acfe:	e008      	b.n	800ad12 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ad00:	4b07      	ldr	r3, [pc, #28]	@ (800ad20 <USBH_UserProcess+0x58>)
 800ad02:	2202      	movs	r2, #2
 800ad04:	701a      	strb	r2, [r3, #0]
  break;
 800ad06:	e004      	b.n	800ad12 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ad08:	4b05      	ldr	r3, [pc, #20]	@ (800ad20 <USBH_UserProcess+0x58>)
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	701a      	strb	r2, [r3, #0]
  break;
 800ad0e:	e000      	b.n	800ad12 <USBH_UserProcess+0x4a>

  default:
  break;
 800ad10:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ad12:	bf00      	nop
 800ad14:	370c      	adds	r7, #12
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	200007e4 	.word	0x200007e4

0800ad24 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b08a      	sub	sp, #40	@ 0x28
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad2c:	f107 0314 	add.w	r3, r7, #20
 800ad30:	2200      	movs	r2, #0
 800ad32:	601a      	str	r2, [r3, #0]
 800ad34:	605a      	str	r2, [r3, #4]
 800ad36:	609a      	str	r2, [r3, #8]
 800ad38:	60da      	str	r2, [r3, #12]
 800ad3a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ad44:	d147      	bne.n	800add6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad46:	2300      	movs	r3, #0
 800ad48:	613b      	str	r3, [r7, #16]
 800ad4a:	4b25      	ldr	r3, [pc, #148]	@ (800ade0 <HAL_HCD_MspInit+0xbc>)
 800ad4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad4e:	4a24      	ldr	r2, [pc, #144]	@ (800ade0 <HAL_HCD_MspInit+0xbc>)
 800ad50:	f043 0301 	orr.w	r3, r3, #1
 800ad54:	6313      	str	r3, [r2, #48]	@ 0x30
 800ad56:	4b22      	ldr	r3, [pc, #136]	@ (800ade0 <HAL_HCD_MspInit+0xbc>)
 800ad58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad5a:	f003 0301 	and.w	r3, r3, #1
 800ad5e:	613b      	str	r3, [r7, #16]
 800ad60:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ad62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ad70:	f107 0314 	add.w	r3, r7, #20
 800ad74:	4619      	mov	r1, r3
 800ad76:	481b      	ldr	r0, [pc, #108]	@ (800ade4 <HAL_HCD_MspInit+0xc0>)
 800ad78:	f7f8 facc 	bl	8003314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ad7c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800ad80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad82:	2302      	movs	r3, #2
 800ad84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad86:	2300      	movs	r3, #0
 800ad88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ad8e:	230a      	movs	r3, #10
 800ad90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad92:	f107 0314 	add.w	r3, r7, #20
 800ad96:	4619      	mov	r1, r3
 800ad98:	4812      	ldr	r0, [pc, #72]	@ (800ade4 <HAL_HCD_MspInit+0xc0>)
 800ad9a:	f7f8 fabb 	bl	8003314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ad9e:	4b10      	ldr	r3, [pc, #64]	@ (800ade0 <HAL_HCD_MspInit+0xbc>)
 800ada0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ada2:	4a0f      	ldr	r2, [pc, #60]	@ (800ade0 <HAL_HCD_MspInit+0xbc>)
 800ada4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ada8:	6353      	str	r3, [r2, #52]	@ 0x34
 800adaa:	2300      	movs	r3, #0
 800adac:	60fb      	str	r3, [r7, #12]
 800adae:	4b0c      	ldr	r3, [pc, #48]	@ (800ade0 <HAL_HCD_MspInit+0xbc>)
 800adb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adb2:	4a0b      	ldr	r2, [pc, #44]	@ (800ade0 <HAL_HCD_MspInit+0xbc>)
 800adb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800adb8:	6453      	str	r3, [r2, #68]	@ 0x44
 800adba:	4b09      	ldr	r3, [pc, #36]	@ (800ade0 <HAL_HCD_MspInit+0xbc>)
 800adbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800adc2:	60fb      	str	r3, [r7, #12]
 800adc4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800adc6:	2200      	movs	r2, #0
 800adc8:	2100      	movs	r1, #0
 800adca:	2043      	movs	r0, #67	@ 0x43
 800adcc:	f7f7 fefb 	bl	8002bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800add0:	2043      	movs	r0, #67	@ 0x43
 800add2:	f7f7 ff14 	bl	8002bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800add6:	bf00      	nop
 800add8:	3728      	adds	r7, #40	@ 0x28
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	40023800 	.word	0x40023800
 800ade4:	40020000 	.word	0x40020000

0800ade8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7fe ff6d 	bl	8009cd6 <USBH_LL_IncTimer>
}
 800adfc:	bf00      	nop
 800adfe:	3708      	adds	r7, #8
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7fe ffa9 	bl	8009d6a <USBH_LL_Connect>
}
 800ae18:	bf00      	nop
 800ae1a:	3708      	adds	r7, #8
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7fe ffb2 	bl	8009d98 <USBH_LL_Disconnect>
}
 800ae34:	bf00      	nop
 800ae36:	3708      	adds	r7, #8
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	460b      	mov	r3, r1
 800ae46:	70fb      	strb	r3, [r7, #3]
 800ae48:	4613      	mov	r3, r2
 800ae4a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ae4c:	bf00      	nop
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7fe ff5f 	bl	8009d2a <USBH_LL_PortEnabled>
}
 800ae6c:	bf00      	nop
 800ae6e:	3708      	adds	r7, #8
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7fe ff5f 	bl	8009d46 <USBH_LL_PortDisabled>
}
 800ae88:	bf00      	nop
 800ae8a:	3708      	adds	r7, #8
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d12a      	bne.n	800aef8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800aea2:	4a18      	ldr	r2, [pc, #96]	@ (800af04 <USBH_LL_Init+0x74>)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4a15      	ldr	r2, [pc, #84]	@ (800af04 <USBH_LL_Init+0x74>)
 800aeae:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aeb2:	4b14      	ldr	r3, [pc, #80]	@ (800af04 <USBH_LL_Init+0x74>)
 800aeb4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800aeb8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800aeba:	4b12      	ldr	r3, [pc, #72]	@ (800af04 <USBH_LL_Init+0x74>)
 800aebc:	2208      	movs	r2, #8
 800aebe:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800aec0:	4b10      	ldr	r3, [pc, #64]	@ (800af04 <USBH_LL_Init+0x74>)
 800aec2:	2201      	movs	r2, #1
 800aec4:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aec6:	4b0f      	ldr	r3, [pc, #60]	@ (800af04 <USBH_LL_Init+0x74>)
 800aec8:	2200      	movs	r2, #0
 800aeca:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800aecc:	4b0d      	ldr	r3, [pc, #52]	@ (800af04 <USBH_LL_Init+0x74>)
 800aece:	2202      	movs	r2, #2
 800aed0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aed2:	4b0c      	ldr	r3, [pc, #48]	@ (800af04 <USBH_LL_Init+0x74>)
 800aed4:	2200      	movs	r2, #0
 800aed6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800aed8:	480a      	ldr	r0, [pc, #40]	@ (800af04 <USBH_LL_Init+0x74>)
 800aeda:	f7f8 fc03 	bl	80036e4 <HAL_HCD_Init>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d001      	beq.n	800aee8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800aee4:	f7f6 fc8c 	bl	8001800 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800aee8:	4806      	ldr	r0, [pc, #24]	@ (800af04 <USBH_LL_Init+0x74>)
 800aeea:	f7f9 f863 	bl	8003fb4 <HAL_HCD_GetCurrentFrame>
 800aeee:	4603      	mov	r3, r0
 800aef0:	4619      	mov	r1, r3
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f7fe fee0 	bl	8009cb8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800aef8:	2300      	movs	r3, #0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3708      	adds	r7, #8
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	200007e8 	.word	0x200007e8

0800af08 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af10:	2300      	movs	r3, #0
 800af12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af14:	2300      	movs	r3, #0
 800af16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800af1e:	4618      	mov	r0, r3
 800af20:	f7f8 ffd0 	bl	8003ec4 <HAL_HCD_Start>
 800af24:	4603      	mov	r3, r0
 800af26:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800af28:	7bfb      	ldrb	r3, [r7, #15]
 800af2a:	4618      	mov	r0, r3
 800af2c:	f000 f95e 	bl	800b1ec <USBH_Get_USB_Status>
 800af30:	4603      	mov	r3, r0
 800af32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af34:	7bbb      	ldrb	r3, [r7, #14]
}
 800af36:	4618      	mov	r0, r3
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}

0800af3e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800af3e:	b580      	push	{r7, lr}
 800af40:	b084      	sub	sp, #16
 800af42:	af00      	add	r7, sp, #0
 800af44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af46:	2300      	movs	r3, #0
 800af48:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af4a:	2300      	movs	r3, #0
 800af4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800af54:	4618      	mov	r0, r3
 800af56:	f7f8 ffd8 	bl	8003f0a <HAL_HCD_Stop>
 800af5a:	4603      	mov	r3, r0
 800af5c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800af5e:	7bfb      	ldrb	r3, [r7, #15]
 800af60:	4618      	mov	r0, r3
 800af62:	f000 f943 	bl	800b1ec <USBH_Get_USB_Status>
 800af66:	4603      	mov	r3, r0
 800af68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3710      	adds	r7, #16
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800af7c:	2301      	movs	r3, #1
 800af7e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800af86:	4618      	mov	r0, r3
 800af88:	f7f9 f822 	bl	8003fd0 <HAL_HCD_GetCurrentSpeed>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d00c      	beq.n	800afac <USBH_LL_GetSpeed+0x38>
 800af92:	2b02      	cmp	r3, #2
 800af94:	d80d      	bhi.n	800afb2 <USBH_LL_GetSpeed+0x3e>
 800af96:	2b00      	cmp	r3, #0
 800af98:	d002      	beq.n	800afa0 <USBH_LL_GetSpeed+0x2c>
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d003      	beq.n	800afa6 <USBH_LL_GetSpeed+0x32>
 800af9e:	e008      	b.n	800afb2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800afa0:	2300      	movs	r3, #0
 800afa2:	73fb      	strb	r3, [r7, #15]
    break;
 800afa4:	e008      	b.n	800afb8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800afa6:	2301      	movs	r3, #1
 800afa8:	73fb      	strb	r3, [r7, #15]
    break;
 800afaa:	e005      	b.n	800afb8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800afac:	2302      	movs	r3, #2
 800afae:	73fb      	strb	r3, [r7, #15]
    break;
 800afb0:	e002      	b.n	800afb8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800afb2:	2301      	movs	r3, #1
 800afb4:	73fb      	strb	r3, [r7, #15]
    break;
 800afb6:	bf00      	nop
  }
  return  speed;
 800afb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3710      	adds	r7, #16
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800afc2:	b580      	push	{r7, lr}
 800afc4:	b084      	sub	sp, #16
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afca:	2300      	movs	r3, #0
 800afcc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800afce:	2300      	movs	r3, #0
 800afd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800afd8:	4618      	mov	r0, r3
 800afda:	f7f8 ffb3 	bl	8003f44 <HAL_HCD_ResetPort>
 800afde:	4603      	mov	r3, r0
 800afe0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800afe2:	7bfb      	ldrb	r3, [r7, #15]
 800afe4:	4618      	mov	r0, r3
 800afe6:	f000 f901 	bl	800b1ec <USBH_Get_USB_Status>
 800afea:	4603      	mov	r3, r0
 800afec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afee:	7bbb      	ldrb	r3, [r7, #14]
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3710      	adds	r7, #16
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	460b      	mov	r3, r1
 800b002:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b00a:	78fa      	ldrb	r2, [r7, #3]
 800b00c:	4611      	mov	r1, r2
 800b00e:	4618      	mov	r0, r3
 800b010:	f7f8 ffbb 	bl	8003f8a <HAL_HCD_HC_GetXferCount>
 800b014:	4603      	mov	r3, r0
}
 800b016:	4618      	mov	r0, r3
 800b018:	3708      	adds	r7, #8
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}

0800b01e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b01e:	b590      	push	{r4, r7, lr}
 800b020:	b089      	sub	sp, #36	@ 0x24
 800b022:	af04      	add	r7, sp, #16
 800b024:	6078      	str	r0, [r7, #4]
 800b026:	4608      	mov	r0, r1
 800b028:	4611      	mov	r1, r2
 800b02a:	461a      	mov	r2, r3
 800b02c:	4603      	mov	r3, r0
 800b02e:	70fb      	strb	r3, [r7, #3]
 800b030:	460b      	mov	r3, r1
 800b032:	70bb      	strb	r3, [r7, #2]
 800b034:	4613      	mov	r3, r2
 800b036:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b038:	2300      	movs	r3, #0
 800b03a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b03c:	2300      	movs	r3, #0
 800b03e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b046:	787c      	ldrb	r4, [r7, #1]
 800b048:	78ba      	ldrb	r2, [r7, #2]
 800b04a:	78f9      	ldrb	r1, [r7, #3]
 800b04c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b04e:	9302      	str	r3, [sp, #8]
 800b050:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b054:	9301      	str	r3, [sp, #4]
 800b056:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b05a:	9300      	str	r3, [sp, #0]
 800b05c:	4623      	mov	r3, r4
 800b05e:	f7f8 fba8 	bl	80037b2 <HAL_HCD_HC_Init>
 800b062:	4603      	mov	r3, r0
 800b064:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b066:	7bfb      	ldrb	r3, [r7, #15]
 800b068:	4618      	mov	r0, r3
 800b06a:	f000 f8bf 	bl	800b1ec <USBH_Get_USB_Status>
 800b06e:	4603      	mov	r3, r0
 800b070:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b072:	7bbb      	ldrb	r3, [r7, #14]
}
 800b074:	4618      	mov	r0, r3
 800b076:	3714      	adds	r7, #20
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd90      	pop	{r4, r7, pc}

0800b07c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	460b      	mov	r3, r1
 800b086:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b088:	2300      	movs	r3, #0
 800b08a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b096:	78fa      	ldrb	r2, [r7, #3]
 800b098:	4611      	mov	r1, r2
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7f8 fc41 	bl	8003922 <HAL_HCD_HC_Halt>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f000 f8a0 	bl	800b1ec <USBH_Get_USB_Status>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b0ba:	b590      	push	{r4, r7, lr}
 800b0bc:	b089      	sub	sp, #36	@ 0x24
 800b0be:	af04      	add	r7, sp, #16
 800b0c0:	6078      	str	r0, [r7, #4]
 800b0c2:	4608      	mov	r0, r1
 800b0c4:	4611      	mov	r1, r2
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	70fb      	strb	r3, [r7, #3]
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	70bb      	strb	r3, [r7, #2]
 800b0d0:	4613      	mov	r3, r2
 800b0d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b0e2:	787c      	ldrb	r4, [r7, #1]
 800b0e4:	78ba      	ldrb	r2, [r7, #2]
 800b0e6:	78f9      	ldrb	r1, [r7, #3]
 800b0e8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b0ec:	9303      	str	r3, [sp, #12]
 800b0ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b0f0:	9302      	str	r3, [sp, #8]
 800b0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f4:	9301      	str	r3, [sp, #4]
 800b0f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b0fa:	9300      	str	r3, [sp, #0]
 800b0fc:	4623      	mov	r3, r4
 800b0fe:	f7f8 fc33 	bl	8003968 <HAL_HCD_HC_SubmitRequest>
 800b102:	4603      	mov	r3, r0
 800b104:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b106:	7bfb      	ldrb	r3, [r7, #15]
 800b108:	4618      	mov	r0, r3
 800b10a:	f000 f86f 	bl	800b1ec <USBH_Get_USB_Status>
 800b10e:	4603      	mov	r3, r0
 800b110:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b112:	7bbb      	ldrb	r3, [r7, #14]
}
 800b114:	4618      	mov	r0, r3
 800b116:	3714      	adds	r7, #20
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd90      	pop	{r4, r7, pc}

0800b11c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	460b      	mov	r3, r1
 800b126:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b12e:	78fa      	ldrb	r2, [r7, #3]
 800b130:	4611      	mov	r1, r2
 800b132:	4618      	mov	r0, r3
 800b134:	f7f8 ff14 	bl	8003f60 <HAL_HCD_HC_GetURBState>
 800b138:	4603      	mov	r3, r0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3708      	adds	r7, #8
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}

0800b142 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b142:	b580      	push	{r7, lr}
 800b144:	b082      	sub	sp, #8
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
 800b14a:	460b      	mov	r3, r1
 800b14c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b154:	2b01      	cmp	r3, #1
 800b156:	d103      	bne.n	800b160 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b158:	78fb      	ldrb	r3, [r7, #3]
 800b15a:	4618      	mov	r0, r3
 800b15c:	f000 f872 	bl	800b244 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b160:	20c8      	movs	r0, #200	@ 0xc8
 800b162:	f7f6 fef7 	bl	8001f54 <HAL_Delay>
  return USBH_OK;
 800b166:	2300      	movs	r3, #0
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3708      	adds	r7, #8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b170:	b480      	push	{r7}
 800b172:	b085      	sub	sp, #20
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	460b      	mov	r3, r1
 800b17a:	70fb      	strb	r3, [r7, #3]
 800b17c:	4613      	mov	r3, r2
 800b17e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b186:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b188:	78fa      	ldrb	r2, [r7, #3]
 800b18a:	68f9      	ldr	r1, [r7, #12]
 800b18c:	4613      	mov	r3, r2
 800b18e:	011b      	lsls	r3, r3, #4
 800b190:	1a9b      	subs	r3, r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	440b      	add	r3, r1
 800b196:	3317      	adds	r3, #23
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d00a      	beq.n	800b1b4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b19e:	78fa      	ldrb	r2, [r7, #3]
 800b1a0:	68f9      	ldr	r1, [r7, #12]
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	011b      	lsls	r3, r3, #4
 800b1a6:	1a9b      	subs	r3, r3, r2
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	440b      	add	r3, r1
 800b1ac:	333c      	adds	r3, #60	@ 0x3c
 800b1ae:	78ba      	ldrb	r2, [r7, #2]
 800b1b0:	701a      	strb	r2, [r3, #0]
 800b1b2:	e009      	b.n	800b1c8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b1b4:	78fa      	ldrb	r2, [r7, #3]
 800b1b6:	68f9      	ldr	r1, [r7, #12]
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	011b      	lsls	r3, r3, #4
 800b1bc:	1a9b      	subs	r3, r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	440b      	add	r3, r1
 800b1c2:	333d      	adds	r3, #61	@ 0x3d
 800b1c4:	78ba      	ldrb	r2, [r7, #2]
 800b1c6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3714      	adds	r7, #20
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr

0800b1d6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b1d6:	b580      	push	{r7, lr}
 800b1d8:	b082      	sub	sp, #8
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f7f6 feb8 	bl	8001f54 <HAL_Delay>
}
 800b1e4:	bf00      	nop
 800b1e6:	3708      	adds	r7, #8
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b085      	sub	sp, #20
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b1fa:	79fb      	ldrb	r3, [r7, #7]
 800b1fc:	2b03      	cmp	r3, #3
 800b1fe:	d817      	bhi.n	800b230 <USBH_Get_USB_Status+0x44>
 800b200:	a201      	add	r2, pc, #4	@ (adr r2, 800b208 <USBH_Get_USB_Status+0x1c>)
 800b202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b206:	bf00      	nop
 800b208:	0800b219 	.word	0x0800b219
 800b20c:	0800b21f 	.word	0x0800b21f
 800b210:	0800b225 	.word	0x0800b225
 800b214:	0800b22b 	.word	0x0800b22b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b218:	2300      	movs	r3, #0
 800b21a:	73fb      	strb	r3, [r7, #15]
    break;
 800b21c:	e00b      	b.n	800b236 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b21e:	2302      	movs	r3, #2
 800b220:	73fb      	strb	r3, [r7, #15]
    break;
 800b222:	e008      	b.n	800b236 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b224:	2301      	movs	r3, #1
 800b226:	73fb      	strb	r3, [r7, #15]
    break;
 800b228:	e005      	b.n	800b236 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b22a:	2302      	movs	r3, #2
 800b22c:	73fb      	strb	r3, [r7, #15]
    break;
 800b22e:	e002      	b.n	800b236 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b230:	2302      	movs	r3, #2
 800b232:	73fb      	strb	r3, [r7, #15]
    break;
 800b234:	bf00      	nop
  }
  return usb_status;
 800b236:	7bfb      	ldrb	r3, [r7, #15]
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3714      	adds	r7, #20
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	4603      	mov	r3, r0
 800b24c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b24e:	79fb      	ldrb	r3, [r7, #7]
 800b250:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b252:	79fb      	ldrb	r3, [r7, #7]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d102      	bne.n	800b25e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b258:	2300      	movs	r3, #0
 800b25a:	73fb      	strb	r3, [r7, #15]
 800b25c:	e001      	b.n	800b262 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b25e:	2301      	movs	r3, #1
 800b260:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b262:	7bfb      	ldrb	r3, [r7, #15]
 800b264:	461a      	mov	r2, r3
 800b266:	2101      	movs	r1, #1
 800b268:	4803      	ldr	r0, [pc, #12]	@ (800b278 <MX_DriverVbusFS+0x34>)
 800b26a:	f7f8 f9ef 	bl	800364c <HAL_GPIO_WritePin>
}
 800b26e:	bf00      	nop
 800b270:	3710      	adds	r7, #16
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	40020800 	.word	0x40020800

0800b27c <malloc>:
 800b27c:	4b02      	ldr	r3, [pc, #8]	@ (800b288 <malloc+0xc>)
 800b27e:	4601      	mov	r1, r0
 800b280:	6818      	ldr	r0, [r3, #0]
 800b282:	f000 b82d 	b.w	800b2e0 <_malloc_r>
 800b286:	bf00      	nop
 800b288:	20000038 	.word	0x20000038

0800b28c <free>:
 800b28c:	4b02      	ldr	r3, [pc, #8]	@ (800b298 <free+0xc>)
 800b28e:	4601      	mov	r1, r0
 800b290:	6818      	ldr	r0, [r3, #0]
 800b292:	f001 bdf9 	b.w	800ce88 <_free_r>
 800b296:	bf00      	nop
 800b298:	20000038 	.word	0x20000038

0800b29c <sbrk_aligned>:
 800b29c:	b570      	push	{r4, r5, r6, lr}
 800b29e:	4e0f      	ldr	r6, [pc, #60]	@ (800b2dc <sbrk_aligned+0x40>)
 800b2a0:	460c      	mov	r4, r1
 800b2a2:	6831      	ldr	r1, [r6, #0]
 800b2a4:	4605      	mov	r5, r0
 800b2a6:	b911      	cbnz	r1, 800b2ae <sbrk_aligned+0x12>
 800b2a8:	f000 ff46 	bl	800c138 <_sbrk_r>
 800b2ac:	6030      	str	r0, [r6, #0]
 800b2ae:	4621      	mov	r1, r4
 800b2b0:	4628      	mov	r0, r5
 800b2b2:	f000 ff41 	bl	800c138 <_sbrk_r>
 800b2b6:	1c43      	adds	r3, r0, #1
 800b2b8:	d103      	bne.n	800b2c2 <sbrk_aligned+0x26>
 800b2ba:	f04f 34ff 	mov.w	r4, #4294967295
 800b2be:	4620      	mov	r0, r4
 800b2c0:	bd70      	pop	{r4, r5, r6, pc}
 800b2c2:	1cc4      	adds	r4, r0, #3
 800b2c4:	f024 0403 	bic.w	r4, r4, #3
 800b2c8:	42a0      	cmp	r0, r4
 800b2ca:	d0f8      	beq.n	800b2be <sbrk_aligned+0x22>
 800b2cc:	1a21      	subs	r1, r4, r0
 800b2ce:	4628      	mov	r0, r5
 800b2d0:	f000 ff32 	bl	800c138 <_sbrk_r>
 800b2d4:	3001      	adds	r0, #1
 800b2d6:	d1f2      	bne.n	800b2be <sbrk_aligned+0x22>
 800b2d8:	e7ef      	b.n	800b2ba <sbrk_aligned+0x1e>
 800b2da:	bf00      	nop
 800b2dc:	20000bc8 	.word	0x20000bc8

0800b2e0 <_malloc_r>:
 800b2e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2e4:	1ccd      	adds	r5, r1, #3
 800b2e6:	f025 0503 	bic.w	r5, r5, #3
 800b2ea:	3508      	adds	r5, #8
 800b2ec:	2d0c      	cmp	r5, #12
 800b2ee:	bf38      	it	cc
 800b2f0:	250c      	movcc	r5, #12
 800b2f2:	2d00      	cmp	r5, #0
 800b2f4:	4606      	mov	r6, r0
 800b2f6:	db01      	blt.n	800b2fc <_malloc_r+0x1c>
 800b2f8:	42a9      	cmp	r1, r5
 800b2fa:	d904      	bls.n	800b306 <_malloc_r+0x26>
 800b2fc:	230c      	movs	r3, #12
 800b2fe:	6033      	str	r3, [r6, #0]
 800b300:	2000      	movs	r0, #0
 800b302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b306:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b3dc <_malloc_r+0xfc>
 800b30a:	f000 f869 	bl	800b3e0 <__malloc_lock>
 800b30e:	f8d8 3000 	ldr.w	r3, [r8]
 800b312:	461c      	mov	r4, r3
 800b314:	bb44      	cbnz	r4, 800b368 <_malloc_r+0x88>
 800b316:	4629      	mov	r1, r5
 800b318:	4630      	mov	r0, r6
 800b31a:	f7ff ffbf 	bl	800b29c <sbrk_aligned>
 800b31e:	1c43      	adds	r3, r0, #1
 800b320:	4604      	mov	r4, r0
 800b322:	d158      	bne.n	800b3d6 <_malloc_r+0xf6>
 800b324:	f8d8 4000 	ldr.w	r4, [r8]
 800b328:	4627      	mov	r7, r4
 800b32a:	2f00      	cmp	r7, #0
 800b32c:	d143      	bne.n	800b3b6 <_malloc_r+0xd6>
 800b32e:	2c00      	cmp	r4, #0
 800b330:	d04b      	beq.n	800b3ca <_malloc_r+0xea>
 800b332:	6823      	ldr	r3, [r4, #0]
 800b334:	4639      	mov	r1, r7
 800b336:	4630      	mov	r0, r6
 800b338:	eb04 0903 	add.w	r9, r4, r3
 800b33c:	f000 fefc 	bl	800c138 <_sbrk_r>
 800b340:	4581      	cmp	r9, r0
 800b342:	d142      	bne.n	800b3ca <_malloc_r+0xea>
 800b344:	6821      	ldr	r1, [r4, #0]
 800b346:	1a6d      	subs	r5, r5, r1
 800b348:	4629      	mov	r1, r5
 800b34a:	4630      	mov	r0, r6
 800b34c:	f7ff ffa6 	bl	800b29c <sbrk_aligned>
 800b350:	3001      	adds	r0, #1
 800b352:	d03a      	beq.n	800b3ca <_malloc_r+0xea>
 800b354:	6823      	ldr	r3, [r4, #0]
 800b356:	442b      	add	r3, r5
 800b358:	6023      	str	r3, [r4, #0]
 800b35a:	f8d8 3000 	ldr.w	r3, [r8]
 800b35e:	685a      	ldr	r2, [r3, #4]
 800b360:	bb62      	cbnz	r2, 800b3bc <_malloc_r+0xdc>
 800b362:	f8c8 7000 	str.w	r7, [r8]
 800b366:	e00f      	b.n	800b388 <_malloc_r+0xa8>
 800b368:	6822      	ldr	r2, [r4, #0]
 800b36a:	1b52      	subs	r2, r2, r5
 800b36c:	d420      	bmi.n	800b3b0 <_malloc_r+0xd0>
 800b36e:	2a0b      	cmp	r2, #11
 800b370:	d917      	bls.n	800b3a2 <_malloc_r+0xc2>
 800b372:	1961      	adds	r1, r4, r5
 800b374:	42a3      	cmp	r3, r4
 800b376:	6025      	str	r5, [r4, #0]
 800b378:	bf18      	it	ne
 800b37a:	6059      	strne	r1, [r3, #4]
 800b37c:	6863      	ldr	r3, [r4, #4]
 800b37e:	bf08      	it	eq
 800b380:	f8c8 1000 	streq.w	r1, [r8]
 800b384:	5162      	str	r2, [r4, r5]
 800b386:	604b      	str	r3, [r1, #4]
 800b388:	4630      	mov	r0, r6
 800b38a:	f000 f82f 	bl	800b3ec <__malloc_unlock>
 800b38e:	f104 000b 	add.w	r0, r4, #11
 800b392:	1d23      	adds	r3, r4, #4
 800b394:	f020 0007 	bic.w	r0, r0, #7
 800b398:	1ac2      	subs	r2, r0, r3
 800b39a:	bf1c      	itt	ne
 800b39c:	1a1b      	subne	r3, r3, r0
 800b39e:	50a3      	strne	r3, [r4, r2]
 800b3a0:	e7af      	b.n	800b302 <_malloc_r+0x22>
 800b3a2:	6862      	ldr	r2, [r4, #4]
 800b3a4:	42a3      	cmp	r3, r4
 800b3a6:	bf0c      	ite	eq
 800b3a8:	f8c8 2000 	streq.w	r2, [r8]
 800b3ac:	605a      	strne	r2, [r3, #4]
 800b3ae:	e7eb      	b.n	800b388 <_malloc_r+0xa8>
 800b3b0:	4623      	mov	r3, r4
 800b3b2:	6864      	ldr	r4, [r4, #4]
 800b3b4:	e7ae      	b.n	800b314 <_malloc_r+0x34>
 800b3b6:	463c      	mov	r4, r7
 800b3b8:	687f      	ldr	r7, [r7, #4]
 800b3ba:	e7b6      	b.n	800b32a <_malloc_r+0x4a>
 800b3bc:	461a      	mov	r2, r3
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	42a3      	cmp	r3, r4
 800b3c2:	d1fb      	bne.n	800b3bc <_malloc_r+0xdc>
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	6053      	str	r3, [r2, #4]
 800b3c8:	e7de      	b.n	800b388 <_malloc_r+0xa8>
 800b3ca:	230c      	movs	r3, #12
 800b3cc:	6033      	str	r3, [r6, #0]
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	f000 f80c 	bl	800b3ec <__malloc_unlock>
 800b3d4:	e794      	b.n	800b300 <_malloc_r+0x20>
 800b3d6:	6005      	str	r5, [r0, #0]
 800b3d8:	e7d6      	b.n	800b388 <_malloc_r+0xa8>
 800b3da:	bf00      	nop
 800b3dc:	20000bcc 	.word	0x20000bcc

0800b3e0 <__malloc_lock>:
 800b3e0:	4801      	ldr	r0, [pc, #4]	@ (800b3e8 <__malloc_lock+0x8>)
 800b3e2:	f000 bef6 	b.w	800c1d2 <__retarget_lock_acquire_recursive>
 800b3e6:	bf00      	nop
 800b3e8:	20000d10 	.word	0x20000d10

0800b3ec <__malloc_unlock>:
 800b3ec:	4801      	ldr	r0, [pc, #4]	@ (800b3f4 <__malloc_unlock+0x8>)
 800b3ee:	f000 bef1 	b.w	800c1d4 <__retarget_lock_release_recursive>
 800b3f2:	bf00      	nop
 800b3f4:	20000d10 	.word	0x20000d10

0800b3f8 <__cvt>:
 800b3f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3fc:	ec57 6b10 	vmov	r6, r7, d0
 800b400:	2f00      	cmp	r7, #0
 800b402:	460c      	mov	r4, r1
 800b404:	4619      	mov	r1, r3
 800b406:	463b      	mov	r3, r7
 800b408:	bfbb      	ittet	lt
 800b40a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b40e:	461f      	movlt	r7, r3
 800b410:	2300      	movge	r3, #0
 800b412:	232d      	movlt	r3, #45	@ 0x2d
 800b414:	700b      	strb	r3, [r1, #0]
 800b416:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b418:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b41c:	4691      	mov	r9, r2
 800b41e:	f023 0820 	bic.w	r8, r3, #32
 800b422:	bfbc      	itt	lt
 800b424:	4632      	movlt	r2, r6
 800b426:	4616      	movlt	r6, r2
 800b428:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b42c:	d005      	beq.n	800b43a <__cvt+0x42>
 800b42e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b432:	d100      	bne.n	800b436 <__cvt+0x3e>
 800b434:	3401      	adds	r4, #1
 800b436:	2102      	movs	r1, #2
 800b438:	e000      	b.n	800b43c <__cvt+0x44>
 800b43a:	2103      	movs	r1, #3
 800b43c:	ab03      	add	r3, sp, #12
 800b43e:	9301      	str	r3, [sp, #4]
 800b440:	ab02      	add	r3, sp, #8
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	ec47 6b10 	vmov	d0, r6, r7
 800b448:	4653      	mov	r3, sl
 800b44a:	4622      	mov	r2, r4
 800b44c:	f000 ff4c 	bl	800c2e8 <_dtoa_r>
 800b450:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b454:	4605      	mov	r5, r0
 800b456:	d119      	bne.n	800b48c <__cvt+0x94>
 800b458:	f019 0f01 	tst.w	r9, #1
 800b45c:	d00e      	beq.n	800b47c <__cvt+0x84>
 800b45e:	eb00 0904 	add.w	r9, r0, r4
 800b462:	2200      	movs	r2, #0
 800b464:	2300      	movs	r3, #0
 800b466:	4630      	mov	r0, r6
 800b468:	4639      	mov	r1, r7
 800b46a:	f7f5 fb2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b46e:	b108      	cbz	r0, 800b474 <__cvt+0x7c>
 800b470:	f8cd 900c 	str.w	r9, [sp, #12]
 800b474:	2230      	movs	r2, #48	@ 0x30
 800b476:	9b03      	ldr	r3, [sp, #12]
 800b478:	454b      	cmp	r3, r9
 800b47a:	d31e      	bcc.n	800b4ba <__cvt+0xc2>
 800b47c:	9b03      	ldr	r3, [sp, #12]
 800b47e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b480:	1b5b      	subs	r3, r3, r5
 800b482:	4628      	mov	r0, r5
 800b484:	6013      	str	r3, [r2, #0]
 800b486:	b004      	add	sp, #16
 800b488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b48c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b490:	eb00 0904 	add.w	r9, r0, r4
 800b494:	d1e5      	bne.n	800b462 <__cvt+0x6a>
 800b496:	7803      	ldrb	r3, [r0, #0]
 800b498:	2b30      	cmp	r3, #48	@ 0x30
 800b49a:	d10a      	bne.n	800b4b2 <__cvt+0xba>
 800b49c:	2200      	movs	r2, #0
 800b49e:	2300      	movs	r3, #0
 800b4a0:	4630      	mov	r0, r6
 800b4a2:	4639      	mov	r1, r7
 800b4a4:	f7f5 fb10 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4a8:	b918      	cbnz	r0, 800b4b2 <__cvt+0xba>
 800b4aa:	f1c4 0401 	rsb	r4, r4, #1
 800b4ae:	f8ca 4000 	str.w	r4, [sl]
 800b4b2:	f8da 3000 	ldr.w	r3, [sl]
 800b4b6:	4499      	add	r9, r3
 800b4b8:	e7d3      	b.n	800b462 <__cvt+0x6a>
 800b4ba:	1c59      	adds	r1, r3, #1
 800b4bc:	9103      	str	r1, [sp, #12]
 800b4be:	701a      	strb	r2, [r3, #0]
 800b4c0:	e7d9      	b.n	800b476 <__cvt+0x7e>

0800b4c2 <__exponent>:
 800b4c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4c4:	2900      	cmp	r1, #0
 800b4c6:	bfba      	itte	lt
 800b4c8:	4249      	neglt	r1, r1
 800b4ca:	232d      	movlt	r3, #45	@ 0x2d
 800b4cc:	232b      	movge	r3, #43	@ 0x2b
 800b4ce:	2909      	cmp	r1, #9
 800b4d0:	7002      	strb	r2, [r0, #0]
 800b4d2:	7043      	strb	r3, [r0, #1]
 800b4d4:	dd29      	ble.n	800b52a <__exponent+0x68>
 800b4d6:	f10d 0307 	add.w	r3, sp, #7
 800b4da:	461d      	mov	r5, r3
 800b4dc:	270a      	movs	r7, #10
 800b4de:	461a      	mov	r2, r3
 800b4e0:	fbb1 f6f7 	udiv	r6, r1, r7
 800b4e4:	fb07 1416 	mls	r4, r7, r6, r1
 800b4e8:	3430      	adds	r4, #48	@ 0x30
 800b4ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b4ee:	460c      	mov	r4, r1
 800b4f0:	2c63      	cmp	r4, #99	@ 0x63
 800b4f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b4f6:	4631      	mov	r1, r6
 800b4f8:	dcf1      	bgt.n	800b4de <__exponent+0x1c>
 800b4fa:	3130      	adds	r1, #48	@ 0x30
 800b4fc:	1e94      	subs	r4, r2, #2
 800b4fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b502:	1c41      	adds	r1, r0, #1
 800b504:	4623      	mov	r3, r4
 800b506:	42ab      	cmp	r3, r5
 800b508:	d30a      	bcc.n	800b520 <__exponent+0x5e>
 800b50a:	f10d 0309 	add.w	r3, sp, #9
 800b50e:	1a9b      	subs	r3, r3, r2
 800b510:	42ac      	cmp	r4, r5
 800b512:	bf88      	it	hi
 800b514:	2300      	movhi	r3, #0
 800b516:	3302      	adds	r3, #2
 800b518:	4403      	add	r3, r0
 800b51a:	1a18      	subs	r0, r3, r0
 800b51c:	b003      	add	sp, #12
 800b51e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b520:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b524:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b528:	e7ed      	b.n	800b506 <__exponent+0x44>
 800b52a:	2330      	movs	r3, #48	@ 0x30
 800b52c:	3130      	adds	r1, #48	@ 0x30
 800b52e:	7083      	strb	r3, [r0, #2]
 800b530:	70c1      	strb	r1, [r0, #3]
 800b532:	1d03      	adds	r3, r0, #4
 800b534:	e7f1      	b.n	800b51a <__exponent+0x58>
	...

0800b538 <_printf_float>:
 800b538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b53c:	b08d      	sub	sp, #52	@ 0x34
 800b53e:	460c      	mov	r4, r1
 800b540:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b544:	4616      	mov	r6, r2
 800b546:	461f      	mov	r7, r3
 800b548:	4605      	mov	r5, r0
 800b54a:	f000 fdbd 	bl	800c0c8 <_localeconv_r>
 800b54e:	6803      	ldr	r3, [r0, #0]
 800b550:	9304      	str	r3, [sp, #16]
 800b552:	4618      	mov	r0, r3
 800b554:	f7f4 fe8c 	bl	8000270 <strlen>
 800b558:	2300      	movs	r3, #0
 800b55a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b55c:	f8d8 3000 	ldr.w	r3, [r8]
 800b560:	9005      	str	r0, [sp, #20]
 800b562:	3307      	adds	r3, #7
 800b564:	f023 0307 	bic.w	r3, r3, #7
 800b568:	f103 0208 	add.w	r2, r3, #8
 800b56c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b570:	f8d4 b000 	ldr.w	fp, [r4]
 800b574:	f8c8 2000 	str.w	r2, [r8]
 800b578:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b57c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b580:	9307      	str	r3, [sp, #28]
 800b582:	f8cd 8018 	str.w	r8, [sp, #24]
 800b586:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b58a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b58e:	4b9c      	ldr	r3, [pc, #624]	@ (800b800 <_printf_float+0x2c8>)
 800b590:	f04f 32ff 	mov.w	r2, #4294967295
 800b594:	f7f5 faca 	bl	8000b2c <__aeabi_dcmpun>
 800b598:	bb70      	cbnz	r0, 800b5f8 <_printf_float+0xc0>
 800b59a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b59e:	4b98      	ldr	r3, [pc, #608]	@ (800b800 <_printf_float+0x2c8>)
 800b5a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5a4:	f7f5 faa4 	bl	8000af0 <__aeabi_dcmple>
 800b5a8:	bb30      	cbnz	r0, 800b5f8 <_printf_float+0xc0>
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	4640      	mov	r0, r8
 800b5b0:	4649      	mov	r1, r9
 800b5b2:	f7f5 fa93 	bl	8000adc <__aeabi_dcmplt>
 800b5b6:	b110      	cbz	r0, 800b5be <_printf_float+0x86>
 800b5b8:	232d      	movs	r3, #45	@ 0x2d
 800b5ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5be:	4a91      	ldr	r2, [pc, #580]	@ (800b804 <_printf_float+0x2cc>)
 800b5c0:	4b91      	ldr	r3, [pc, #580]	@ (800b808 <_printf_float+0x2d0>)
 800b5c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b5c6:	bf8c      	ite	hi
 800b5c8:	4690      	movhi	r8, r2
 800b5ca:	4698      	movls	r8, r3
 800b5cc:	2303      	movs	r3, #3
 800b5ce:	6123      	str	r3, [r4, #16]
 800b5d0:	f02b 0304 	bic.w	r3, fp, #4
 800b5d4:	6023      	str	r3, [r4, #0]
 800b5d6:	f04f 0900 	mov.w	r9, #0
 800b5da:	9700      	str	r7, [sp, #0]
 800b5dc:	4633      	mov	r3, r6
 800b5de:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b5e0:	4621      	mov	r1, r4
 800b5e2:	4628      	mov	r0, r5
 800b5e4:	f000 f9d2 	bl	800b98c <_printf_common>
 800b5e8:	3001      	adds	r0, #1
 800b5ea:	f040 808d 	bne.w	800b708 <_printf_float+0x1d0>
 800b5ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b5f2:	b00d      	add	sp, #52	@ 0x34
 800b5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f8:	4642      	mov	r2, r8
 800b5fa:	464b      	mov	r3, r9
 800b5fc:	4640      	mov	r0, r8
 800b5fe:	4649      	mov	r1, r9
 800b600:	f7f5 fa94 	bl	8000b2c <__aeabi_dcmpun>
 800b604:	b140      	cbz	r0, 800b618 <_printf_float+0xe0>
 800b606:	464b      	mov	r3, r9
 800b608:	2b00      	cmp	r3, #0
 800b60a:	bfbc      	itt	lt
 800b60c:	232d      	movlt	r3, #45	@ 0x2d
 800b60e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b612:	4a7e      	ldr	r2, [pc, #504]	@ (800b80c <_printf_float+0x2d4>)
 800b614:	4b7e      	ldr	r3, [pc, #504]	@ (800b810 <_printf_float+0x2d8>)
 800b616:	e7d4      	b.n	800b5c2 <_printf_float+0x8a>
 800b618:	6863      	ldr	r3, [r4, #4]
 800b61a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b61e:	9206      	str	r2, [sp, #24]
 800b620:	1c5a      	adds	r2, r3, #1
 800b622:	d13b      	bne.n	800b69c <_printf_float+0x164>
 800b624:	2306      	movs	r3, #6
 800b626:	6063      	str	r3, [r4, #4]
 800b628:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b62c:	2300      	movs	r3, #0
 800b62e:	6022      	str	r2, [r4, #0]
 800b630:	9303      	str	r3, [sp, #12]
 800b632:	ab0a      	add	r3, sp, #40	@ 0x28
 800b634:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b638:	ab09      	add	r3, sp, #36	@ 0x24
 800b63a:	9300      	str	r3, [sp, #0]
 800b63c:	6861      	ldr	r1, [r4, #4]
 800b63e:	ec49 8b10 	vmov	d0, r8, r9
 800b642:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b646:	4628      	mov	r0, r5
 800b648:	f7ff fed6 	bl	800b3f8 <__cvt>
 800b64c:	9b06      	ldr	r3, [sp, #24]
 800b64e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b650:	2b47      	cmp	r3, #71	@ 0x47
 800b652:	4680      	mov	r8, r0
 800b654:	d129      	bne.n	800b6aa <_printf_float+0x172>
 800b656:	1cc8      	adds	r0, r1, #3
 800b658:	db02      	blt.n	800b660 <_printf_float+0x128>
 800b65a:	6863      	ldr	r3, [r4, #4]
 800b65c:	4299      	cmp	r1, r3
 800b65e:	dd41      	ble.n	800b6e4 <_printf_float+0x1ac>
 800b660:	f1aa 0a02 	sub.w	sl, sl, #2
 800b664:	fa5f fa8a 	uxtb.w	sl, sl
 800b668:	3901      	subs	r1, #1
 800b66a:	4652      	mov	r2, sl
 800b66c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b670:	9109      	str	r1, [sp, #36]	@ 0x24
 800b672:	f7ff ff26 	bl	800b4c2 <__exponent>
 800b676:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b678:	1813      	adds	r3, r2, r0
 800b67a:	2a01      	cmp	r2, #1
 800b67c:	4681      	mov	r9, r0
 800b67e:	6123      	str	r3, [r4, #16]
 800b680:	dc02      	bgt.n	800b688 <_printf_float+0x150>
 800b682:	6822      	ldr	r2, [r4, #0]
 800b684:	07d2      	lsls	r2, r2, #31
 800b686:	d501      	bpl.n	800b68c <_printf_float+0x154>
 800b688:	3301      	adds	r3, #1
 800b68a:	6123      	str	r3, [r4, #16]
 800b68c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b690:	2b00      	cmp	r3, #0
 800b692:	d0a2      	beq.n	800b5da <_printf_float+0xa2>
 800b694:	232d      	movs	r3, #45	@ 0x2d
 800b696:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b69a:	e79e      	b.n	800b5da <_printf_float+0xa2>
 800b69c:	9a06      	ldr	r2, [sp, #24]
 800b69e:	2a47      	cmp	r2, #71	@ 0x47
 800b6a0:	d1c2      	bne.n	800b628 <_printf_float+0xf0>
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d1c0      	bne.n	800b628 <_printf_float+0xf0>
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	e7bd      	b.n	800b626 <_printf_float+0xee>
 800b6aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b6ae:	d9db      	bls.n	800b668 <_printf_float+0x130>
 800b6b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b6b4:	d118      	bne.n	800b6e8 <_printf_float+0x1b0>
 800b6b6:	2900      	cmp	r1, #0
 800b6b8:	6863      	ldr	r3, [r4, #4]
 800b6ba:	dd0b      	ble.n	800b6d4 <_printf_float+0x19c>
 800b6bc:	6121      	str	r1, [r4, #16]
 800b6be:	b913      	cbnz	r3, 800b6c6 <_printf_float+0x18e>
 800b6c0:	6822      	ldr	r2, [r4, #0]
 800b6c2:	07d0      	lsls	r0, r2, #31
 800b6c4:	d502      	bpl.n	800b6cc <_printf_float+0x194>
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	440b      	add	r3, r1
 800b6ca:	6123      	str	r3, [r4, #16]
 800b6cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b6ce:	f04f 0900 	mov.w	r9, #0
 800b6d2:	e7db      	b.n	800b68c <_printf_float+0x154>
 800b6d4:	b913      	cbnz	r3, 800b6dc <_printf_float+0x1a4>
 800b6d6:	6822      	ldr	r2, [r4, #0]
 800b6d8:	07d2      	lsls	r2, r2, #31
 800b6da:	d501      	bpl.n	800b6e0 <_printf_float+0x1a8>
 800b6dc:	3302      	adds	r3, #2
 800b6de:	e7f4      	b.n	800b6ca <_printf_float+0x192>
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	e7f2      	b.n	800b6ca <_printf_float+0x192>
 800b6e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b6e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6ea:	4299      	cmp	r1, r3
 800b6ec:	db05      	blt.n	800b6fa <_printf_float+0x1c2>
 800b6ee:	6823      	ldr	r3, [r4, #0]
 800b6f0:	6121      	str	r1, [r4, #16]
 800b6f2:	07d8      	lsls	r0, r3, #31
 800b6f4:	d5ea      	bpl.n	800b6cc <_printf_float+0x194>
 800b6f6:	1c4b      	adds	r3, r1, #1
 800b6f8:	e7e7      	b.n	800b6ca <_printf_float+0x192>
 800b6fa:	2900      	cmp	r1, #0
 800b6fc:	bfd4      	ite	le
 800b6fe:	f1c1 0202 	rsble	r2, r1, #2
 800b702:	2201      	movgt	r2, #1
 800b704:	4413      	add	r3, r2
 800b706:	e7e0      	b.n	800b6ca <_printf_float+0x192>
 800b708:	6823      	ldr	r3, [r4, #0]
 800b70a:	055a      	lsls	r2, r3, #21
 800b70c:	d407      	bmi.n	800b71e <_printf_float+0x1e6>
 800b70e:	6923      	ldr	r3, [r4, #16]
 800b710:	4642      	mov	r2, r8
 800b712:	4631      	mov	r1, r6
 800b714:	4628      	mov	r0, r5
 800b716:	47b8      	blx	r7
 800b718:	3001      	adds	r0, #1
 800b71a:	d12b      	bne.n	800b774 <_printf_float+0x23c>
 800b71c:	e767      	b.n	800b5ee <_printf_float+0xb6>
 800b71e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b722:	f240 80dd 	bls.w	800b8e0 <_printf_float+0x3a8>
 800b726:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b72a:	2200      	movs	r2, #0
 800b72c:	2300      	movs	r3, #0
 800b72e:	f7f5 f9cb 	bl	8000ac8 <__aeabi_dcmpeq>
 800b732:	2800      	cmp	r0, #0
 800b734:	d033      	beq.n	800b79e <_printf_float+0x266>
 800b736:	4a37      	ldr	r2, [pc, #220]	@ (800b814 <_printf_float+0x2dc>)
 800b738:	2301      	movs	r3, #1
 800b73a:	4631      	mov	r1, r6
 800b73c:	4628      	mov	r0, r5
 800b73e:	47b8      	blx	r7
 800b740:	3001      	adds	r0, #1
 800b742:	f43f af54 	beq.w	800b5ee <_printf_float+0xb6>
 800b746:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b74a:	4543      	cmp	r3, r8
 800b74c:	db02      	blt.n	800b754 <_printf_float+0x21c>
 800b74e:	6823      	ldr	r3, [r4, #0]
 800b750:	07d8      	lsls	r0, r3, #31
 800b752:	d50f      	bpl.n	800b774 <_printf_float+0x23c>
 800b754:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b758:	4631      	mov	r1, r6
 800b75a:	4628      	mov	r0, r5
 800b75c:	47b8      	blx	r7
 800b75e:	3001      	adds	r0, #1
 800b760:	f43f af45 	beq.w	800b5ee <_printf_float+0xb6>
 800b764:	f04f 0900 	mov.w	r9, #0
 800b768:	f108 38ff 	add.w	r8, r8, #4294967295
 800b76c:	f104 0a1a 	add.w	sl, r4, #26
 800b770:	45c8      	cmp	r8, r9
 800b772:	dc09      	bgt.n	800b788 <_printf_float+0x250>
 800b774:	6823      	ldr	r3, [r4, #0]
 800b776:	079b      	lsls	r3, r3, #30
 800b778:	f100 8103 	bmi.w	800b982 <_printf_float+0x44a>
 800b77c:	68e0      	ldr	r0, [r4, #12]
 800b77e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b780:	4298      	cmp	r0, r3
 800b782:	bfb8      	it	lt
 800b784:	4618      	movlt	r0, r3
 800b786:	e734      	b.n	800b5f2 <_printf_float+0xba>
 800b788:	2301      	movs	r3, #1
 800b78a:	4652      	mov	r2, sl
 800b78c:	4631      	mov	r1, r6
 800b78e:	4628      	mov	r0, r5
 800b790:	47b8      	blx	r7
 800b792:	3001      	adds	r0, #1
 800b794:	f43f af2b 	beq.w	800b5ee <_printf_float+0xb6>
 800b798:	f109 0901 	add.w	r9, r9, #1
 800b79c:	e7e8      	b.n	800b770 <_printf_float+0x238>
 800b79e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	dc39      	bgt.n	800b818 <_printf_float+0x2e0>
 800b7a4:	4a1b      	ldr	r2, [pc, #108]	@ (800b814 <_printf_float+0x2dc>)
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	4631      	mov	r1, r6
 800b7aa:	4628      	mov	r0, r5
 800b7ac:	47b8      	blx	r7
 800b7ae:	3001      	adds	r0, #1
 800b7b0:	f43f af1d 	beq.w	800b5ee <_printf_float+0xb6>
 800b7b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b7b8:	ea59 0303 	orrs.w	r3, r9, r3
 800b7bc:	d102      	bne.n	800b7c4 <_printf_float+0x28c>
 800b7be:	6823      	ldr	r3, [r4, #0]
 800b7c0:	07d9      	lsls	r1, r3, #31
 800b7c2:	d5d7      	bpl.n	800b774 <_printf_float+0x23c>
 800b7c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7c8:	4631      	mov	r1, r6
 800b7ca:	4628      	mov	r0, r5
 800b7cc:	47b8      	blx	r7
 800b7ce:	3001      	adds	r0, #1
 800b7d0:	f43f af0d 	beq.w	800b5ee <_printf_float+0xb6>
 800b7d4:	f04f 0a00 	mov.w	sl, #0
 800b7d8:	f104 0b1a 	add.w	fp, r4, #26
 800b7dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7de:	425b      	negs	r3, r3
 800b7e0:	4553      	cmp	r3, sl
 800b7e2:	dc01      	bgt.n	800b7e8 <_printf_float+0x2b0>
 800b7e4:	464b      	mov	r3, r9
 800b7e6:	e793      	b.n	800b710 <_printf_float+0x1d8>
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	465a      	mov	r2, fp
 800b7ec:	4631      	mov	r1, r6
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	47b8      	blx	r7
 800b7f2:	3001      	adds	r0, #1
 800b7f4:	f43f aefb 	beq.w	800b5ee <_printf_float+0xb6>
 800b7f8:	f10a 0a01 	add.w	sl, sl, #1
 800b7fc:	e7ee      	b.n	800b7dc <_printf_float+0x2a4>
 800b7fe:	bf00      	nop
 800b800:	7fefffff 	.word	0x7fefffff
 800b804:	0800dd90 	.word	0x0800dd90
 800b808:	0800dd8c 	.word	0x0800dd8c
 800b80c:	0800dd98 	.word	0x0800dd98
 800b810:	0800dd94 	.word	0x0800dd94
 800b814:	0800dd9c 	.word	0x0800dd9c
 800b818:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b81a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b81e:	4553      	cmp	r3, sl
 800b820:	bfa8      	it	ge
 800b822:	4653      	movge	r3, sl
 800b824:	2b00      	cmp	r3, #0
 800b826:	4699      	mov	r9, r3
 800b828:	dc36      	bgt.n	800b898 <_printf_float+0x360>
 800b82a:	f04f 0b00 	mov.w	fp, #0
 800b82e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b832:	f104 021a 	add.w	r2, r4, #26
 800b836:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b838:	9306      	str	r3, [sp, #24]
 800b83a:	eba3 0309 	sub.w	r3, r3, r9
 800b83e:	455b      	cmp	r3, fp
 800b840:	dc31      	bgt.n	800b8a6 <_printf_float+0x36e>
 800b842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b844:	459a      	cmp	sl, r3
 800b846:	dc3a      	bgt.n	800b8be <_printf_float+0x386>
 800b848:	6823      	ldr	r3, [r4, #0]
 800b84a:	07da      	lsls	r2, r3, #31
 800b84c:	d437      	bmi.n	800b8be <_printf_float+0x386>
 800b84e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b850:	ebaa 0903 	sub.w	r9, sl, r3
 800b854:	9b06      	ldr	r3, [sp, #24]
 800b856:	ebaa 0303 	sub.w	r3, sl, r3
 800b85a:	4599      	cmp	r9, r3
 800b85c:	bfa8      	it	ge
 800b85e:	4699      	movge	r9, r3
 800b860:	f1b9 0f00 	cmp.w	r9, #0
 800b864:	dc33      	bgt.n	800b8ce <_printf_float+0x396>
 800b866:	f04f 0800 	mov.w	r8, #0
 800b86a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b86e:	f104 0b1a 	add.w	fp, r4, #26
 800b872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b874:	ebaa 0303 	sub.w	r3, sl, r3
 800b878:	eba3 0309 	sub.w	r3, r3, r9
 800b87c:	4543      	cmp	r3, r8
 800b87e:	f77f af79 	ble.w	800b774 <_printf_float+0x23c>
 800b882:	2301      	movs	r3, #1
 800b884:	465a      	mov	r2, fp
 800b886:	4631      	mov	r1, r6
 800b888:	4628      	mov	r0, r5
 800b88a:	47b8      	blx	r7
 800b88c:	3001      	adds	r0, #1
 800b88e:	f43f aeae 	beq.w	800b5ee <_printf_float+0xb6>
 800b892:	f108 0801 	add.w	r8, r8, #1
 800b896:	e7ec      	b.n	800b872 <_printf_float+0x33a>
 800b898:	4642      	mov	r2, r8
 800b89a:	4631      	mov	r1, r6
 800b89c:	4628      	mov	r0, r5
 800b89e:	47b8      	blx	r7
 800b8a0:	3001      	adds	r0, #1
 800b8a2:	d1c2      	bne.n	800b82a <_printf_float+0x2f2>
 800b8a4:	e6a3      	b.n	800b5ee <_printf_float+0xb6>
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	4631      	mov	r1, r6
 800b8aa:	4628      	mov	r0, r5
 800b8ac:	9206      	str	r2, [sp, #24]
 800b8ae:	47b8      	blx	r7
 800b8b0:	3001      	adds	r0, #1
 800b8b2:	f43f ae9c 	beq.w	800b5ee <_printf_float+0xb6>
 800b8b6:	9a06      	ldr	r2, [sp, #24]
 800b8b8:	f10b 0b01 	add.w	fp, fp, #1
 800b8bc:	e7bb      	b.n	800b836 <_printf_float+0x2fe>
 800b8be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8c2:	4631      	mov	r1, r6
 800b8c4:	4628      	mov	r0, r5
 800b8c6:	47b8      	blx	r7
 800b8c8:	3001      	adds	r0, #1
 800b8ca:	d1c0      	bne.n	800b84e <_printf_float+0x316>
 800b8cc:	e68f      	b.n	800b5ee <_printf_float+0xb6>
 800b8ce:	9a06      	ldr	r2, [sp, #24]
 800b8d0:	464b      	mov	r3, r9
 800b8d2:	4442      	add	r2, r8
 800b8d4:	4631      	mov	r1, r6
 800b8d6:	4628      	mov	r0, r5
 800b8d8:	47b8      	blx	r7
 800b8da:	3001      	adds	r0, #1
 800b8dc:	d1c3      	bne.n	800b866 <_printf_float+0x32e>
 800b8de:	e686      	b.n	800b5ee <_printf_float+0xb6>
 800b8e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b8e4:	f1ba 0f01 	cmp.w	sl, #1
 800b8e8:	dc01      	bgt.n	800b8ee <_printf_float+0x3b6>
 800b8ea:	07db      	lsls	r3, r3, #31
 800b8ec:	d536      	bpl.n	800b95c <_printf_float+0x424>
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	4642      	mov	r2, r8
 800b8f2:	4631      	mov	r1, r6
 800b8f4:	4628      	mov	r0, r5
 800b8f6:	47b8      	blx	r7
 800b8f8:	3001      	adds	r0, #1
 800b8fa:	f43f ae78 	beq.w	800b5ee <_printf_float+0xb6>
 800b8fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b902:	4631      	mov	r1, r6
 800b904:	4628      	mov	r0, r5
 800b906:	47b8      	blx	r7
 800b908:	3001      	adds	r0, #1
 800b90a:	f43f ae70 	beq.w	800b5ee <_printf_float+0xb6>
 800b90e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b912:	2200      	movs	r2, #0
 800b914:	2300      	movs	r3, #0
 800b916:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b91a:	f7f5 f8d5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b91e:	b9c0      	cbnz	r0, 800b952 <_printf_float+0x41a>
 800b920:	4653      	mov	r3, sl
 800b922:	f108 0201 	add.w	r2, r8, #1
 800b926:	4631      	mov	r1, r6
 800b928:	4628      	mov	r0, r5
 800b92a:	47b8      	blx	r7
 800b92c:	3001      	adds	r0, #1
 800b92e:	d10c      	bne.n	800b94a <_printf_float+0x412>
 800b930:	e65d      	b.n	800b5ee <_printf_float+0xb6>
 800b932:	2301      	movs	r3, #1
 800b934:	465a      	mov	r2, fp
 800b936:	4631      	mov	r1, r6
 800b938:	4628      	mov	r0, r5
 800b93a:	47b8      	blx	r7
 800b93c:	3001      	adds	r0, #1
 800b93e:	f43f ae56 	beq.w	800b5ee <_printf_float+0xb6>
 800b942:	f108 0801 	add.w	r8, r8, #1
 800b946:	45d0      	cmp	r8, sl
 800b948:	dbf3      	blt.n	800b932 <_printf_float+0x3fa>
 800b94a:	464b      	mov	r3, r9
 800b94c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b950:	e6df      	b.n	800b712 <_printf_float+0x1da>
 800b952:	f04f 0800 	mov.w	r8, #0
 800b956:	f104 0b1a 	add.w	fp, r4, #26
 800b95a:	e7f4      	b.n	800b946 <_printf_float+0x40e>
 800b95c:	2301      	movs	r3, #1
 800b95e:	4642      	mov	r2, r8
 800b960:	e7e1      	b.n	800b926 <_printf_float+0x3ee>
 800b962:	2301      	movs	r3, #1
 800b964:	464a      	mov	r2, r9
 800b966:	4631      	mov	r1, r6
 800b968:	4628      	mov	r0, r5
 800b96a:	47b8      	blx	r7
 800b96c:	3001      	adds	r0, #1
 800b96e:	f43f ae3e 	beq.w	800b5ee <_printf_float+0xb6>
 800b972:	f108 0801 	add.w	r8, r8, #1
 800b976:	68e3      	ldr	r3, [r4, #12]
 800b978:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b97a:	1a5b      	subs	r3, r3, r1
 800b97c:	4543      	cmp	r3, r8
 800b97e:	dcf0      	bgt.n	800b962 <_printf_float+0x42a>
 800b980:	e6fc      	b.n	800b77c <_printf_float+0x244>
 800b982:	f04f 0800 	mov.w	r8, #0
 800b986:	f104 0919 	add.w	r9, r4, #25
 800b98a:	e7f4      	b.n	800b976 <_printf_float+0x43e>

0800b98c <_printf_common>:
 800b98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b990:	4616      	mov	r6, r2
 800b992:	4698      	mov	r8, r3
 800b994:	688a      	ldr	r2, [r1, #8]
 800b996:	690b      	ldr	r3, [r1, #16]
 800b998:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b99c:	4293      	cmp	r3, r2
 800b99e:	bfb8      	it	lt
 800b9a0:	4613      	movlt	r3, r2
 800b9a2:	6033      	str	r3, [r6, #0]
 800b9a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b9a8:	4607      	mov	r7, r0
 800b9aa:	460c      	mov	r4, r1
 800b9ac:	b10a      	cbz	r2, 800b9b2 <_printf_common+0x26>
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	6033      	str	r3, [r6, #0]
 800b9b2:	6823      	ldr	r3, [r4, #0]
 800b9b4:	0699      	lsls	r1, r3, #26
 800b9b6:	bf42      	ittt	mi
 800b9b8:	6833      	ldrmi	r3, [r6, #0]
 800b9ba:	3302      	addmi	r3, #2
 800b9bc:	6033      	strmi	r3, [r6, #0]
 800b9be:	6825      	ldr	r5, [r4, #0]
 800b9c0:	f015 0506 	ands.w	r5, r5, #6
 800b9c4:	d106      	bne.n	800b9d4 <_printf_common+0x48>
 800b9c6:	f104 0a19 	add.w	sl, r4, #25
 800b9ca:	68e3      	ldr	r3, [r4, #12]
 800b9cc:	6832      	ldr	r2, [r6, #0]
 800b9ce:	1a9b      	subs	r3, r3, r2
 800b9d0:	42ab      	cmp	r3, r5
 800b9d2:	dc26      	bgt.n	800ba22 <_printf_common+0x96>
 800b9d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b9d8:	6822      	ldr	r2, [r4, #0]
 800b9da:	3b00      	subs	r3, #0
 800b9dc:	bf18      	it	ne
 800b9de:	2301      	movne	r3, #1
 800b9e0:	0692      	lsls	r2, r2, #26
 800b9e2:	d42b      	bmi.n	800ba3c <_printf_common+0xb0>
 800b9e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b9e8:	4641      	mov	r1, r8
 800b9ea:	4638      	mov	r0, r7
 800b9ec:	47c8      	blx	r9
 800b9ee:	3001      	adds	r0, #1
 800b9f0:	d01e      	beq.n	800ba30 <_printf_common+0xa4>
 800b9f2:	6823      	ldr	r3, [r4, #0]
 800b9f4:	6922      	ldr	r2, [r4, #16]
 800b9f6:	f003 0306 	and.w	r3, r3, #6
 800b9fa:	2b04      	cmp	r3, #4
 800b9fc:	bf02      	ittt	eq
 800b9fe:	68e5      	ldreq	r5, [r4, #12]
 800ba00:	6833      	ldreq	r3, [r6, #0]
 800ba02:	1aed      	subeq	r5, r5, r3
 800ba04:	68a3      	ldr	r3, [r4, #8]
 800ba06:	bf0c      	ite	eq
 800ba08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba0c:	2500      	movne	r5, #0
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	bfc4      	itt	gt
 800ba12:	1a9b      	subgt	r3, r3, r2
 800ba14:	18ed      	addgt	r5, r5, r3
 800ba16:	2600      	movs	r6, #0
 800ba18:	341a      	adds	r4, #26
 800ba1a:	42b5      	cmp	r5, r6
 800ba1c:	d11a      	bne.n	800ba54 <_printf_common+0xc8>
 800ba1e:	2000      	movs	r0, #0
 800ba20:	e008      	b.n	800ba34 <_printf_common+0xa8>
 800ba22:	2301      	movs	r3, #1
 800ba24:	4652      	mov	r2, sl
 800ba26:	4641      	mov	r1, r8
 800ba28:	4638      	mov	r0, r7
 800ba2a:	47c8      	blx	r9
 800ba2c:	3001      	adds	r0, #1
 800ba2e:	d103      	bne.n	800ba38 <_printf_common+0xac>
 800ba30:	f04f 30ff 	mov.w	r0, #4294967295
 800ba34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba38:	3501      	adds	r5, #1
 800ba3a:	e7c6      	b.n	800b9ca <_printf_common+0x3e>
 800ba3c:	18e1      	adds	r1, r4, r3
 800ba3e:	1c5a      	adds	r2, r3, #1
 800ba40:	2030      	movs	r0, #48	@ 0x30
 800ba42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ba46:	4422      	add	r2, r4
 800ba48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ba4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ba50:	3302      	adds	r3, #2
 800ba52:	e7c7      	b.n	800b9e4 <_printf_common+0x58>
 800ba54:	2301      	movs	r3, #1
 800ba56:	4622      	mov	r2, r4
 800ba58:	4641      	mov	r1, r8
 800ba5a:	4638      	mov	r0, r7
 800ba5c:	47c8      	blx	r9
 800ba5e:	3001      	adds	r0, #1
 800ba60:	d0e6      	beq.n	800ba30 <_printf_common+0xa4>
 800ba62:	3601      	adds	r6, #1
 800ba64:	e7d9      	b.n	800ba1a <_printf_common+0x8e>
	...

0800ba68 <_printf_i>:
 800ba68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba6c:	7e0f      	ldrb	r7, [r1, #24]
 800ba6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ba70:	2f78      	cmp	r7, #120	@ 0x78
 800ba72:	4691      	mov	r9, r2
 800ba74:	4680      	mov	r8, r0
 800ba76:	460c      	mov	r4, r1
 800ba78:	469a      	mov	sl, r3
 800ba7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ba7e:	d807      	bhi.n	800ba90 <_printf_i+0x28>
 800ba80:	2f62      	cmp	r7, #98	@ 0x62
 800ba82:	d80a      	bhi.n	800ba9a <_printf_i+0x32>
 800ba84:	2f00      	cmp	r7, #0
 800ba86:	f000 80d1 	beq.w	800bc2c <_printf_i+0x1c4>
 800ba8a:	2f58      	cmp	r7, #88	@ 0x58
 800ba8c:	f000 80b8 	beq.w	800bc00 <_printf_i+0x198>
 800ba90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ba98:	e03a      	b.n	800bb10 <_printf_i+0xa8>
 800ba9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ba9e:	2b15      	cmp	r3, #21
 800baa0:	d8f6      	bhi.n	800ba90 <_printf_i+0x28>
 800baa2:	a101      	add	r1, pc, #4	@ (adr r1, 800baa8 <_printf_i+0x40>)
 800baa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800baa8:	0800bb01 	.word	0x0800bb01
 800baac:	0800bb15 	.word	0x0800bb15
 800bab0:	0800ba91 	.word	0x0800ba91
 800bab4:	0800ba91 	.word	0x0800ba91
 800bab8:	0800ba91 	.word	0x0800ba91
 800babc:	0800ba91 	.word	0x0800ba91
 800bac0:	0800bb15 	.word	0x0800bb15
 800bac4:	0800ba91 	.word	0x0800ba91
 800bac8:	0800ba91 	.word	0x0800ba91
 800bacc:	0800ba91 	.word	0x0800ba91
 800bad0:	0800ba91 	.word	0x0800ba91
 800bad4:	0800bc13 	.word	0x0800bc13
 800bad8:	0800bb3f 	.word	0x0800bb3f
 800badc:	0800bbcd 	.word	0x0800bbcd
 800bae0:	0800ba91 	.word	0x0800ba91
 800bae4:	0800ba91 	.word	0x0800ba91
 800bae8:	0800bc35 	.word	0x0800bc35
 800baec:	0800ba91 	.word	0x0800ba91
 800baf0:	0800bb3f 	.word	0x0800bb3f
 800baf4:	0800ba91 	.word	0x0800ba91
 800baf8:	0800ba91 	.word	0x0800ba91
 800bafc:	0800bbd5 	.word	0x0800bbd5
 800bb00:	6833      	ldr	r3, [r6, #0]
 800bb02:	1d1a      	adds	r2, r3, #4
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	6032      	str	r2, [r6, #0]
 800bb08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bb10:	2301      	movs	r3, #1
 800bb12:	e09c      	b.n	800bc4e <_printf_i+0x1e6>
 800bb14:	6833      	ldr	r3, [r6, #0]
 800bb16:	6820      	ldr	r0, [r4, #0]
 800bb18:	1d19      	adds	r1, r3, #4
 800bb1a:	6031      	str	r1, [r6, #0]
 800bb1c:	0606      	lsls	r6, r0, #24
 800bb1e:	d501      	bpl.n	800bb24 <_printf_i+0xbc>
 800bb20:	681d      	ldr	r5, [r3, #0]
 800bb22:	e003      	b.n	800bb2c <_printf_i+0xc4>
 800bb24:	0645      	lsls	r5, r0, #25
 800bb26:	d5fb      	bpl.n	800bb20 <_printf_i+0xb8>
 800bb28:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bb2c:	2d00      	cmp	r5, #0
 800bb2e:	da03      	bge.n	800bb38 <_printf_i+0xd0>
 800bb30:	232d      	movs	r3, #45	@ 0x2d
 800bb32:	426d      	negs	r5, r5
 800bb34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb38:	4858      	ldr	r0, [pc, #352]	@ (800bc9c <_printf_i+0x234>)
 800bb3a:	230a      	movs	r3, #10
 800bb3c:	e011      	b.n	800bb62 <_printf_i+0xfa>
 800bb3e:	6821      	ldr	r1, [r4, #0]
 800bb40:	6833      	ldr	r3, [r6, #0]
 800bb42:	0608      	lsls	r0, r1, #24
 800bb44:	f853 5b04 	ldr.w	r5, [r3], #4
 800bb48:	d402      	bmi.n	800bb50 <_printf_i+0xe8>
 800bb4a:	0649      	lsls	r1, r1, #25
 800bb4c:	bf48      	it	mi
 800bb4e:	b2ad      	uxthmi	r5, r5
 800bb50:	2f6f      	cmp	r7, #111	@ 0x6f
 800bb52:	4852      	ldr	r0, [pc, #328]	@ (800bc9c <_printf_i+0x234>)
 800bb54:	6033      	str	r3, [r6, #0]
 800bb56:	bf14      	ite	ne
 800bb58:	230a      	movne	r3, #10
 800bb5a:	2308      	moveq	r3, #8
 800bb5c:	2100      	movs	r1, #0
 800bb5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bb62:	6866      	ldr	r6, [r4, #4]
 800bb64:	60a6      	str	r6, [r4, #8]
 800bb66:	2e00      	cmp	r6, #0
 800bb68:	db05      	blt.n	800bb76 <_printf_i+0x10e>
 800bb6a:	6821      	ldr	r1, [r4, #0]
 800bb6c:	432e      	orrs	r6, r5
 800bb6e:	f021 0104 	bic.w	r1, r1, #4
 800bb72:	6021      	str	r1, [r4, #0]
 800bb74:	d04b      	beq.n	800bc0e <_printf_i+0x1a6>
 800bb76:	4616      	mov	r6, r2
 800bb78:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb7c:	fb03 5711 	mls	r7, r3, r1, r5
 800bb80:	5dc7      	ldrb	r7, [r0, r7]
 800bb82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb86:	462f      	mov	r7, r5
 800bb88:	42bb      	cmp	r3, r7
 800bb8a:	460d      	mov	r5, r1
 800bb8c:	d9f4      	bls.n	800bb78 <_printf_i+0x110>
 800bb8e:	2b08      	cmp	r3, #8
 800bb90:	d10b      	bne.n	800bbaa <_printf_i+0x142>
 800bb92:	6823      	ldr	r3, [r4, #0]
 800bb94:	07df      	lsls	r7, r3, #31
 800bb96:	d508      	bpl.n	800bbaa <_printf_i+0x142>
 800bb98:	6923      	ldr	r3, [r4, #16]
 800bb9a:	6861      	ldr	r1, [r4, #4]
 800bb9c:	4299      	cmp	r1, r3
 800bb9e:	bfde      	ittt	le
 800bba0:	2330      	movle	r3, #48	@ 0x30
 800bba2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bba6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bbaa:	1b92      	subs	r2, r2, r6
 800bbac:	6122      	str	r2, [r4, #16]
 800bbae:	f8cd a000 	str.w	sl, [sp]
 800bbb2:	464b      	mov	r3, r9
 800bbb4:	aa03      	add	r2, sp, #12
 800bbb6:	4621      	mov	r1, r4
 800bbb8:	4640      	mov	r0, r8
 800bbba:	f7ff fee7 	bl	800b98c <_printf_common>
 800bbbe:	3001      	adds	r0, #1
 800bbc0:	d14a      	bne.n	800bc58 <_printf_i+0x1f0>
 800bbc2:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc6:	b004      	add	sp, #16
 800bbc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbcc:	6823      	ldr	r3, [r4, #0]
 800bbce:	f043 0320 	orr.w	r3, r3, #32
 800bbd2:	6023      	str	r3, [r4, #0]
 800bbd4:	4832      	ldr	r0, [pc, #200]	@ (800bca0 <_printf_i+0x238>)
 800bbd6:	2778      	movs	r7, #120	@ 0x78
 800bbd8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bbdc:	6823      	ldr	r3, [r4, #0]
 800bbde:	6831      	ldr	r1, [r6, #0]
 800bbe0:	061f      	lsls	r7, r3, #24
 800bbe2:	f851 5b04 	ldr.w	r5, [r1], #4
 800bbe6:	d402      	bmi.n	800bbee <_printf_i+0x186>
 800bbe8:	065f      	lsls	r7, r3, #25
 800bbea:	bf48      	it	mi
 800bbec:	b2ad      	uxthmi	r5, r5
 800bbee:	6031      	str	r1, [r6, #0]
 800bbf0:	07d9      	lsls	r1, r3, #31
 800bbf2:	bf44      	itt	mi
 800bbf4:	f043 0320 	orrmi.w	r3, r3, #32
 800bbf8:	6023      	strmi	r3, [r4, #0]
 800bbfa:	b11d      	cbz	r5, 800bc04 <_printf_i+0x19c>
 800bbfc:	2310      	movs	r3, #16
 800bbfe:	e7ad      	b.n	800bb5c <_printf_i+0xf4>
 800bc00:	4826      	ldr	r0, [pc, #152]	@ (800bc9c <_printf_i+0x234>)
 800bc02:	e7e9      	b.n	800bbd8 <_printf_i+0x170>
 800bc04:	6823      	ldr	r3, [r4, #0]
 800bc06:	f023 0320 	bic.w	r3, r3, #32
 800bc0a:	6023      	str	r3, [r4, #0]
 800bc0c:	e7f6      	b.n	800bbfc <_printf_i+0x194>
 800bc0e:	4616      	mov	r6, r2
 800bc10:	e7bd      	b.n	800bb8e <_printf_i+0x126>
 800bc12:	6833      	ldr	r3, [r6, #0]
 800bc14:	6825      	ldr	r5, [r4, #0]
 800bc16:	6961      	ldr	r1, [r4, #20]
 800bc18:	1d18      	adds	r0, r3, #4
 800bc1a:	6030      	str	r0, [r6, #0]
 800bc1c:	062e      	lsls	r6, r5, #24
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	d501      	bpl.n	800bc26 <_printf_i+0x1be>
 800bc22:	6019      	str	r1, [r3, #0]
 800bc24:	e002      	b.n	800bc2c <_printf_i+0x1c4>
 800bc26:	0668      	lsls	r0, r5, #25
 800bc28:	d5fb      	bpl.n	800bc22 <_printf_i+0x1ba>
 800bc2a:	8019      	strh	r1, [r3, #0]
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	6123      	str	r3, [r4, #16]
 800bc30:	4616      	mov	r6, r2
 800bc32:	e7bc      	b.n	800bbae <_printf_i+0x146>
 800bc34:	6833      	ldr	r3, [r6, #0]
 800bc36:	1d1a      	adds	r2, r3, #4
 800bc38:	6032      	str	r2, [r6, #0]
 800bc3a:	681e      	ldr	r6, [r3, #0]
 800bc3c:	6862      	ldr	r2, [r4, #4]
 800bc3e:	2100      	movs	r1, #0
 800bc40:	4630      	mov	r0, r6
 800bc42:	f7f4 fac5 	bl	80001d0 <memchr>
 800bc46:	b108      	cbz	r0, 800bc4c <_printf_i+0x1e4>
 800bc48:	1b80      	subs	r0, r0, r6
 800bc4a:	6060      	str	r0, [r4, #4]
 800bc4c:	6863      	ldr	r3, [r4, #4]
 800bc4e:	6123      	str	r3, [r4, #16]
 800bc50:	2300      	movs	r3, #0
 800bc52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc56:	e7aa      	b.n	800bbae <_printf_i+0x146>
 800bc58:	6923      	ldr	r3, [r4, #16]
 800bc5a:	4632      	mov	r2, r6
 800bc5c:	4649      	mov	r1, r9
 800bc5e:	4640      	mov	r0, r8
 800bc60:	47d0      	blx	sl
 800bc62:	3001      	adds	r0, #1
 800bc64:	d0ad      	beq.n	800bbc2 <_printf_i+0x15a>
 800bc66:	6823      	ldr	r3, [r4, #0]
 800bc68:	079b      	lsls	r3, r3, #30
 800bc6a:	d413      	bmi.n	800bc94 <_printf_i+0x22c>
 800bc6c:	68e0      	ldr	r0, [r4, #12]
 800bc6e:	9b03      	ldr	r3, [sp, #12]
 800bc70:	4298      	cmp	r0, r3
 800bc72:	bfb8      	it	lt
 800bc74:	4618      	movlt	r0, r3
 800bc76:	e7a6      	b.n	800bbc6 <_printf_i+0x15e>
 800bc78:	2301      	movs	r3, #1
 800bc7a:	4632      	mov	r2, r6
 800bc7c:	4649      	mov	r1, r9
 800bc7e:	4640      	mov	r0, r8
 800bc80:	47d0      	blx	sl
 800bc82:	3001      	adds	r0, #1
 800bc84:	d09d      	beq.n	800bbc2 <_printf_i+0x15a>
 800bc86:	3501      	adds	r5, #1
 800bc88:	68e3      	ldr	r3, [r4, #12]
 800bc8a:	9903      	ldr	r1, [sp, #12]
 800bc8c:	1a5b      	subs	r3, r3, r1
 800bc8e:	42ab      	cmp	r3, r5
 800bc90:	dcf2      	bgt.n	800bc78 <_printf_i+0x210>
 800bc92:	e7eb      	b.n	800bc6c <_printf_i+0x204>
 800bc94:	2500      	movs	r5, #0
 800bc96:	f104 0619 	add.w	r6, r4, #25
 800bc9a:	e7f5      	b.n	800bc88 <_printf_i+0x220>
 800bc9c:	0800dd9e 	.word	0x0800dd9e
 800bca0:	0800ddaf 	.word	0x0800ddaf

0800bca4 <std>:
 800bca4:	2300      	movs	r3, #0
 800bca6:	b510      	push	{r4, lr}
 800bca8:	4604      	mov	r4, r0
 800bcaa:	e9c0 3300 	strd	r3, r3, [r0]
 800bcae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bcb2:	6083      	str	r3, [r0, #8]
 800bcb4:	8181      	strh	r1, [r0, #12]
 800bcb6:	6643      	str	r3, [r0, #100]	@ 0x64
 800bcb8:	81c2      	strh	r2, [r0, #14]
 800bcba:	6183      	str	r3, [r0, #24]
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	2208      	movs	r2, #8
 800bcc0:	305c      	adds	r0, #92	@ 0x5c
 800bcc2:	f000 f9f9 	bl	800c0b8 <memset>
 800bcc6:	4b0d      	ldr	r3, [pc, #52]	@ (800bcfc <std+0x58>)
 800bcc8:	6263      	str	r3, [r4, #36]	@ 0x24
 800bcca:	4b0d      	ldr	r3, [pc, #52]	@ (800bd00 <std+0x5c>)
 800bccc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bcce:	4b0d      	ldr	r3, [pc, #52]	@ (800bd04 <std+0x60>)
 800bcd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bcd2:	4b0d      	ldr	r3, [pc, #52]	@ (800bd08 <std+0x64>)
 800bcd4:	6323      	str	r3, [r4, #48]	@ 0x30
 800bcd6:	4b0d      	ldr	r3, [pc, #52]	@ (800bd0c <std+0x68>)
 800bcd8:	6224      	str	r4, [r4, #32]
 800bcda:	429c      	cmp	r4, r3
 800bcdc:	d006      	beq.n	800bcec <std+0x48>
 800bcde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bce2:	4294      	cmp	r4, r2
 800bce4:	d002      	beq.n	800bcec <std+0x48>
 800bce6:	33d0      	adds	r3, #208	@ 0xd0
 800bce8:	429c      	cmp	r4, r3
 800bcea:	d105      	bne.n	800bcf8 <std+0x54>
 800bcec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bcf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcf4:	f000 ba6c 	b.w	800c1d0 <__retarget_lock_init_recursive>
 800bcf8:	bd10      	pop	{r4, pc}
 800bcfa:	bf00      	nop
 800bcfc:	0800bf09 	.word	0x0800bf09
 800bd00:	0800bf2b 	.word	0x0800bf2b
 800bd04:	0800bf63 	.word	0x0800bf63
 800bd08:	0800bf87 	.word	0x0800bf87
 800bd0c:	20000bd0 	.word	0x20000bd0

0800bd10 <stdio_exit_handler>:
 800bd10:	4a02      	ldr	r2, [pc, #8]	@ (800bd1c <stdio_exit_handler+0xc>)
 800bd12:	4903      	ldr	r1, [pc, #12]	@ (800bd20 <stdio_exit_handler+0x10>)
 800bd14:	4803      	ldr	r0, [pc, #12]	@ (800bd24 <stdio_exit_handler+0x14>)
 800bd16:	f000 b869 	b.w	800bdec <_fwalk_sglue>
 800bd1a:	bf00      	nop
 800bd1c:	2000002c 	.word	0x2000002c
 800bd20:	0800d99d 	.word	0x0800d99d
 800bd24:	2000003c 	.word	0x2000003c

0800bd28 <cleanup_stdio>:
 800bd28:	6841      	ldr	r1, [r0, #4]
 800bd2a:	4b0c      	ldr	r3, [pc, #48]	@ (800bd5c <cleanup_stdio+0x34>)
 800bd2c:	4299      	cmp	r1, r3
 800bd2e:	b510      	push	{r4, lr}
 800bd30:	4604      	mov	r4, r0
 800bd32:	d001      	beq.n	800bd38 <cleanup_stdio+0x10>
 800bd34:	f001 fe32 	bl	800d99c <_fflush_r>
 800bd38:	68a1      	ldr	r1, [r4, #8]
 800bd3a:	4b09      	ldr	r3, [pc, #36]	@ (800bd60 <cleanup_stdio+0x38>)
 800bd3c:	4299      	cmp	r1, r3
 800bd3e:	d002      	beq.n	800bd46 <cleanup_stdio+0x1e>
 800bd40:	4620      	mov	r0, r4
 800bd42:	f001 fe2b 	bl	800d99c <_fflush_r>
 800bd46:	68e1      	ldr	r1, [r4, #12]
 800bd48:	4b06      	ldr	r3, [pc, #24]	@ (800bd64 <cleanup_stdio+0x3c>)
 800bd4a:	4299      	cmp	r1, r3
 800bd4c:	d004      	beq.n	800bd58 <cleanup_stdio+0x30>
 800bd4e:	4620      	mov	r0, r4
 800bd50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd54:	f001 be22 	b.w	800d99c <_fflush_r>
 800bd58:	bd10      	pop	{r4, pc}
 800bd5a:	bf00      	nop
 800bd5c:	20000bd0 	.word	0x20000bd0
 800bd60:	20000c38 	.word	0x20000c38
 800bd64:	20000ca0 	.word	0x20000ca0

0800bd68 <global_stdio_init.part.0>:
 800bd68:	b510      	push	{r4, lr}
 800bd6a:	4b0b      	ldr	r3, [pc, #44]	@ (800bd98 <global_stdio_init.part.0+0x30>)
 800bd6c:	4c0b      	ldr	r4, [pc, #44]	@ (800bd9c <global_stdio_init.part.0+0x34>)
 800bd6e:	4a0c      	ldr	r2, [pc, #48]	@ (800bda0 <global_stdio_init.part.0+0x38>)
 800bd70:	601a      	str	r2, [r3, #0]
 800bd72:	4620      	mov	r0, r4
 800bd74:	2200      	movs	r2, #0
 800bd76:	2104      	movs	r1, #4
 800bd78:	f7ff ff94 	bl	800bca4 <std>
 800bd7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bd80:	2201      	movs	r2, #1
 800bd82:	2109      	movs	r1, #9
 800bd84:	f7ff ff8e 	bl	800bca4 <std>
 800bd88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bd8c:	2202      	movs	r2, #2
 800bd8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd92:	2112      	movs	r1, #18
 800bd94:	f7ff bf86 	b.w	800bca4 <std>
 800bd98:	20000d08 	.word	0x20000d08
 800bd9c:	20000bd0 	.word	0x20000bd0
 800bda0:	0800bd11 	.word	0x0800bd11

0800bda4 <__sfp_lock_acquire>:
 800bda4:	4801      	ldr	r0, [pc, #4]	@ (800bdac <__sfp_lock_acquire+0x8>)
 800bda6:	f000 ba14 	b.w	800c1d2 <__retarget_lock_acquire_recursive>
 800bdaa:	bf00      	nop
 800bdac:	20000d11 	.word	0x20000d11

0800bdb0 <__sfp_lock_release>:
 800bdb0:	4801      	ldr	r0, [pc, #4]	@ (800bdb8 <__sfp_lock_release+0x8>)
 800bdb2:	f000 ba0f 	b.w	800c1d4 <__retarget_lock_release_recursive>
 800bdb6:	bf00      	nop
 800bdb8:	20000d11 	.word	0x20000d11

0800bdbc <__sinit>:
 800bdbc:	b510      	push	{r4, lr}
 800bdbe:	4604      	mov	r4, r0
 800bdc0:	f7ff fff0 	bl	800bda4 <__sfp_lock_acquire>
 800bdc4:	6a23      	ldr	r3, [r4, #32]
 800bdc6:	b11b      	cbz	r3, 800bdd0 <__sinit+0x14>
 800bdc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdcc:	f7ff bff0 	b.w	800bdb0 <__sfp_lock_release>
 800bdd0:	4b04      	ldr	r3, [pc, #16]	@ (800bde4 <__sinit+0x28>)
 800bdd2:	6223      	str	r3, [r4, #32]
 800bdd4:	4b04      	ldr	r3, [pc, #16]	@ (800bde8 <__sinit+0x2c>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d1f5      	bne.n	800bdc8 <__sinit+0xc>
 800bddc:	f7ff ffc4 	bl	800bd68 <global_stdio_init.part.0>
 800bde0:	e7f2      	b.n	800bdc8 <__sinit+0xc>
 800bde2:	bf00      	nop
 800bde4:	0800bd29 	.word	0x0800bd29
 800bde8:	20000d08 	.word	0x20000d08

0800bdec <_fwalk_sglue>:
 800bdec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdf0:	4607      	mov	r7, r0
 800bdf2:	4688      	mov	r8, r1
 800bdf4:	4614      	mov	r4, r2
 800bdf6:	2600      	movs	r6, #0
 800bdf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bdfc:	f1b9 0901 	subs.w	r9, r9, #1
 800be00:	d505      	bpl.n	800be0e <_fwalk_sglue+0x22>
 800be02:	6824      	ldr	r4, [r4, #0]
 800be04:	2c00      	cmp	r4, #0
 800be06:	d1f7      	bne.n	800bdf8 <_fwalk_sglue+0xc>
 800be08:	4630      	mov	r0, r6
 800be0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be0e:	89ab      	ldrh	r3, [r5, #12]
 800be10:	2b01      	cmp	r3, #1
 800be12:	d907      	bls.n	800be24 <_fwalk_sglue+0x38>
 800be14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be18:	3301      	adds	r3, #1
 800be1a:	d003      	beq.n	800be24 <_fwalk_sglue+0x38>
 800be1c:	4629      	mov	r1, r5
 800be1e:	4638      	mov	r0, r7
 800be20:	47c0      	blx	r8
 800be22:	4306      	orrs	r6, r0
 800be24:	3568      	adds	r5, #104	@ 0x68
 800be26:	e7e9      	b.n	800bdfc <_fwalk_sglue+0x10>

0800be28 <iprintf>:
 800be28:	b40f      	push	{r0, r1, r2, r3}
 800be2a:	b507      	push	{r0, r1, r2, lr}
 800be2c:	4906      	ldr	r1, [pc, #24]	@ (800be48 <iprintf+0x20>)
 800be2e:	ab04      	add	r3, sp, #16
 800be30:	6808      	ldr	r0, [r1, #0]
 800be32:	f853 2b04 	ldr.w	r2, [r3], #4
 800be36:	6881      	ldr	r1, [r0, #8]
 800be38:	9301      	str	r3, [sp, #4]
 800be3a:	f001 fc13 	bl	800d664 <_vfiprintf_r>
 800be3e:	b003      	add	sp, #12
 800be40:	f85d eb04 	ldr.w	lr, [sp], #4
 800be44:	b004      	add	sp, #16
 800be46:	4770      	bx	lr
 800be48:	20000038 	.word	0x20000038

0800be4c <_puts_r>:
 800be4c:	6a03      	ldr	r3, [r0, #32]
 800be4e:	b570      	push	{r4, r5, r6, lr}
 800be50:	6884      	ldr	r4, [r0, #8]
 800be52:	4605      	mov	r5, r0
 800be54:	460e      	mov	r6, r1
 800be56:	b90b      	cbnz	r3, 800be5c <_puts_r+0x10>
 800be58:	f7ff ffb0 	bl	800bdbc <__sinit>
 800be5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be5e:	07db      	lsls	r3, r3, #31
 800be60:	d405      	bmi.n	800be6e <_puts_r+0x22>
 800be62:	89a3      	ldrh	r3, [r4, #12]
 800be64:	0598      	lsls	r0, r3, #22
 800be66:	d402      	bmi.n	800be6e <_puts_r+0x22>
 800be68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be6a:	f000 f9b2 	bl	800c1d2 <__retarget_lock_acquire_recursive>
 800be6e:	89a3      	ldrh	r3, [r4, #12]
 800be70:	0719      	lsls	r1, r3, #28
 800be72:	d502      	bpl.n	800be7a <_puts_r+0x2e>
 800be74:	6923      	ldr	r3, [r4, #16]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d135      	bne.n	800bee6 <_puts_r+0x9a>
 800be7a:	4621      	mov	r1, r4
 800be7c:	4628      	mov	r0, r5
 800be7e:	f000 f8c5 	bl	800c00c <__swsetup_r>
 800be82:	b380      	cbz	r0, 800bee6 <_puts_r+0x9a>
 800be84:	f04f 35ff 	mov.w	r5, #4294967295
 800be88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be8a:	07da      	lsls	r2, r3, #31
 800be8c:	d405      	bmi.n	800be9a <_puts_r+0x4e>
 800be8e:	89a3      	ldrh	r3, [r4, #12]
 800be90:	059b      	lsls	r3, r3, #22
 800be92:	d402      	bmi.n	800be9a <_puts_r+0x4e>
 800be94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be96:	f000 f99d 	bl	800c1d4 <__retarget_lock_release_recursive>
 800be9a:	4628      	mov	r0, r5
 800be9c:	bd70      	pop	{r4, r5, r6, pc}
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	da04      	bge.n	800beac <_puts_r+0x60>
 800bea2:	69a2      	ldr	r2, [r4, #24]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	dc17      	bgt.n	800bed8 <_puts_r+0x8c>
 800bea8:	290a      	cmp	r1, #10
 800beaa:	d015      	beq.n	800bed8 <_puts_r+0x8c>
 800beac:	6823      	ldr	r3, [r4, #0]
 800beae:	1c5a      	adds	r2, r3, #1
 800beb0:	6022      	str	r2, [r4, #0]
 800beb2:	7019      	strb	r1, [r3, #0]
 800beb4:	68a3      	ldr	r3, [r4, #8]
 800beb6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800beba:	3b01      	subs	r3, #1
 800bebc:	60a3      	str	r3, [r4, #8]
 800bebe:	2900      	cmp	r1, #0
 800bec0:	d1ed      	bne.n	800be9e <_puts_r+0x52>
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	da11      	bge.n	800beea <_puts_r+0x9e>
 800bec6:	4622      	mov	r2, r4
 800bec8:	210a      	movs	r1, #10
 800beca:	4628      	mov	r0, r5
 800becc:	f000 f85f 	bl	800bf8e <__swbuf_r>
 800bed0:	3001      	adds	r0, #1
 800bed2:	d0d7      	beq.n	800be84 <_puts_r+0x38>
 800bed4:	250a      	movs	r5, #10
 800bed6:	e7d7      	b.n	800be88 <_puts_r+0x3c>
 800bed8:	4622      	mov	r2, r4
 800beda:	4628      	mov	r0, r5
 800bedc:	f000 f857 	bl	800bf8e <__swbuf_r>
 800bee0:	3001      	adds	r0, #1
 800bee2:	d1e7      	bne.n	800beb4 <_puts_r+0x68>
 800bee4:	e7ce      	b.n	800be84 <_puts_r+0x38>
 800bee6:	3e01      	subs	r6, #1
 800bee8:	e7e4      	b.n	800beb4 <_puts_r+0x68>
 800beea:	6823      	ldr	r3, [r4, #0]
 800beec:	1c5a      	adds	r2, r3, #1
 800beee:	6022      	str	r2, [r4, #0]
 800bef0:	220a      	movs	r2, #10
 800bef2:	701a      	strb	r2, [r3, #0]
 800bef4:	e7ee      	b.n	800bed4 <_puts_r+0x88>
	...

0800bef8 <puts>:
 800bef8:	4b02      	ldr	r3, [pc, #8]	@ (800bf04 <puts+0xc>)
 800befa:	4601      	mov	r1, r0
 800befc:	6818      	ldr	r0, [r3, #0]
 800befe:	f7ff bfa5 	b.w	800be4c <_puts_r>
 800bf02:	bf00      	nop
 800bf04:	20000038 	.word	0x20000038

0800bf08 <__sread>:
 800bf08:	b510      	push	{r4, lr}
 800bf0a:	460c      	mov	r4, r1
 800bf0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf10:	f000 f900 	bl	800c114 <_read_r>
 800bf14:	2800      	cmp	r0, #0
 800bf16:	bfab      	itete	ge
 800bf18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bf1a:	89a3      	ldrhlt	r3, [r4, #12]
 800bf1c:	181b      	addge	r3, r3, r0
 800bf1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bf22:	bfac      	ite	ge
 800bf24:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bf26:	81a3      	strhlt	r3, [r4, #12]
 800bf28:	bd10      	pop	{r4, pc}

0800bf2a <__swrite>:
 800bf2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf2e:	461f      	mov	r7, r3
 800bf30:	898b      	ldrh	r3, [r1, #12]
 800bf32:	05db      	lsls	r3, r3, #23
 800bf34:	4605      	mov	r5, r0
 800bf36:	460c      	mov	r4, r1
 800bf38:	4616      	mov	r6, r2
 800bf3a:	d505      	bpl.n	800bf48 <__swrite+0x1e>
 800bf3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf40:	2302      	movs	r3, #2
 800bf42:	2200      	movs	r2, #0
 800bf44:	f000 f8d4 	bl	800c0f0 <_lseek_r>
 800bf48:	89a3      	ldrh	r3, [r4, #12]
 800bf4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bf52:	81a3      	strh	r3, [r4, #12]
 800bf54:	4632      	mov	r2, r6
 800bf56:	463b      	mov	r3, r7
 800bf58:	4628      	mov	r0, r5
 800bf5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf5e:	f000 b8fb 	b.w	800c158 <_write_r>

0800bf62 <__sseek>:
 800bf62:	b510      	push	{r4, lr}
 800bf64:	460c      	mov	r4, r1
 800bf66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf6a:	f000 f8c1 	bl	800c0f0 <_lseek_r>
 800bf6e:	1c43      	adds	r3, r0, #1
 800bf70:	89a3      	ldrh	r3, [r4, #12]
 800bf72:	bf15      	itete	ne
 800bf74:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bf76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bf7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bf7e:	81a3      	strheq	r3, [r4, #12]
 800bf80:	bf18      	it	ne
 800bf82:	81a3      	strhne	r3, [r4, #12]
 800bf84:	bd10      	pop	{r4, pc}

0800bf86 <__sclose>:
 800bf86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf8a:	f000 b8a1 	b.w	800c0d0 <_close_r>

0800bf8e <__swbuf_r>:
 800bf8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf90:	460e      	mov	r6, r1
 800bf92:	4614      	mov	r4, r2
 800bf94:	4605      	mov	r5, r0
 800bf96:	b118      	cbz	r0, 800bfa0 <__swbuf_r+0x12>
 800bf98:	6a03      	ldr	r3, [r0, #32]
 800bf9a:	b90b      	cbnz	r3, 800bfa0 <__swbuf_r+0x12>
 800bf9c:	f7ff ff0e 	bl	800bdbc <__sinit>
 800bfa0:	69a3      	ldr	r3, [r4, #24]
 800bfa2:	60a3      	str	r3, [r4, #8]
 800bfa4:	89a3      	ldrh	r3, [r4, #12]
 800bfa6:	071a      	lsls	r2, r3, #28
 800bfa8:	d501      	bpl.n	800bfae <__swbuf_r+0x20>
 800bfaa:	6923      	ldr	r3, [r4, #16]
 800bfac:	b943      	cbnz	r3, 800bfc0 <__swbuf_r+0x32>
 800bfae:	4621      	mov	r1, r4
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	f000 f82b 	bl	800c00c <__swsetup_r>
 800bfb6:	b118      	cbz	r0, 800bfc0 <__swbuf_r+0x32>
 800bfb8:	f04f 37ff 	mov.w	r7, #4294967295
 800bfbc:	4638      	mov	r0, r7
 800bfbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfc0:	6823      	ldr	r3, [r4, #0]
 800bfc2:	6922      	ldr	r2, [r4, #16]
 800bfc4:	1a98      	subs	r0, r3, r2
 800bfc6:	6963      	ldr	r3, [r4, #20]
 800bfc8:	b2f6      	uxtb	r6, r6
 800bfca:	4283      	cmp	r3, r0
 800bfcc:	4637      	mov	r7, r6
 800bfce:	dc05      	bgt.n	800bfdc <__swbuf_r+0x4e>
 800bfd0:	4621      	mov	r1, r4
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	f001 fce2 	bl	800d99c <_fflush_r>
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d1ed      	bne.n	800bfb8 <__swbuf_r+0x2a>
 800bfdc:	68a3      	ldr	r3, [r4, #8]
 800bfde:	3b01      	subs	r3, #1
 800bfe0:	60a3      	str	r3, [r4, #8]
 800bfe2:	6823      	ldr	r3, [r4, #0]
 800bfe4:	1c5a      	adds	r2, r3, #1
 800bfe6:	6022      	str	r2, [r4, #0]
 800bfe8:	701e      	strb	r6, [r3, #0]
 800bfea:	6962      	ldr	r2, [r4, #20]
 800bfec:	1c43      	adds	r3, r0, #1
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d004      	beq.n	800bffc <__swbuf_r+0x6e>
 800bff2:	89a3      	ldrh	r3, [r4, #12]
 800bff4:	07db      	lsls	r3, r3, #31
 800bff6:	d5e1      	bpl.n	800bfbc <__swbuf_r+0x2e>
 800bff8:	2e0a      	cmp	r6, #10
 800bffa:	d1df      	bne.n	800bfbc <__swbuf_r+0x2e>
 800bffc:	4621      	mov	r1, r4
 800bffe:	4628      	mov	r0, r5
 800c000:	f001 fccc 	bl	800d99c <_fflush_r>
 800c004:	2800      	cmp	r0, #0
 800c006:	d0d9      	beq.n	800bfbc <__swbuf_r+0x2e>
 800c008:	e7d6      	b.n	800bfb8 <__swbuf_r+0x2a>
	...

0800c00c <__swsetup_r>:
 800c00c:	b538      	push	{r3, r4, r5, lr}
 800c00e:	4b29      	ldr	r3, [pc, #164]	@ (800c0b4 <__swsetup_r+0xa8>)
 800c010:	4605      	mov	r5, r0
 800c012:	6818      	ldr	r0, [r3, #0]
 800c014:	460c      	mov	r4, r1
 800c016:	b118      	cbz	r0, 800c020 <__swsetup_r+0x14>
 800c018:	6a03      	ldr	r3, [r0, #32]
 800c01a:	b90b      	cbnz	r3, 800c020 <__swsetup_r+0x14>
 800c01c:	f7ff fece 	bl	800bdbc <__sinit>
 800c020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c024:	0719      	lsls	r1, r3, #28
 800c026:	d422      	bmi.n	800c06e <__swsetup_r+0x62>
 800c028:	06da      	lsls	r2, r3, #27
 800c02a:	d407      	bmi.n	800c03c <__swsetup_r+0x30>
 800c02c:	2209      	movs	r2, #9
 800c02e:	602a      	str	r2, [r5, #0]
 800c030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c034:	81a3      	strh	r3, [r4, #12]
 800c036:	f04f 30ff 	mov.w	r0, #4294967295
 800c03a:	e033      	b.n	800c0a4 <__swsetup_r+0x98>
 800c03c:	0758      	lsls	r0, r3, #29
 800c03e:	d512      	bpl.n	800c066 <__swsetup_r+0x5a>
 800c040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c042:	b141      	cbz	r1, 800c056 <__swsetup_r+0x4a>
 800c044:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c048:	4299      	cmp	r1, r3
 800c04a:	d002      	beq.n	800c052 <__swsetup_r+0x46>
 800c04c:	4628      	mov	r0, r5
 800c04e:	f000 ff1b 	bl	800ce88 <_free_r>
 800c052:	2300      	movs	r3, #0
 800c054:	6363      	str	r3, [r4, #52]	@ 0x34
 800c056:	89a3      	ldrh	r3, [r4, #12]
 800c058:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c05c:	81a3      	strh	r3, [r4, #12]
 800c05e:	2300      	movs	r3, #0
 800c060:	6063      	str	r3, [r4, #4]
 800c062:	6923      	ldr	r3, [r4, #16]
 800c064:	6023      	str	r3, [r4, #0]
 800c066:	89a3      	ldrh	r3, [r4, #12]
 800c068:	f043 0308 	orr.w	r3, r3, #8
 800c06c:	81a3      	strh	r3, [r4, #12]
 800c06e:	6923      	ldr	r3, [r4, #16]
 800c070:	b94b      	cbnz	r3, 800c086 <__swsetup_r+0x7a>
 800c072:	89a3      	ldrh	r3, [r4, #12]
 800c074:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c07c:	d003      	beq.n	800c086 <__swsetup_r+0x7a>
 800c07e:	4621      	mov	r1, r4
 800c080:	4628      	mov	r0, r5
 800c082:	f001 fcd9 	bl	800da38 <__smakebuf_r>
 800c086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c08a:	f013 0201 	ands.w	r2, r3, #1
 800c08e:	d00a      	beq.n	800c0a6 <__swsetup_r+0x9a>
 800c090:	2200      	movs	r2, #0
 800c092:	60a2      	str	r2, [r4, #8]
 800c094:	6962      	ldr	r2, [r4, #20]
 800c096:	4252      	negs	r2, r2
 800c098:	61a2      	str	r2, [r4, #24]
 800c09a:	6922      	ldr	r2, [r4, #16]
 800c09c:	b942      	cbnz	r2, 800c0b0 <__swsetup_r+0xa4>
 800c09e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c0a2:	d1c5      	bne.n	800c030 <__swsetup_r+0x24>
 800c0a4:	bd38      	pop	{r3, r4, r5, pc}
 800c0a6:	0799      	lsls	r1, r3, #30
 800c0a8:	bf58      	it	pl
 800c0aa:	6962      	ldrpl	r2, [r4, #20]
 800c0ac:	60a2      	str	r2, [r4, #8]
 800c0ae:	e7f4      	b.n	800c09a <__swsetup_r+0x8e>
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	e7f7      	b.n	800c0a4 <__swsetup_r+0x98>
 800c0b4:	20000038 	.word	0x20000038

0800c0b8 <memset>:
 800c0b8:	4402      	add	r2, r0
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d100      	bne.n	800c0c2 <memset+0xa>
 800c0c0:	4770      	bx	lr
 800c0c2:	f803 1b01 	strb.w	r1, [r3], #1
 800c0c6:	e7f9      	b.n	800c0bc <memset+0x4>

0800c0c8 <_localeconv_r>:
 800c0c8:	4800      	ldr	r0, [pc, #0]	@ (800c0cc <_localeconv_r+0x4>)
 800c0ca:	4770      	bx	lr
 800c0cc:	20000178 	.word	0x20000178

0800c0d0 <_close_r>:
 800c0d0:	b538      	push	{r3, r4, r5, lr}
 800c0d2:	4d06      	ldr	r5, [pc, #24]	@ (800c0ec <_close_r+0x1c>)
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	4608      	mov	r0, r1
 800c0da:	602b      	str	r3, [r5, #0]
 800c0dc:	f7f5 fe22 	bl	8001d24 <_close>
 800c0e0:	1c43      	adds	r3, r0, #1
 800c0e2:	d102      	bne.n	800c0ea <_close_r+0x1a>
 800c0e4:	682b      	ldr	r3, [r5, #0]
 800c0e6:	b103      	cbz	r3, 800c0ea <_close_r+0x1a>
 800c0e8:	6023      	str	r3, [r4, #0]
 800c0ea:	bd38      	pop	{r3, r4, r5, pc}
 800c0ec:	20000d0c 	.word	0x20000d0c

0800c0f0 <_lseek_r>:
 800c0f0:	b538      	push	{r3, r4, r5, lr}
 800c0f2:	4d07      	ldr	r5, [pc, #28]	@ (800c110 <_lseek_r+0x20>)
 800c0f4:	4604      	mov	r4, r0
 800c0f6:	4608      	mov	r0, r1
 800c0f8:	4611      	mov	r1, r2
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	602a      	str	r2, [r5, #0]
 800c0fe:	461a      	mov	r2, r3
 800c100:	f7f5 fe37 	bl	8001d72 <_lseek>
 800c104:	1c43      	adds	r3, r0, #1
 800c106:	d102      	bne.n	800c10e <_lseek_r+0x1e>
 800c108:	682b      	ldr	r3, [r5, #0]
 800c10a:	b103      	cbz	r3, 800c10e <_lseek_r+0x1e>
 800c10c:	6023      	str	r3, [r4, #0]
 800c10e:	bd38      	pop	{r3, r4, r5, pc}
 800c110:	20000d0c 	.word	0x20000d0c

0800c114 <_read_r>:
 800c114:	b538      	push	{r3, r4, r5, lr}
 800c116:	4d07      	ldr	r5, [pc, #28]	@ (800c134 <_read_r+0x20>)
 800c118:	4604      	mov	r4, r0
 800c11a:	4608      	mov	r0, r1
 800c11c:	4611      	mov	r1, r2
 800c11e:	2200      	movs	r2, #0
 800c120:	602a      	str	r2, [r5, #0]
 800c122:	461a      	mov	r2, r3
 800c124:	f7f5 fdc5 	bl	8001cb2 <_read>
 800c128:	1c43      	adds	r3, r0, #1
 800c12a:	d102      	bne.n	800c132 <_read_r+0x1e>
 800c12c:	682b      	ldr	r3, [r5, #0]
 800c12e:	b103      	cbz	r3, 800c132 <_read_r+0x1e>
 800c130:	6023      	str	r3, [r4, #0]
 800c132:	bd38      	pop	{r3, r4, r5, pc}
 800c134:	20000d0c 	.word	0x20000d0c

0800c138 <_sbrk_r>:
 800c138:	b538      	push	{r3, r4, r5, lr}
 800c13a:	4d06      	ldr	r5, [pc, #24]	@ (800c154 <_sbrk_r+0x1c>)
 800c13c:	2300      	movs	r3, #0
 800c13e:	4604      	mov	r4, r0
 800c140:	4608      	mov	r0, r1
 800c142:	602b      	str	r3, [r5, #0]
 800c144:	f7f5 fe22 	bl	8001d8c <_sbrk>
 800c148:	1c43      	adds	r3, r0, #1
 800c14a:	d102      	bne.n	800c152 <_sbrk_r+0x1a>
 800c14c:	682b      	ldr	r3, [r5, #0]
 800c14e:	b103      	cbz	r3, 800c152 <_sbrk_r+0x1a>
 800c150:	6023      	str	r3, [r4, #0]
 800c152:	bd38      	pop	{r3, r4, r5, pc}
 800c154:	20000d0c 	.word	0x20000d0c

0800c158 <_write_r>:
 800c158:	b538      	push	{r3, r4, r5, lr}
 800c15a:	4d07      	ldr	r5, [pc, #28]	@ (800c178 <_write_r+0x20>)
 800c15c:	4604      	mov	r4, r0
 800c15e:	4608      	mov	r0, r1
 800c160:	4611      	mov	r1, r2
 800c162:	2200      	movs	r2, #0
 800c164:	602a      	str	r2, [r5, #0]
 800c166:	461a      	mov	r2, r3
 800c168:	f7f5 fdc0 	bl	8001cec <_write>
 800c16c:	1c43      	adds	r3, r0, #1
 800c16e:	d102      	bne.n	800c176 <_write_r+0x1e>
 800c170:	682b      	ldr	r3, [r5, #0]
 800c172:	b103      	cbz	r3, 800c176 <_write_r+0x1e>
 800c174:	6023      	str	r3, [r4, #0]
 800c176:	bd38      	pop	{r3, r4, r5, pc}
 800c178:	20000d0c 	.word	0x20000d0c

0800c17c <__errno>:
 800c17c:	4b01      	ldr	r3, [pc, #4]	@ (800c184 <__errno+0x8>)
 800c17e:	6818      	ldr	r0, [r3, #0]
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop
 800c184:	20000038 	.word	0x20000038

0800c188 <__libc_init_array>:
 800c188:	b570      	push	{r4, r5, r6, lr}
 800c18a:	4d0d      	ldr	r5, [pc, #52]	@ (800c1c0 <__libc_init_array+0x38>)
 800c18c:	4c0d      	ldr	r4, [pc, #52]	@ (800c1c4 <__libc_init_array+0x3c>)
 800c18e:	1b64      	subs	r4, r4, r5
 800c190:	10a4      	asrs	r4, r4, #2
 800c192:	2600      	movs	r6, #0
 800c194:	42a6      	cmp	r6, r4
 800c196:	d109      	bne.n	800c1ac <__libc_init_array+0x24>
 800c198:	4d0b      	ldr	r5, [pc, #44]	@ (800c1c8 <__libc_init_array+0x40>)
 800c19a:	4c0c      	ldr	r4, [pc, #48]	@ (800c1cc <__libc_init_array+0x44>)
 800c19c:	f001 fd68 	bl	800dc70 <_init>
 800c1a0:	1b64      	subs	r4, r4, r5
 800c1a2:	10a4      	asrs	r4, r4, #2
 800c1a4:	2600      	movs	r6, #0
 800c1a6:	42a6      	cmp	r6, r4
 800c1a8:	d105      	bne.n	800c1b6 <__libc_init_array+0x2e>
 800c1aa:	bd70      	pop	{r4, r5, r6, pc}
 800c1ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1b0:	4798      	blx	r3
 800c1b2:	3601      	adds	r6, #1
 800c1b4:	e7ee      	b.n	800c194 <__libc_init_array+0xc>
 800c1b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1ba:	4798      	blx	r3
 800c1bc:	3601      	adds	r6, #1
 800c1be:	e7f2      	b.n	800c1a6 <__libc_init_array+0x1e>
 800c1c0:	0800e10c 	.word	0x0800e10c
 800c1c4:	0800e10c 	.word	0x0800e10c
 800c1c8:	0800e10c 	.word	0x0800e10c
 800c1cc:	0800e110 	.word	0x0800e110

0800c1d0 <__retarget_lock_init_recursive>:
 800c1d0:	4770      	bx	lr

0800c1d2 <__retarget_lock_acquire_recursive>:
 800c1d2:	4770      	bx	lr

0800c1d4 <__retarget_lock_release_recursive>:
 800c1d4:	4770      	bx	lr

0800c1d6 <quorem>:
 800c1d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1da:	6903      	ldr	r3, [r0, #16]
 800c1dc:	690c      	ldr	r4, [r1, #16]
 800c1de:	42a3      	cmp	r3, r4
 800c1e0:	4607      	mov	r7, r0
 800c1e2:	db7e      	blt.n	800c2e2 <quorem+0x10c>
 800c1e4:	3c01      	subs	r4, #1
 800c1e6:	f101 0814 	add.w	r8, r1, #20
 800c1ea:	00a3      	lsls	r3, r4, #2
 800c1ec:	f100 0514 	add.w	r5, r0, #20
 800c1f0:	9300      	str	r3, [sp, #0]
 800c1f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c1f6:	9301      	str	r3, [sp, #4]
 800c1f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c1fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c200:	3301      	adds	r3, #1
 800c202:	429a      	cmp	r2, r3
 800c204:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c208:	fbb2 f6f3 	udiv	r6, r2, r3
 800c20c:	d32e      	bcc.n	800c26c <quorem+0x96>
 800c20e:	f04f 0a00 	mov.w	sl, #0
 800c212:	46c4      	mov	ip, r8
 800c214:	46ae      	mov	lr, r5
 800c216:	46d3      	mov	fp, sl
 800c218:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c21c:	b298      	uxth	r0, r3
 800c21e:	fb06 a000 	mla	r0, r6, r0, sl
 800c222:	0c02      	lsrs	r2, r0, #16
 800c224:	0c1b      	lsrs	r3, r3, #16
 800c226:	fb06 2303 	mla	r3, r6, r3, r2
 800c22a:	f8de 2000 	ldr.w	r2, [lr]
 800c22e:	b280      	uxth	r0, r0
 800c230:	b292      	uxth	r2, r2
 800c232:	1a12      	subs	r2, r2, r0
 800c234:	445a      	add	r2, fp
 800c236:	f8de 0000 	ldr.w	r0, [lr]
 800c23a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c23e:	b29b      	uxth	r3, r3
 800c240:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c244:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c248:	b292      	uxth	r2, r2
 800c24a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c24e:	45e1      	cmp	r9, ip
 800c250:	f84e 2b04 	str.w	r2, [lr], #4
 800c254:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c258:	d2de      	bcs.n	800c218 <quorem+0x42>
 800c25a:	9b00      	ldr	r3, [sp, #0]
 800c25c:	58eb      	ldr	r3, [r5, r3]
 800c25e:	b92b      	cbnz	r3, 800c26c <quorem+0x96>
 800c260:	9b01      	ldr	r3, [sp, #4]
 800c262:	3b04      	subs	r3, #4
 800c264:	429d      	cmp	r5, r3
 800c266:	461a      	mov	r2, r3
 800c268:	d32f      	bcc.n	800c2ca <quorem+0xf4>
 800c26a:	613c      	str	r4, [r7, #16]
 800c26c:	4638      	mov	r0, r7
 800c26e:	f001 f8c7 	bl	800d400 <__mcmp>
 800c272:	2800      	cmp	r0, #0
 800c274:	db25      	blt.n	800c2c2 <quorem+0xec>
 800c276:	4629      	mov	r1, r5
 800c278:	2000      	movs	r0, #0
 800c27a:	f858 2b04 	ldr.w	r2, [r8], #4
 800c27e:	f8d1 c000 	ldr.w	ip, [r1]
 800c282:	fa1f fe82 	uxth.w	lr, r2
 800c286:	fa1f f38c 	uxth.w	r3, ip
 800c28a:	eba3 030e 	sub.w	r3, r3, lr
 800c28e:	4403      	add	r3, r0
 800c290:	0c12      	lsrs	r2, r2, #16
 800c292:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c296:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2a0:	45c1      	cmp	r9, r8
 800c2a2:	f841 3b04 	str.w	r3, [r1], #4
 800c2a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c2aa:	d2e6      	bcs.n	800c27a <quorem+0xa4>
 800c2ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c2b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c2b4:	b922      	cbnz	r2, 800c2c0 <quorem+0xea>
 800c2b6:	3b04      	subs	r3, #4
 800c2b8:	429d      	cmp	r5, r3
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	d30b      	bcc.n	800c2d6 <quorem+0x100>
 800c2be:	613c      	str	r4, [r7, #16]
 800c2c0:	3601      	adds	r6, #1
 800c2c2:	4630      	mov	r0, r6
 800c2c4:	b003      	add	sp, #12
 800c2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ca:	6812      	ldr	r2, [r2, #0]
 800c2cc:	3b04      	subs	r3, #4
 800c2ce:	2a00      	cmp	r2, #0
 800c2d0:	d1cb      	bne.n	800c26a <quorem+0x94>
 800c2d2:	3c01      	subs	r4, #1
 800c2d4:	e7c6      	b.n	800c264 <quorem+0x8e>
 800c2d6:	6812      	ldr	r2, [r2, #0]
 800c2d8:	3b04      	subs	r3, #4
 800c2da:	2a00      	cmp	r2, #0
 800c2dc:	d1ef      	bne.n	800c2be <quorem+0xe8>
 800c2de:	3c01      	subs	r4, #1
 800c2e0:	e7ea      	b.n	800c2b8 <quorem+0xe2>
 800c2e2:	2000      	movs	r0, #0
 800c2e4:	e7ee      	b.n	800c2c4 <quorem+0xee>
	...

0800c2e8 <_dtoa_r>:
 800c2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ec:	69c7      	ldr	r7, [r0, #28]
 800c2ee:	b097      	sub	sp, #92	@ 0x5c
 800c2f0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c2f4:	ec55 4b10 	vmov	r4, r5, d0
 800c2f8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c2fa:	9107      	str	r1, [sp, #28]
 800c2fc:	4681      	mov	r9, r0
 800c2fe:	920c      	str	r2, [sp, #48]	@ 0x30
 800c300:	9311      	str	r3, [sp, #68]	@ 0x44
 800c302:	b97f      	cbnz	r7, 800c324 <_dtoa_r+0x3c>
 800c304:	2010      	movs	r0, #16
 800c306:	f7fe ffb9 	bl	800b27c <malloc>
 800c30a:	4602      	mov	r2, r0
 800c30c:	f8c9 001c 	str.w	r0, [r9, #28]
 800c310:	b920      	cbnz	r0, 800c31c <_dtoa_r+0x34>
 800c312:	4ba9      	ldr	r3, [pc, #676]	@ (800c5b8 <_dtoa_r+0x2d0>)
 800c314:	21ef      	movs	r1, #239	@ 0xef
 800c316:	48a9      	ldr	r0, [pc, #676]	@ (800c5bc <_dtoa_r+0x2d4>)
 800c318:	f001 fbfa 	bl	800db10 <__assert_func>
 800c31c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c320:	6007      	str	r7, [r0, #0]
 800c322:	60c7      	str	r7, [r0, #12]
 800c324:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c328:	6819      	ldr	r1, [r3, #0]
 800c32a:	b159      	cbz	r1, 800c344 <_dtoa_r+0x5c>
 800c32c:	685a      	ldr	r2, [r3, #4]
 800c32e:	604a      	str	r2, [r1, #4]
 800c330:	2301      	movs	r3, #1
 800c332:	4093      	lsls	r3, r2
 800c334:	608b      	str	r3, [r1, #8]
 800c336:	4648      	mov	r0, r9
 800c338:	f000 fe30 	bl	800cf9c <_Bfree>
 800c33c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c340:	2200      	movs	r2, #0
 800c342:	601a      	str	r2, [r3, #0]
 800c344:	1e2b      	subs	r3, r5, #0
 800c346:	bfb9      	ittee	lt
 800c348:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c34c:	9305      	strlt	r3, [sp, #20]
 800c34e:	2300      	movge	r3, #0
 800c350:	6033      	strge	r3, [r6, #0]
 800c352:	9f05      	ldr	r7, [sp, #20]
 800c354:	4b9a      	ldr	r3, [pc, #616]	@ (800c5c0 <_dtoa_r+0x2d8>)
 800c356:	bfbc      	itt	lt
 800c358:	2201      	movlt	r2, #1
 800c35a:	6032      	strlt	r2, [r6, #0]
 800c35c:	43bb      	bics	r3, r7
 800c35e:	d112      	bne.n	800c386 <_dtoa_r+0x9e>
 800c360:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c362:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c366:	6013      	str	r3, [r2, #0]
 800c368:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c36c:	4323      	orrs	r3, r4
 800c36e:	f000 855a 	beq.w	800ce26 <_dtoa_r+0xb3e>
 800c372:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c374:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c5d4 <_dtoa_r+0x2ec>
 800c378:	2b00      	cmp	r3, #0
 800c37a:	f000 855c 	beq.w	800ce36 <_dtoa_r+0xb4e>
 800c37e:	f10a 0303 	add.w	r3, sl, #3
 800c382:	f000 bd56 	b.w	800ce32 <_dtoa_r+0xb4a>
 800c386:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c38a:	2200      	movs	r2, #0
 800c38c:	ec51 0b17 	vmov	r0, r1, d7
 800c390:	2300      	movs	r3, #0
 800c392:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c396:	f7f4 fb97 	bl	8000ac8 <__aeabi_dcmpeq>
 800c39a:	4680      	mov	r8, r0
 800c39c:	b158      	cbz	r0, 800c3b6 <_dtoa_r+0xce>
 800c39e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	6013      	str	r3, [r2, #0]
 800c3a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c3a6:	b113      	cbz	r3, 800c3ae <_dtoa_r+0xc6>
 800c3a8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c3aa:	4b86      	ldr	r3, [pc, #536]	@ (800c5c4 <_dtoa_r+0x2dc>)
 800c3ac:	6013      	str	r3, [r2, #0]
 800c3ae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c5d8 <_dtoa_r+0x2f0>
 800c3b2:	f000 bd40 	b.w	800ce36 <_dtoa_r+0xb4e>
 800c3b6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c3ba:	aa14      	add	r2, sp, #80	@ 0x50
 800c3bc:	a915      	add	r1, sp, #84	@ 0x54
 800c3be:	4648      	mov	r0, r9
 800c3c0:	f001 f8ce 	bl	800d560 <__d2b>
 800c3c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c3c8:	9002      	str	r0, [sp, #8]
 800c3ca:	2e00      	cmp	r6, #0
 800c3cc:	d078      	beq.n	800c4c0 <_dtoa_r+0x1d8>
 800c3ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3d0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c3d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c3dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c3e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c3e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	4b76      	ldr	r3, [pc, #472]	@ (800c5c8 <_dtoa_r+0x2e0>)
 800c3ee:	f7f3 ff4b 	bl	8000288 <__aeabi_dsub>
 800c3f2:	a36b      	add	r3, pc, #428	@ (adr r3, 800c5a0 <_dtoa_r+0x2b8>)
 800c3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f8:	f7f4 f8fe 	bl	80005f8 <__aeabi_dmul>
 800c3fc:	a36a      	add	r3, pc, #424	@ (adr r3, 800c5a8 <_dtoa_r+0x2c0>)
 800c3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c402:	f7f3 ff43 	bl	800028c <__adddf3>
 800c406:	4604      	mov	r4, r0
 800c408:	4630      	mov	r0, r6
 800c40a:	460d      	mov	r5, r1
 800c40c:	f7f4 f88a 	bl	8000524 <__aeabi_i2d>
 800c410:	a367      	add	r3, pc, #412	@ (adr r3, 800c5b0 <_dtoa_r+0x2c8>)
 800c412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c416:	f7f4 f8ef 	bl	80005f8 <__aeabi_dmul>
 800c41a:	4602      	mov	r2, r0
 800c41c:	460b      	mov	r3, r1
 800c41e:	4620      	mov	r0, r4
 800c420:	4629      	mov	r1, r5
 800c422:	f7f3 ff33 	bl	800028c <__adddf3>
 800c426:	4604      	mov	r4, r0
 800c428:	460d      	mov	r5, r1
 800c42a:	f7f4 fb95 	bl	8000b58 <__aeabi_d2iz>
 800c42e:	2200      	movs	r2, #0
 800c430:	4607      	mov	r7, r0
 800c432:	2300      	movs	r3, #0
 800c434:	4620      	mov	r0, r4
 800c436:	4629      	mov	r1, r5
 800c438:	f7f4 fb50 	bl	8000adc <__aeabi_dcmplt>
 800c43c:	b140      	cbz	r0, 800c450 <_dtoa_r+0x168>
 800c43e:	4638      	mov	r0, r7
 800c440:	f7f4 f870 	bl	8000524 <__aeabi_i2d>
 800c444:	4622      	mov	r2, r4
 800c446:	462b      	mov	r3, r5
 800c448:	f7f4 fb3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c44c:	b900      	cbnz	r0, 800c450 <_dtoa_r+0x168>
 800c44e:	3f01      	subs	r7, #1
 800c450:	2f16      	cmp	r7, #22
 800c452:	d852      	bhi.n	800c4fa <_dtoa_r+0x212>
 800c454:	4b5d      	ldr	r3, [pc, #372]	@ (800c5cc <_dtoa_r+0x2e4>)
 800c456:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c462:	f7f4 fb3b 	bl	8000adc <__aeabi_dcmplt>
 800c466:	2800      	cmp	r0, #0
 800c468:	d049      	beq.n	800c4fe <_dtoa_r+0x216>
 800c46a:	3f01      	subs	r7, #1
 800c46c:	2300      	movs	r3, #0
 800c46e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c470:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c472:	1b9b      	subs	r3, r3, r6
 800c474:	1e5a      	subs	r2, r3, #1
 800c476:	bf45      	ittet	mi
 800c478:	f1c3 0301 	rsbmi	r3, r3, #1
 800c47c:	9300      	strmi	r3, [sp, #0]
 800c47e:	2300      	movpl	r3, #0
 800c480:	2300      	movmi	r3, #0
 800c482:	9206      	str	r2, [sp, #24]
 800c484:	bf54      	ite	pl
 800c486:	9300      	strpl	r3, [sp, #0]
 800c488:	9306      	strmi	r3, [sp, #24]
 800c48a:	2f00      	cmp	r7, #0
 800c48c:	db39      	blt.n	800c502 <_dtoa_r+0x21a>
 800c48e:	9b06      	ldr	r3, [sp, #24]
 800c490:	970d      	str	r7, [sp, #52]	@ 0x34
 800c492:	443b      	add	r3, r7
 800c494:	9306      	str	r3, [sp, #24]
 800c496:	2300      	movs	r3, #0
 800c498:	9308      	str	r3, [sp, #32]
 800c49a:	9b07      	ldr	r3, [sp, #28]
 800c49c:	2b09      	cmp	r3, #9
 800c49e:	d863      	bhi.n	800c568 <_dtoa_r+0x280>
 800c4a0:	2b05      	cmp	r3, #5
 800c4a2:	bfc4      	itt	gt
 800c4a4:	3b04      	subgt	r3, #4
 800c4a6:	9307      	strgt	r3, [sp, #28]
 800c4a8:	9b07      	ldr	r3, [sp, #28]
 800c4aa:	f1a3 0302 	sub.w	r3, r3, #2
 800c4ae:	bfcc      	ite	gt
 800c4b0:	2400      	movgt	r4, #0
 800c4b2:	2401      	movle	r4, #1
 800c4b4:	2b03      	cmp	r3, #3
 800c4b6:	d863      	bhi.n	800c580 <_dtoa_r+0x298>
 800c4b8:	e8df f003 	tbb	[pc, r3]
 800c4bc:	2b375452 	.word	0x2b375452
 800c4c0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c4c4:	441e      	add	r6, r3
 800c4c6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c4ca:	2b20      	cmp	r3, #32
 800c4cc:	bfc1      	itttt	gt
 800c4ce:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c4d2:	409f      	lslgt	r7, r3
 800c4d4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c4d8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c4dc:	bfd6      	itet	le
 800c4de:	f1c3 0320 	rsble	r3, r3, #32
 800c4e2:	ea47 0003 	orrgt.w	r0, r7, r3
 800c4e6:	fa04 f003 	lslle.w	r0, r4, r3
 800c4ea:	f7f4 f80b 	bl	8000504 <__aeabi_ui2d>
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c4f4:	3e01      	subs	r6, #1
 800c4f6:	9212      	str	r2, [sp, #72]	@ 0x48
 800c4f8:	e776      	b.n	800c3e8 <_dtoa_r+0x100>
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	e7b7      	b.n	800c46e <_dtoa_r+0x186>
 800c4fe:	9010      	str	r0, [sp, #64]	@ 0x40
 800c500:	e7b6      	b.n	800c470 <_dtoa_r+0x188>
 800c502:	9b00      	ldr	r3, [sp, #0]
 800c504:	1bdb      	subs	r3, r3, r7
 800c506:	9300      	str	r3, [sp, #0]
 800c508:	427b      	negs	r3, r7
 800c50a:	9308      	str	r3, [sp, #32]
 800c50c:	2300      	movs	r3, #0
 800c50e:	930d      	str	r3, [sp, #52]	@ 0x34
 800c510:	e7c3      	b.n	800c49a <_dtoa_r+0x1b2>
 800c512:	2301      	movs	r3, #1
 800c514:	9309      	str	r3, [sp, #36]	@ 0x24
 800c516:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c518:	eb07 0b03 	add.w	fp, r7, r3
 800c51c:	f10b 0301 	add.w	r3, fp, #1
 800c520:	2b01      	cmp	r3, #1
 800c522:	9303      	str	r3, [sp, #12]
 800c524:	bfb8      	it	lt
 800c526:	2301      	movlt	r3, #1
 800c528:	e006      	b.n	800c538 <_dtoa_r+0x250>
 800c52a:	2301      	movs	r3, #1
 800c52c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c52e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c530:	2b00      	cmp	r3, #0
 800c532:	dd28      	ble.n	800c586 <_dtoa_r+0x29e>
 800c534:	469b      	mov	fp, r3
 800c536:	9303      	str	r3, [sp, #12]
 800c538:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c53c:	2100      	movs	r1, #0
 800c53e:	2204      	movs	r2, #4
 800c540:	f102 0514 	add.w	r5, r2, #20
 800c544:	429d      	cmp	r5, r3
 800c546:	d926      	bls.n	800c596 <_dtoa_r+0x2ae>
 800c548:	6041      	str	r1, [r0, #4]
 800c54a:	4648      	mov	r0, r9
 800c54c:	f000 fce6 	bl	800cf1c <_Balloc>
 800c550:	4682      	mov	sl, r0
 800c552:	2800      	cmp	r0, #0
 800c554:	d142      	bne.n	800c5dc <_dtoa_r+0x2f4>
 800c556:	4b1e      	ldr	r3, [pc, #120]	@ (800c5d0 <_dtoa_r+0x2e8>)
 800c558:	4602      	mov	r2, r0
 800c55a:	f240 11af 	movw	r1, #431	@ 0x1af
 800c55e:	e6da      	b.n	800c316 <_dtoa_r+0x2e>
 800c560:	2300      	movs	r3, #0
 800c562:	e7e3      	b.n	800c52c <_dtoa_r+0x244>
 800c564:	2300      	movs	r3, #0
 800c566:	e7d5      	b.n	800c514 <_dtoa_r+0x22c>
 800c568:	2401      	movs	r4, #1
 800c56a:	2300      	movs	r3, #0
 800c56c:	9307      	str	r3, [sp, #28]
 800c56e:	9409      	str	r4, [sp, #36]	@ 0x24
 800c570:	f04f 3bff 	mov.w	fp, #4294967295
 800c574:	2200      	movs	r2, #0
 800c576:	f8cd b00c 	str.w	fp, [sp, #12]
 800c57a:	2312      	movs	r3, #18
 800c57c:	920c      	str	r2, [sp, #48]	@ 0x30
 800c57e:	e7db      	b.n	800c538 <_dtoa_r+0x250>
 800c580:	2301      	movs	r3, #1
 800c582:	9309      	str	r3, [sp, #36]	@ 0x24
 800c584:	e7f4      	b.n	800c570 <_dtoa_r+0x288>
 800c586:	f04f 0b01 	mov.w	fp, #1
 800c58a:	f8cd b00c 	str.w	fp, [sp, #12]
 800c58e:	465b      	mov	r3, fp
 800c590:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c594:	e7d0      	b.n	800c538 <_dtoa_r+0x250>
 800c596:	3101      	adds	r1, #1
 800c598:	0052      	lsls	r2, r2, #1
 800c59a:	e7d1      	b.n	800c540 <_dtoa_r+0x258>
 800c59c:	f3af 8000 	nop.w
 800c5a0:	636f4361 	.word	0x636f4361
 800c5a4:	3fd287a7 	.word	0x3fd287a7
 800c5a8:	8b60c8b3 	.word	0x8b60c8b3
 800c5ac:	3fc68a28 	.word	0x3fc68a28
 800c5b0:	509f79fb 	.word	0x509f79fb
 800c5b4:	3fd34413 	.word	0x3fd34413
 800c5b8:	0800ddcd 	.word	0x0800ddcd
 800c5bc:	0800dde4 	.word	0x0800dde4
 800c5c0:	7ff00000 	.word	0x7ff00000
 800c5c4:	0800dd9d 	.word	0x0800dd9d
 800c5c8:	3ff80000 	.word	0x3ff80000
 800c5cc:	0800df38 	.word	0x0800df38
 800c5d0:	0800de3c 	.word	0x0800de3c
 800c5d4:	0800ddc9 	.word	0x0800ddc9
 800c5d8:	0800dd9c 	.word	0x0800dd9c
 800c5dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c5e0:	6018      	str	r0, [r3, #0]
 800c5e2:	9b03      	ldr	r3, [sp, #12]
 800c5e4:	2b0e      	cmp	r3, #14
 800c5e6:	f200 80a1 	bhi.w	800c72c <_dtoa_r+0x444>
 800c5ea:	2c00      	cmp	r4, #0
 800c5ec:	f000 809e 	beq.w	800c72c <_dtoa_r+0x444>
 800c5f0:	2f00      	cmp	r7, #0
 800c5f2:	dd33      	ble.n	800c65c <_dtoa_r+0x374>
 800c5f4:	4b9c      	ldr	r3, [pc, #624]	@ (800c868 <_dtoa_r+0x580>)
 800c5f6:	f007 020f 	and.w	r2, r7, #15
 800c5fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5fe:	ed93 7b00 	vldr	d7, [r3]
 800c602:	05f8      	lsls	r0, r7, #23
 800c604:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c608:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c60c:	d516      	bpl.n	800c63c <_dtoa_r+0x354>
 800c60e:	4b97      	ldr	r3, [pc, #604]	@ (800c86c <_dtoa_r+0x584>)
 800c610:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c614:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c618:	f7f4 f918 	bl	800084c <__aeabi_ddiv>
 800c61c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c620:	f004 040f 	and.w	r4, r4, #15
 800c624:	2603      	movs	r6, #3
 800c626:	4d91      	ldr	r5, [pc, #580]	@ (800c86c <_dtoa_r+0x584>)
 800c628:	b954      	cbnz	r4, 800c640 <_dtoa_r+0x358>
 800c62a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c62e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c632:	f7f4 f90b 	bl	800084c <__aeabi_ddiv>
 800c636:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c63a:	e028      	b.n	800c68e <_dtoa_r+0x3a6>
 800c63c:	2602      	movs	r6, #2
 800c63e:	e7f2      	b.n	800c626 <_dtoa_r+0x33e>
 800c640:	07e1      	lsls	r1, r4, #31
 800c642:	d508      	bpl.n	800c656 <_dtoa_r+0x36e>
 800c644:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c648:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c64c:	f7f3 ffd4 	bl	80005f8 <__aeabi_dmul>
 800c650:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c654:	3601      	adds	r6, #1
 800c656:	1064      	asrs	r4, r4, #1
 800c658:	3508      	adds	r5, #8
 800c65a:	e7e5      	b.n	800c628 <_dtoa_r+0x340>
 800c65c:	f000 80af 	beq.w	800c7be <_dtoa_r+0x4d6>
 800c660:	427c      	negs	r4, r7
 800c662:	4b81      	ldr	r3, [pc, #516]	@ (800c868 <_dtoa_r+0x580>)
 800c664:	4d81      	ldr	r5, [pc, #516]	@ (800c86c <_dtoa_r+0x584>)
 800c666:	f004 020f 	and.w	r2, r4, #15
 800c66a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c672:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c676:	f7f3 ffbf 	bl	80005f8 <__aeabi_dmul>
 800c67a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c67e:	1124      	asrs	r4, r4, #4
 800c680:	2300      	movs	r3, #0
 800c682:	2602      	movs	r6, #2
 800c684:	2c00      	cmp	r4, #0
 800c686:	f040 808f 	bne.w	800c7a8 <_dtoa_r+0x4c0>
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d1d3      	bne.n	800c636 <_dtoa_r+0x34e>
 800c68e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c690:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c694:	2b00      	cmp	r3, #0
 800c696:	f000 8094 	beq.w	800c7c2 <_dtoa_r+0x4da>
 800c69a:	4b75      	ldr	r3, [pc, #468]	@ (800c870 <_dtoa_r+0x588>)
 800c69c:	2200      	movs	r2, #0
 800c69e:	4620      	mov	r0, r4
 800c6a0:	4629      	mov	r1, r5
 800c6a2:	f7f4 fa1b 	bl	8000adc <__aeabi_dcmplt>
 800c6a6:	2800      	cmp	r0, #0
 800c6a8:	f000 808b 	beq.w	800c7c2 <_dtoa_r+0x4da>
 800c6ac:	9b03      	ldr	r3, [sp, #12]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	f000 8087 	beq.w	800c7c2 <_dtoa_r+0x4da>
 800c6b4:	f1bb 0f00 	cmp.w	fp, #0
 800c6b8:	dd34      	ble.n	800c724 <_dtoa_r+0x43c>
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	4b6d      	ldr	r3, [pc, #436]	@ (800c874 <_dtoa_r+0x58c>)
 800c6be:	2200      	movs	r2, #0
 800c6c0:	4629      	mov	r1, r5
 800c6c2:	f7f3 ff99 	bl	80005f8 <__aeabi_dmul>
 800c6c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c6ca:	f107 38ff 	add.w	r8, r7, #4294967295
 800c6ce:	3601      	adds	r6, #1
 800c6d0:	465c      	mov	r4, fp
 800c6d2:	4630      	mov	r0, r6
 800c6d4:	f7f3 ff26 	bl	8000524 <__aeabi_i2d>
 800c6d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6dc:	f7f3 ff8c 	bl	80005f8 <__aeabi_dmul>
 800c6e0:	4b65      	ldr	r3, [pc, #404]	@ (800c878 <_dtoa_r+0x590>)
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f7f3 fdd2 	bl	800028c <__adddf3>
 800c6e8:	4605      	mov	r5, r0
 800c6ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c6ee:	2c00      	cmp	r4, #0
 800c6f0:	d16a      	bne.n	800c7c8 <_dtoa_r+0x4e0>
 800c6f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6f6:	4b61      	ldr	r3, [pc, #388]	@ (800c87c <_dtoa_r+0x594>)
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	f7f3 fdc5 	bl	8000288 <__aeabi_dsub>
 800c6fe:	4602      	mov	r2, r0
 800c700:	460b      	mov	r3, r1
 800c702:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c706:	462a      	mov	r2, r5
 800c708:	4633      	mov	r3, r6
 800c70a:	f7f4 fa05 	bl	8000b18 <__aeabi_dcmpgt>
 800c70e:	2800      	cmp	r0, #0
 800c710:	f040 8298 	bne.w	800cc44 <_dtoa_r+0x95c>
 800c714:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c718:	462a      	mov	r2, r5
 800c71a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c71e:	f7f4 f9dd 	bl	8000adc <__aeabi_dcmplt>
 800c722:	bb38      	cbnz	r0, 800c774 <_dtoa_r+0x48c>
 800c724:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c728:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c72c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c72e:	2b00      	cmp	r3, #0
 800c730:	f2c0 8157 	blt.w	800c9e2 <_dtoa_r+0x6fa>
 800c734:	2f0e      	cmp	r7, #14
 800c736:	f300 8154 	bgt.w	800c9e2 <_dtoa_r+0x6fa>
 800c73a:	4b4b      	ldr	r3, [pc, #300]	@ (800c868 <_dtoa_r+0x580>)
 800c73c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c740:	ed93 7b00 	vldr	d7, [r3]
 800c744:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c746:	2b00      	cmp	r3, #0
 800c748:	ed8d 7b00 	vstr	d7, [sp]
 800c74c:	f280 80e5 	bge.w	800c91a <_dtoa_r+0x632>
 800c750:	9b03      	ldr	r3, [sp, #12]
 800c752:	2b00      	cmp	r3, #0
 800c754:	f300 80e1 	bgt.w	800c91a <_dtoa_r+0x632>
 800c758:	d10c      	bne.n	800c774 <_dtoa_r+0x48c>
 800c75a:	4b48      	ldr	r3, [pc, #288]	@ (800c87c <_dtoa_r+0x594>)
 800c75c:	2200      	movs	r2, #0
 800c75e:	ec51 0b17 	vmov	r0, r1, d7
 800c762:	f7f3 ff49 	bl	80005f8 <__aeabi_dmul>
 800c766:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c76a:	f7f4 f9cb 	bl	8000b04 <__aeabi_dcmpge>
 800c76e:	2800      	cmp	r0, #0
 800c770:	f000 8266 	beq.w	800cc40 <_dtoa_r+0x958>
 800c774:	2400      	movs	r4, #0
 800c776:	4625      	mov	r5, r4
 800c778:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c77a:	4656      	mov	r6, sl
 800c77c:	ea6f 0803 	mvn.w	r8, r3
 800c780:	2700      	movs	r7, #0
 800c782:	4621      	mov	r1, r4
 800c784:	4648      	mov	r0, r9
 800c786:	f000 fc09 	bl	800cf9c <_Bfree>
 800c78a:	2d00      	cmp	r5, #0
 800c78c:	f000 80bd 	beq.w	800c90a <_dtoa_r+0x622>
 800c790:	b12f      	cbz	r7, 800c79e <_dtoa_r+0x4b6>
 800c792:	42af      	cmp	r7, r5
 800c794:	d003      	beq.n	800c79e <_dtoa_r+0x4b6>
 800c796:	4639      	mov	r1, r7
 800c798:	4648      	mov	r0, r9
 800c79a:	f000 fbff 	bl	800cf9c <_Bfree>
 800c79e:	4629      	mov	r1, r5
 800c7a0:	4648      	mov	r0, r9
 800c7a2:	f000 fbfb 	bl	800cf9c <_Bfree>
 800c7a6:	e0b0      	b.n	800c90a <_dtoa_r+0x622>
 800c7a8:	07e2      	lsls	r2, r4, #31
 800c7aa:	d505      	bpl.n	800c7b8 <_dtoa_r+0x4d0>
 800c7ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c7b0:	f7f3 ff22 	bl	80005f8 <__aeabi_dmul>
 800c7b4:	3601      	adds	r6, #1
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	1064      	asrs	r4, r4, #1
 800c7ba:	3508      	adds	r5, #8
 800c7bc:	e762      	b.n	800c684 <_dtoa_r+0x39c>
 800c7be:	2602      	movs	r6, #2
 800c7c0:	e765      	b.n	800c68e <_dtoa_r+0x3a6>
 800c7c2:	9c03      	ldr	r4, [sp, #12]
 800c7c4:	46b8      	mov	r8, r7
 800c7c6:	e784      	b.n	800c6d2 <_dtoa_r+0x3ea>
 800c7c8:	4b27      	ldr	r3, [pc, #156]	@ (800c868 <_dtoa_r+0x580>)
 800c7ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c7cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c7d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c7d4:	4454      	add	r4, sl
 800c7d6:	2900      	cmp	r1, #0
 800c7d8:	d054      	beq.n	800c884 <_dtoa_r+0x59c>
 800c7da:	4929      	ldr	r1, [pc, #164]	@ (800c880 <_dtoa_r+0x598>)
 800c7dc:	2000      	movs	r0, #0
 800c7de:	f7f4 f835 	bl	800084c <__aeabi_ddiv>
 800c7e2:	4633      	mov	r3, r6
 800c7e4:	462a      	mov	r2, r5
 800c7e6:	f7f3 fd4f 	bl	8000288 <__aeabi_dsub>
 800c7ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c7ee:	4656      	mov	r6, sl
 800c7f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c7f4:	f7f4 f9b0 	bl	8000b58 <__aeabi_d2iz>
 800c7f8:	4605      	mov	r5, r0
 800c7fa:	f7f3 fe93 	bl	8000524 <__aeabi_i2d>
 800c7fe:	4602      	mov	r2, r0
 800c800:	460b      	mov	r3, r1
 800c802:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c806:	f7f3 fd3f 	bl	8000288 <__aeabi_dsub>
 800c80a:	3530      	adds	r5, #48	@ 0x30
 800c80c:	4602      	mov	r2, r0
 800c80e:	460b      	mov	r3, r1
 800c810:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c814:	f806 5b01 	strb.w	r5, [r6], #1
 800c818:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c81c:	f7f4 f95e 	bl	8000adc <__aeabi_dcmplt>
 800c820:	2800      	cmp	r0, #0
 800c822:	d172      	bne.n	800c90a <_dtoa_r+0x622>
 800c824:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c828:	4911      	ldr	r1, [pc, #68]	@ (800c870 <_dtoa_r+0x588>)
 800c82a:	2000      	movs	r0, #0
 800c82c:	f7f3 fd2c 	bl	8000288 <__aeabi_dsub>
 800c830:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c834:	f7f4 f952 	bl	8000adc <__aeabi_dcmplt>
 800c838:	2800      	cmp	r0, #0
 800c83a:	f040 80b4 	bne.w	800c9a6 <_dtoa_r+0x6be>
 800c83e:	42a6      	cmp	r6, r4
 800c840:	f43f af70 	beq.w	800c724 <_dtoa_r+0x43c>
 800c844:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c848:	4b0a      	ldr	r3, [pc, #40]	@ (800c874 <_dtoa_r+0x58c>)
 800c84a:	2200      	movs	r2, #0
 800c84c:	f7f3 fed4 	bl	80005f8 <__aeabi_dmul>
 800c850:	4b08      	ldr	r3, [pc, #32]	@ (800c874 <_dtoa_r+0x58c>)
 800c852:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c856:	2200      	movs	r2, #0
 800c858:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c85c:	f7f3 fecc 	bl	80005f8 <__aeabi_dmul>
 800c860:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c864:	e7c4      	b.n	800c7f0 <_dtoa_r+0x508>
 800c866:	bf00      	nop
 800c868:	0800df38 	.word	0x0800df38
 800c86c:	0800df10 	.word	0x0800df10
 800c870:	3ff00000 	.word	0x3ff00000
 800c874:	40240000 	.word	0x40240000
 800c878:	401c0000 	.word	0x401c0000
 800c87c:	40140000 	.word	0x40140000
 800c880:	3fe00000 	.word	0x3fe00000
 800c884:	4631      	mov	r1, r6
 800c886:	4628      	mov	r0, r5
 800c888:	f7f3 feb6 	bl	80005f8 <__aeabi_dmul>
 800c88c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c890:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c892:	4656      	mov	r6, sl
 800c894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c898:	f7f4 f95e 	bl	8000b58 <__aeabi_d2iz>
 800c89c:	4605      	mov	r5, r0
 800c89e:	f7f3 fe41 	bl	8000524 <__aeabi_i2d>
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8aa:	f7f3 fced 	bl	8000288 <__aeabi_dsub>
 800c8ae:	3530      	adds	r5, #48	@ 0x30
 800c8b0:	f806 5b01 	strb.w	r5, [r6], #1
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	42a6      	cmp	r6, r4
 800c8ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c8be:	f04f 0200 	mov.w	r2, #0
 800c8c2:	d124      	bne.n	800c90e <_dtoa_r+0x626>
 800c8c4:	4baf      	ldr	r3, [pc, #700]	@ (800cb84 <_dtoa_r+0x89c>)
 800c8c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c8ca:	f7f3 fcdf 	bl	800028c <__adddf3>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8d6:	f7f4 f91f 	bl	8000b18 <__aeabi_dcmpgt>
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	d163      	bne.n	800c9a6 <_dtoa_r+0x6be>
 800c8de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c8e2:	49a8      	ldr	r1, [pc, #672]	@ (800cb84 <_dtoa_r+0x89c>)
 800c8e4:	2000      	movs	r0, #0
 800c8e6:	f7f3 fccf 	bl	8000288 <__aeabi_dsub>
 800c8ea:	4602      	mov	r2, r0
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8f2:	f7f4 f8f3 	bl	8000adc <__aeabi_dcmplt>
 800c8f6:	2800      	cmp	r0, #0
 800c8f8:	f43f af14 	beq.w	800c724 <_dtoa_r+0x43c>
 800c8fc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c8fe:	1e73      	subs	r3, r6, #1
 800c900:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c902:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c906:	2b30      	cmp	r3, #48	@ 0x30
 800c908:	d0f8      	beq.n	800c8fc <_dtoa_r+0x614>
 800c90a:	4647      	mov	r7, r8
 800c90c:	e03b      	b.n	800c986 <_dtoa_r+0x69e>
 800c90e:	4b9e      	ldr	r3, [pc, #632]	@ (800cb88 <_dtoa_r+0x8a0>)
 800c910:	f7f3 fe72 	bl	80005f8 <__aeabi_dmul>
 800c914:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c918:	e7bc      	b.n	800c894 <_dtoa_r+0x5ac>
 800c91a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c91e:	4656      	mov	r6, sl
 800c920:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c924:	4620      	mov	r0, r4
 800c926:	4629      	mov	r1, r5
 800c928:	f7f3 ff90 	bl	800084c <__aeabi_ddiv>
 800c92c:	f7f4 f914 	bl	8000b58 <__aeabi_d2iz>
 800c930:	4680      	mov	r8, r0
 800c932:	f7f3 fdf7 	bl	8000524 <__aeabi_i2d>
 800c936:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c93a:	f7f3 fe5d 	bl	80005f8 <__aeabi_dmul>
 800c93e:	4602      	mov	r2, r0
 800c940:	460b      	mov	r3, r1
 800c942:	4620      	mov	r0, r4
 800c944:	4629      	mov	r1, r5
 800c946:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c94a:	f7f3 fc9d 	bl	8000288 <__aeabi_dsub>
 800c94e:	f806 4b01 	strb.w	r4, [r6], #1
 800c952:	9d03      	ldr	r5, [sp, #12]
 800c954:	eba6 040a 	sub.w	r4, r6, sl
 800c958:	42a5      	cmp	r5, r4
 800c95a:	4602      	mov	r2, r0
 800c95c:	460b      	mov	r3, r1
 800c95e:	d133      	bne.n	800c9c8 <_dtoa_r+0x6e0>
 800c960:	f7f3 fc94 	bl	800028c <__adddf3>
 800c964:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c968:	4604      	mov	r4, r0
 800c96a:	460d      	mov	r5, r1
 800c96c:	f7f4 f8d4 	bl	8000b18 <__aeabi_dcmpgt>
 800c970:	b9c0      	cbnz	r0, 800c9a4 <_dtoa_r+0x6bc>
 800c972:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c976:	4620      	mov	r0, r4
 800c978:	4629      	mov	r1, r5
 800c97a:	f7f4 f8a5 	bl	8000ac8 <__aeabi_dcmpeq>
 800c97e:	b110      	cbz	r0, 800c986 <_dtoa_r+0x69e>
 800c980:	f018 0f01 	tst.w	r8, #1
 800c984:	d10e      	bne.n	800c9a4 <_dtoa_r+0x6bc>
 800c986:	9902      	ldr	r1, [sp, #8]
 800c988:	4648      	mov	r0, r9
 800c98a:	f000 fb07 	bl	800cf9c <_Bfree>
 800c98e:	2300      	movs	r3, #0
 800c990:	7033      	strb	r3, [r6, #0]
 800c992:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c994:	3701      	adds	r7, #1
 800c996:	601f      	str	r7, [r3, #0]
 800c998:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	f000 824b 	beq.w	800ce36 <_dtoa_r+0xb4e>
 800c9a0:	601e      	str	r6, [r3, #0]
 800c9a2:	e248      	b.n	800ce36 <_dtoa_r+0xb4e>
 800c9a4:	46b8      	mov	r8, r7
 800c9a6:	4633      	mov	r3, r6
 800c9a8:	461e      	mov	r6, r3
 800c9aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9ae:	2a39      	cmp	r2, #57	@ 0x39
 800c9b0:	d106      	bne.n	800c9c0 <_dtoa_r+0x6d8>
 800c9b2:	459a      	cmp	sl, r3
 800c9b4:	d1f8      	bne.n	800c9a8 <_dtoa_r+0x6c0>
 800c9b6:	2230      	movs	r2, #48	@ 0x30
 800c9b8:	f108 0801 	add.w	r8, r8, #1
 800c9bc:	f88a 2000 	strb.w	r2, [sl]
 800c9c0:	781a      	ldrb	r2, [r3, #0]
 800c9c2:	3201      	adds	r2, #1
 800c9c4:	701a      	strb	r2, [r3, #0]
 800c9c6:	e7a0      	b.n	800c90a <_dtoa_r+0x622>
 800c9c8:	4b6f      	ldr	r3, [pc, #444]	@ (800cb88 <_dtoa_r+0x8a0>)
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	f7f3 fe14 	bl	80005f8 <__aeabi_dmul>
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	4604      	mov	r4, r0
 800c9d6:	460d      	mov	r5, r1
 800c9d8:	f7f4 f876 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9dc:	2800      	cmp	r0, #0
 800c9de:	d09f      	beq.n	800c920 <_dtoa_r+0x638>
 800c9e0:	e7d1      	b.n	800c986 <_dtoa_r+0x69e>
 800c9e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9e4:	2a00      	cmp	r2, #0
 800c9e6:	f000 80ea 	beq.w	800cbbe <_dtoa_r+0x8d6>
 800c9ea:	9a07      	ldr	r2, [sp, #28]
 800c9ec:	2a01      	cmp	r2, #1
 800c9ee:	f300 80cd 	bgt.w	800cb8c <_dtoa_r+0x8a4>
 800c9f2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c9f4:	2a00      	cmp	r2, #0
 800c9f6:	f000 80c1 	beq.w	800cb7c <_dtoa_r+0x894>
 800c9fa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c9fe:	9c08      	ldr	r4, [sp, #32]
 800ca00:	9e00      	ldr	r6, [sp, #0]
 800ca02:	9a00      	ldr	r2, [sp, #0]
 800ca04:	441a      	add	r2, r3
 800ca06:	9200      	str	r2, [sp, #0]
 800ca08:	9a06      	ldr	r2, [sp, #24]
 800ca0a:	2101      	movs	r1, #1
 800ca0c:	441a      	add	r2, r3
 800ca0e:	4648      	mov	r0, r9
 800ca10:	9206      	str	r2, [sp, #24]
 800ca12:	f000 fb77 	bl	800d104 <__i2b>
 800ca16:	4605      	mov	r5, r0
 800ca18:	b166      	cbz	r6, 800ca34 <_dtoa_r+0x74c>
 800ca1a:	9b06      	ldr	r3, [sp, #24]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	dd09      	ble.n	800ca34 <_dtoa_r+0x74c>
 800ca20:	42b3      	cmp	r3, r6
 800ca22:	9a00      	ldr	r2, [sp, #0]
 800ca24:	bfa8      	it	ge
 800ca26:	4633      	movge	r3, r6
 800ca28:	1ad2      	subs	r2, r2, r3
 800ca2a:	9200      	str	r2, [sp, #0]
 800ca2c:	9a06      	ldr	r2, [sp, #24]
 800ca2e:	1af6      	subs	r6, r6, r3
 800ca30:	1ad3      	subs	r3, r2, r3
 800ca32:	9306      	str	r3, [sp, #24]
 800ca34:	9b08      	ldr	r3, [sp, #32]
 800ca36:	b30b      	cbz	r3, 800ca7c <_dtoa_r+0x794>
 800ca38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	f000 80c6 	beq.w	800cbcc <_dtoa_r+0x8e4>
 800ca40:	2c00      	cmp	r4, #0
 800ca42:	f000 80c0 	beq.w	800cbc6 <_dtoa_r+0x8de>
 800ca46:	4629      	mov	r1, r5
 800ca48:	4622      	mov	r2, r4
 800ca4a:	4648      	mov	r0, r9
 800ca4c:	f000 fc12 	bl	800d274 <__pow5mult>
 800ca50:	9a02      	ldr	r2, [sp, #8]
 800ca52:	4601      	mov	r1, r0
 800ca54:	4605      	mov	r5, r0
 800ca56:	4648      	mov	r0, r9
 800ca58:	f000 fb6a 	bl	800d130 <__multiply>
 800ca5c:	9902      	ldr	r1, [sp, #8]
 800ca5e:	4680      	mov	r8, r0
 800ca60:	4648      	mov	r0, r9
 800ca62:	f000 fa9b 	bl	800cf9c <_Bfree>
 800ca66:	9b08      	ldr	r3, [sp, #32]
 800ca68:	1b1b      	subs	r3, r3, r4
 800ca6a:	9308      	str	r3, [sp, #32]
 800ca6c:	f000 80b1 	beq.w	800cbd2 <_dtoa_r+0x8ea>
 800ca70:	9a08      	ldr	r2, [sp, #32]
 800ca72:	4641      	mov	r1, r8
 800ca74:	4648      	mov	r0, r9
 800ca76:	f000 fbfd 	bl	800d274 <__pow5mult>
 800ca7a:	9002      	str	r0, [sp, #8]
 800ca7c:	2101      	movs	r1, #1
 800ca7e:	4648      	mov	r0, r9
 800ca80:	f000 fb40 	bl	800d104 <__i2b>
 800ca84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ca86:	4604      	mov	r4, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	f000 81d8 	beq.w	800ce3e <_dtoa_r+0xb56>
 800ca8e:	461a      	mov	r2, r3
 800ca90:	4601      	mov	r1, r0
 800ca92:	4648      	mov	r0, r9
 800ca94:	f000 fbee 	bl	800d274 <__pow5mult>
 800ca98:	9b07      	ldr	r3, [sp, #28]
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	4604      	mov	r4, r0
 800ca9e:	f300 809f 	bgt.w	800cbe0 <_dtoa_r+0x8f8>
 800caa2:	9b04      	ldr	r3, [sp, #16]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	f040 8097 	bne.w	800cbd8 <_dtoa_r+0x8f0>
 800caaa:	9b05      	ldr	r3, [sp, #20]
 800caac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	f040 8093 	bne.w	800cbdc <_dtoa_r+0x8f4>
 800cab6:	9b05      	ldr	r3, [sp, #20]
 800cab8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cabc:	0d1b      	lsrs	r3, r3, #20
 800cabe:	051b      	lsls	r3, r3, #20
 800cac0:	b133      	cbz	r3, 800cad0 <_dtoa_r+0x7e8>
 800cac2:	9b00      	ldr	r3, [sp, #0]
 800cac4:	3301      	adds	r3, #1
 800cac6:	9300      	str	r3, [sp, #0]
 800cac8:	9b06      	ldr	r3, [sp, #24]
 800caca:	3301      	adds	r3, #1
 800cacc:	9306      	str	r3, [sp, #24]
 800cace:	2301      	movs	r3, #1
 800cad0:	9308      	str	r3, [sp, #32]
 800cad2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f000 81b8 	beq.w	800ce4a <_dtoa_r+0xb62>
 800cada:	6923      	ldr	r3, [r4, #16]
 800cadc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cae0:	6918      	ldr	r0, [r3, #16]
 800cae2:	f000 fac3 	bl	800d06c <__hi0bits>
 800cae6:	f1c0 0020 	rsb	r0, r0, #32
 800caea:	9b06      	ldr	r3, [sp, #24]
 800caec:	4418      	add	r0, r3
 800caee:	f010 001f 	ands.w	r0, r0, #31
 800caf2:	f000 8082 	beq.w	800cbfa <_dtoa_r+0x912>
 800caf6:	f1c0 0320 	rsb	r3, r0, #32
 800cafa:	2b04      	cmp	r3, #4
 800cafc:	dd73      	ble.n	800cbe6 <_dtoa_r+0x8fe>
 800cafe:	9b00      	ldr	r3, [sp, #0]
 800cb00:	f1c0 001c 	rsb	r0, r0, #28
 800cb04:	4403      	add	r3, r0
 800cb06:	9300      	str	r3, [sp, #0]
 800cb08:	9b06      	ldr	r3, [sp, #24]
 800cb0a:	4403      	add	r3, r0
 800cb0c:	4406      	add	r6, r0
 800cb0e:	9306      	str	r3, [sp, #24]
 800cb10:	9b00      	ldr	r3, [sp, #0]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	dd05      	ble.n	800cb22 <_dtoa_r+0x83a>
 800cb16:	9902      	ldr	r1, [sp, #8]
 800cb18:	461a      	mov	r2, r3
 800cb1a:	4648      	mov	r0, r9
 800cb1c:	f000 fc04 	bl	800d328 <__lshift>
 800cb20:	9002      	str	r0, [sp, #8]
 800cb22:	9b06      	ldr	r3, [sp, #24]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	dd05      	ble.n	800cb34 <_dtoa_r+0x84c>
 800cb28:	4621      	mov	r1, r4
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	4648      	mov	r0, r9
 800cb2e:	f000 fbfb 	bl	800d328 <__lshift>
 800cb32:	4604      	mov	r4, r0
 800cb34:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d061      	beq.n	800cbfe <_dtoa_r+0x916>
 800cb3a:	9802      	ldr	r0, [sp, #8]
 800cb3c:	4621      	mov	r1, r4
 800cb3e:	f000 fc5f 	bl	800d400 <__mcmp>
 800cb42:	2800      	cmp	r0, #0
 800cb44:	da5b      	bge.n	800cbfe <_dtoa_r+0x916>
 800cb46:	2300      	movs	r3, #0
 800cb48:	9902      	ldr	r1, [sp, #8]
 800cb4a:	220a      	movs	r2, #10
 800cb4c:	4648      	mov	r0, r9
 800cb4e:	f000 fa47 	bl	800cfe0 <__multadd>
 800cb52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb54:	9002      	str	r0, [sp, #8]
 800cb56:	f107 38ff 	add.w	r8, r7, #4294967295
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	f000 8177 	beq.w	800ce4e <_dtoa_r+0xb66>
 800cb60:	4629      	mov	r1, r5
 800cb62:	2300      	movs	r3, #0
 800cb64:	220a      	movs	r2, #10
 800cb66:	4648      	mov	r0, r9
 800cb68:	f000 fa3a 	bl	800cfe0 <__multadd>
 800cb6c:	f1bb 0f00 	cmp.w	fp, #0
 800cb70:	4605      	mov	r5, r0
 800cb72:	dc6f      	bgt.n	800cc54 <_dtoa_r+0x96c>
 800cb74:	9b07      	ldr	r3, [sp, #28]
 800cb76:	2b02      	cmp	r3, #2
 800cb78:	dc49      	bgt.n	800cc0e <_dtoa_r+0x926>
 800cb7a:	e06b      	b.n	800cc54 <_dtoa_r+0x96c>
 800cb7c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cb7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cb82:	e73c      	b.n	800c9fe <_dtoa_r+0x716>
 800cb84:	3fe00000 	.word	0x3fe00000
 800cb88:	40240000 	.word	0x40240000
 800cb8c:	9b03      	ldr	r3, [sp, #12]
 800cb8e:	1e5c      	subs	r4, r3, #1
 800cb90:	9b08      	ldr	r3, [sp, #32]
 800cb92:	42a3      	cmp	r3, r4
 800cb94:	db09      	blt.n	800cbaa <_dtoa_r+0x8c2>
 800cb96:	1b1c      	subs	r4, r3, r4
 800cb98:	9b03      	ldr	r3, [sp, #12]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	f6bf af30 	bge.w	800ca00 <_dtoa_r+0x718>
 800cba0:	9b00      	ldr	r3, [sp, #0]
 800cba2:	9a03      	ldr	r2, [sp, #12]
 800cba4:	1a9e      	subs	r6, r3, r2
 800cba6:	2300      	movs	r3, #0
 800cba8:	e72b      	b.n	800ca02 <_dtoa_r+0x71a>
 800cbaa:	9b08      	ldr	r3, [sp, #32]
 800cbac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cbae:	9408      	str	r4, [sp, #32]
 800cbb0:	1ae3      	subs	r3, r4, r3
 800cbb2:	441a      	add	r2, r3
 800cbb4:	9e00      	ldr	r6, [sp, #0]
 800cbb6:	9b03      	ldr	r3, [sp, #12]
 800cbb8:	920d      	str	r2, [sp, #52]	@ 0x34
 800cbba:	2400      	movs	r4, #0
 800cbbc:	e721      	b.n	800ca02 <_dtoa_r+0x71a>
 800cbbe:	9c08      	ldr	r4, [sp, #32]
 800cbc0:	9e00      	ldr	r6, [sp, #0]
 800cbc2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800cbc4:	e728      	b.n	800ca18 <_dtoa_r+0x730>
 800cbc6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800cbca:	e751      	b.n	800ca70 <_dtoa_r+0x788>
 800cbcc:	9a08      	ldr	r2, [sp, #32]
 800cbce:	9902      	ldr	r1, [sp, #8]
 800cbd0:	e750      	b.n	800ca74 <_dtoa_r+0x78c>
 800cbd2:	f8cd 8008 	str.w	r8, [sp, #8]
 800cbd6:	e751      	b.n	800ca7c <_dtoa_r+0x794>
 800cbd8:	2300      	movs	r3, #0
 800cbda:	e779      	b.n	800cad0 <_dtoa_r+0x7e8>
 800cbdc:	9b04      	ldr	r3, [sp, #16]
 800cbde:	e777      	b.n	800cad0 <_dtoa_r+0x7e8>
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	9308      	str	r3, [sp, #32]
 800cbe4:	e779      	b.n	800cada <_dtoa_r+0x7f2>
 800cbe6:	d093      	beq.n	800cb10 <_dtoa_r+0x828>
 800cbe8:	9a00      	ldr	r2, [sp, #0]
 800cbea:	331c      	adds	r3, #28
 800cbec:	441a      	add	r2, r3
 800cbee:	9200      	str	r2, [sp, #0]
 800cbf0:	9a06      	ldr	r2, [sp, #24]
 800cbf2:	441a      	add	r2, r3
 800cbf4:	441e      	add	r6, r3
 800cbf6:	9206      	str	r2, [sp, #24]
 800cbf8:	e78a      	b.n	800cb10 <_dtoa_r+0x828>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	e7f4      	b.n	800cbe8 <_dtoa_r+0x900>
 800cbfe:	9b03      	ldr	r3, [sp, #12]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	46b8      	mov	r8, r7
 800cc04:	dc20      	bgt.n	800cc48 <_dtoa_r+0x960>
 800cc06:	469b      	mov	fp, r3
 800cc08:	9b07      	ldr	r3, [sp, #28]
 800cc0a:	2b02      	cmp	r3, #2
 800cc0c:	dd1e      	ble.n	800cc4c <_dtoa_r+0x964>
 800cc0e:	f1bb 0f00 	cmp.w	fp, #0
 800cc12:	f47f adb1 	bne.w	800c778 <_dtoa_r+0x490>
 800cc16:	4621      	mov	r1, r4
 800cc18:	465b      	mov	r3, fp
 800cc1a:	2205      	movs	r2, #5
 800cc1c:	4648      	mov	r0, r9
 800cc1e:	f000 f9df 	bl	800cfe0 <__multadd>
 800cc22:	4601      	mov	r1, r0
 800cc24:	4604      	mov	r4, r0
 800cc26:	9802      	ldr	r0, [sp, #8]
 800cc28:	f000 fbea 	bl	800d400 <__mcmp>
 800cc2c:	2800      	cmp	r0, #0
 800cc2e:	f77f ada3 	ble.w	800c778 <_dtoa_r+0x490>
 800cc32:	4656      	mov	r6, sl
 800cc34:	2331      	movs	r3, #49	@ 0x31
 800cc36:	f806 3b01 	strb.w	r3, [r6], #1
 800cc3a:	f108 0801 	add.w	r8, r8, #1
 800cc3e:	e59f      	b.n	800c780 <_dtoa_r+0x498>
 800cc40:	9c03      	ldr	r4, [sp, #12]
 800cc42:	46b8      	mov	r8, r7
 800cc44:	4625      	mov	r5, r4
 800cc46:	e7f4      	b.n	800cc32 <_dtoa_r+0x94a>
 800cc48:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800cc4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	f000 8101 	beq.w	800ce56 <_dtoa_r+0xb6e>
 800cc54:	2e00      	cmp	r6, #0
 800cc56:	dd05      	ble.n	800cc64 <_dtoa_r+0x97c>
 800cc58:	4629      	mov	r1, r5
 800cc5a:	4632      	mov	r2, r6
 800cc5c:	4648      	mov	r0, r9
 800cc5e:	f000 fb63 	bl	800d328 <__lshift>
 800cc62:	4605      	mov	r5, r0
 800cc64:	9b08      	ldr	r3, [sp, #32]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d05c      	beq.n	800cd24 <_dtoa_r+0xa3c>
 800cc6a:	6869      	ldr	r1, [r5, #4]
 800cc6c:	4648      	mov	r0, r9
 800cc6e:	f000 f955 	bl	800cf1c <_Balloc>
 800cc72:	4606      	mov	r6, r0
 800cc74:	b928      	cbnz	r0, 800cc82 <_dtoa_r+0x99a>
 800cc76:	4b82      	ldr	r3, [pc, #520]	@ (800ce80 <_dtoa_r+0xb98>)
 800cc78:	4602      	mov	r2, r0
 800cc7a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cc7e:	f7ff bb4a 	b.w	800c316 <_dtoa_r+0x2e>
 800cc82:	692a      	ldr	r2, [r5, #16]
 800cc84:	3202      	adds	r2, #2
 800cc86:	0092      	lsls	r2, r2, #2
 800cc88:	f105 010c 	add.w	r1, r5, #12
 800cc8c:	300c      	adds	r0, #12
 800cc8e:	f000 ff31 	bl	800daf4 <memcpy>
 800cc92:	2201      	movs	r2, #1
 800cc94:	4631      	mov	r1, r6
 800cc96:	4648      	mov	r0, r9
 800cc98:	f000 fb46 	bl	800d328 <__lshift>
 800cc9c:	f10a 0301 	add.w	r3, sl, #1
 800cca0:	9300      	str	r3, [sp, #0]
 800cca2:	eb0a 030b 	add.w	r3, sl, fp
 800cca6:	9308      	str	r3, [sp, #32]
 800cca8:	9b04      	ldr	r3, [sp, #16]
 800ccaa:	f003 0301 	and.w	r3, r3, #1
 800ccae:	462f      	mov	r7, r5
 800ccb0:	9306      	str	r3, [sp, #24]
 800ccb2:	4605      	mov	r5, r0
 800ccb4:	9b00      	ldr	r3, [sp, #0]
 800ccb6:	9802      	ldr	r0, [sp, #8]
 800ccb8:	4621      	mov	r1, r4
 800ccba:	f103 3bff 	add.w	fp, r3, #4294967295
 800ccbe:	f7ff fa8a 	bl	800c1d6 <quorem>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	3330      	adds	r3, #48	@ 0x30
 800ccc6:	9003      	str	r0, [sp, #12]
 800ccc8:	4639      	mov	r1, r7
 800ccca:	9802      	ldr	r0, [sp, #8]
 800cccc:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccce:	f000 fb97 	bl	800d400 <__mcmp>
 800ccd2:	462a      	mov	r2, r5
 800ccd4:	9004      	str	r0, [sp, #16]
 800ccd6:	4621      	mov	r1, r4
 800ccd8:	4648      	mov	r0, r9
 800ccda:	f000 fbad 	bl	800d438 <__mdiff>
 800ccde:	68c2      	ldr	r2, [r0, #12]
 800cce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cce2:	4606      	mov	r6, r0
 800cce4:	bb02      	cbnz	r2, 800cd28 <_dtoa_r+0xa40>
 800cce6:	4601      	mov	r1, r0
 800cce8:	9802      	ldr	r0, [sp, #8]
 800ccea:	f000 fb89 	bl	800d400 <__mcmp>
 800ccee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	4631      	mov	r1, r6
 800ccf4:	4648      	mov	r0, r9
 800ccf6:	920c      	str	r2, [sp, #48]	@ 0x30
 800ccf8:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccfa:	f000 f94f 	bl	800cf9c <_Bfree>
 800ccfe:	9b07      	ldr	r3, [sp, #28]
 800cd00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cd02:	9e00      	ldr	r6, [sp, #0]
 800cd04:	ea42 0103 	orr.w	r1, r2, r3
 800cd08:	9b06      	ldr	r3, [sp, #24]
 800cd0a:	4319      	orrs	r1, r3
 800cd0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd0e:	d10d      	bne.n	800cd2c <_dtoa_r+0xa44>
 800cd10:	2b39      	cmp	r3, #57	@ 0x39
 800cd12:	d027      	beq.n	800cd64 <_dtoa_r+0xa7c>
 800cd14:	9a04      	ldr	r2, [sp, #16]
 800cd16:	2a00      	cmp	r2, #0
 800cd18:	dd01      	ble.n	800cd1e <_dtoa_r+0xa36>
 800cd1a:	9b03      	ldr	r3, [sp, #12]
 800cd1c:	3331      	adds	r3, #49	@ 0x31
 800cd1e:	f88b 3000 	strb.w	r3, [fp]
 800cd22:	e52e      	b.n	800c782 <_dtoa_r+0x49a>
 800cd24:	4628      	mov	r0, r5
 800cd26:	e7b9      	b.n	800cc9c <_dtoa_r+0x9b4>
 800cd28:	2201      	movs	r2, #1
 800cd2a:	e7e2      	b.n	800ccf2 <_dtoa_r+0xa0a>
 800cd2c:	9904      	ldr	r1, [sp, #16]
 800cd2e:	2900      	cmp	r1, #0
 800cd30:	db04      	blt.n	800cd3c <_dtoa_r+0xa54>
 800cd32:	9807      	ldr	r0, [sp, #28]
 800cd34:	4301      	orrs	r1, r0
 800cd36:	9806      	ldr	r0, [sp, #24]
 800cd38:	4301      	orrs	r1, r0
 800cd3a:	d120      	bne.n	800cd7e <_dtoa_r+0xa96>
 800cd3c:	2a00      	cmp	r2, #0
 800cd3e:	ddee      	ble.n	800cd1e <_dtoa_r+0xa36>
 800cd40:	9902      	ldr	r1, [sp, #8]
 800cd42:	9300      	str	r3, [sp, #0]
 800cd44:	2201      	movs	r2, #1
 800cd46:	4648      	mov	r0, r9
 800cd48:	f000 faee 	bl	800d328 <__lshift>
 800cd4c:	4621      	mov	r1, r4
 800cd4e:	9002      	str	r0, [sp, #8]
 800cd50:	f000 fb56 	bl	800d400 <__mcmp>
 800cd54:	2800      	cmp	r0, #0
 800cd56:	9b00      	ldr	r3, [sp, #0]
 800cd58:	dc02      	bgt.n	800cd60 <_dtoa_r+0xa78>
 800cd5a:	d1e0      	bne.n	800cd1e <_dtoa_r+0xa36>
 800cd5c:	07da      	lsls	r2, r3, #31
 800cd5e:	d5de      	bpl.n	800cd1e <_dtoa_r+0xa36>
 800cd60:	2b39      	cmp	r3, #57	@ 0x39
 800cd62:	d1da      	bne.n	800cd1a <_dtoa_r+0xa32>
 800cd64:	2339      	movs	r3, #57	@ 0x39
 800cd66:	f88b 3000 	strb.w	r3, [fp]
 800cd6a:	4633      	mov	r3, r6
 800cd6c:	461e      	mov	r6, r3
 800cd6e:	3b01      	subs	r3, #1
 800cd70:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cd74:	2a39      	cmp	r2, #57	@ 0x39
 800cd76:	d04e      	beq.n	800ce16 <_dtoa_r+0xb2e>
 800cd78:	3201      	adds	r2, #1
 800cd7a:	701a      	strb	r2, [r3, #0]
 800cd7c:	e501      	b.n	800c782 <_dtoa_r+0x49a>
 800cd7e:	2a00      	cmp	r2, #0
 800cd80:	dd03      	ble.n	800cd8a <_dtoa_r+0xaa2>
 800cd82:	2b39      	cmp	r3, #57	@ 0x39
 800cd84:	d0ee      	beq.n	800cd64 <_dtoa_r+0xa7c>
 800cd86:	3301      	adds	r3, #1
 800cd88:	e7c9      	b.n	800cd1e <_dtoa_r+0xa36>
 800cd8a:	9a00      	ldr	r2, [sp, #0]
 800cd8c:	9908      	ldr	r1, [sp, #32]
 800cd8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cd92:	428a      	cmp	r2, r1
 800cd94:	d028      	beq.n	800cde8 <_dtoa_r+0xb00>
 800cd96:	9902      	ldr	r1, [sp, #8]
 800cd98:	2300      	movs	r3, #0
 800cd9a:	220a      	movs	r2, #10
 800cd9c:	4648      	mov	r0, r9
 800cd9e:	f000 f91f 	bl	800cfe0 <__multadd>
 800cda2:	42af      	cmp	r7, r5
 800cda4:	9002      	str	r0, [sp, #8]
 800cda6:	f04f 0300 	mov.w	r3, #0
 800cdaa:	f04f 020a 	mov.w	r2, #10
 800cdae:	4639      	mov	r1, r7
 800cdb0:	4648      	mov	r0, r9
 800cdb2:	d107      	bne.n	800cdc4 <_dtoa_r+0xadc>
 800cdb4:	f000 f914 	bl	800cfe0 <__multadd>
 800cdb8:	4607      	mov	r7, r0
 800cdba:	4605      	mov	r5, r0
 800cdbc:	9b00      	ldr	r3, [sp, #0]
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	9300      	str	r3, [sp, #0]
 800cdc2:	e777      	b.n	800ccb4 <_dtoa_r+0x9cc>
 800cdc4:	f000 f90c 	bl	800cfe0 <__multadd>
 800cdc8:	4629      	mov	r1, r5
 800cdca:	4607      	mov	r7, r0
 800cdcc:	2300      	movs	r3, #0
 800cdce:	220a      	movs	r2, #10
 800cdd0:	4648      	mov	r0, r9
 800cdd2:	f000 f905 	bl	800cfe0 <__multadd>
 800cdd6:	4605      	mov	r5, r0
 800cdd8:	e7f0      	b.n	800cdbc <_dtoa_r+0xad4>
 800cdda:	f1bb 0f00 	cmp.w	fp, #0
 800cdde:	bfcc      	ite	gt
 800cde0:	465e      	movgt	r6, fp
 800cde2:	2601      	movle	r6, #1
 800cde4:	4456      	add	r6, sl
 800cde6:	2700      	movs	r7, #0
 800cde8:	9902      	ldr	r1, [sp, #8]
 800cdea:	9300      	str	r3, [sp, #0]
 800cdec:	2201      	movs	r2, #1
 800cdee:	4648      	mov	r0, r9
 800cdf0:	f000 fa9a 	bl	800d328 <__lshift>
 800cdf4:	4621      	mov	r1, r4
 800cdf6:	9002      	str	r0, [sp, #8]
 800cdf8:	f000 fb02 	bl	800d400 <__mcmp>
 800cdfc:	2800      	cmp	r0, #0
 800cdfe:	dcb4      	bgt.n	800cd6a <_dtoa_r+0xa82>
 800ce00:	d102      	bne.n	800ce08 <_dtoa_r+0xb20>
 800ce02:	9b00      	ldr	r3, [sp, #0]
 800ce04:	07db      	lsls	r3, r3, #31
 800ce06:	d4b0      	bmi.n	800cd6a <_dtoa_r+0xa82>
 800ce08:	4633      	mov	r3, r6
 800ce0a:	461e      	mov	r6, r3
 800ce0c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce10:	2a30      	cmp	r2, #48	@ 0x30
 800ce12:	d0fa      	beq.n	800ce0a <_dtoa_r+0xb22>
 800ce14:	e4b5      	b.n	800c782 <_dtoa_r+0x49a>
 800ce16:	459a      	cmp	sl, r3
 800ce18:	d1a8      	bne.n	800cd6c <_dtoa_r+0xa84>
 800ce1a:	2331      	movs	r3, #49	@ 0x31
 800ce1c:	f108 0801 	add.w	r8, r8, #1
 800ce20:	f88a 3000 	strb.w	r3, [sl]
 800ce24:	e4ad      	b.n	800c782 <_dtoa_r+0x49a>
 800ce26:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ce28:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ce84 <_dtoa_r+0xb9c>
 800ce2c:	b11b      	cbz	r3, 800ce36 <_dtoa_r+0xb4e>
 800ce2e:	f10a 0308 	add.w	r3, sl, #8
 800ce32:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ce34:	6013      	str	r3, [r2, #0]
 800ce36:	4650      	mov	r0, sl
 800ce38:	b017      	add	sp, #92	@ 0x5c
 800ce3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce3e:	9b07      	ldr	r3, [sp, #28]
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	f77f ae2e 	ble.w	800caa2 <_dtoa_r+0x7ba>
 800ce46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ce48:	9308      	str	r3, [sp, #32]
 800ce4a:	2001      	movs	r0, #1
 800ce4c:	e64d      	b.n	800caea <_dtoa_r+0x802>
 800ce4e:	f1bb 0f00 	cmp.w	fp, #0
 800ce52:	f77f aed9 	ble.w	800cc08 <_dtoa_r+0x920>
 800ce56:	4656      	mov	r6, sl
 800ce58:	9802      	ldr	r0, [sp, #8]
 800ce5a:	4621      	mov	r1, r4
 800ce5c:	f7ff f9bb 	bl	800c1d6 <quorem>
 800ce60:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ce64:	f806 3b01 	strb.w	r3, [r6], #1
 800ce68:	eba6 020a 	sub.w	r2, r6, sl
 800ce6c:	4593      	cmp	fp, r2
 800ce6e:	ddb4      	ble.n	800cdda <_dtoa_r+0xaf2>
 800ce70:	9902      	ldr	r1, [sp, #8]
 800ce72:	2300      	movs	r3, #0
 800ce74:	220a      	movs	r2, #10
 800ce76:	4648      	mov	r0, r9
 800ce78:	f000 f8b2 	bl	800cfe0 <__multadd>
 800ce7c:	9002      	str	r0, [sp, #8]
 800ce7e:	e7eb      	b.n	800ce58 <_dtoa_r+0xb70>
 800ce80:	0800de3c 	.word	0x0800de3c
 800ce84:	0800ddc0 	.word	0x0800ddc0

0800ce88 <_free_r>:
 800ce88:	b538      	push	{r3, r4, r5, lr}
 800ce8a:	4605      	mov	r5, r0
 800ce8c:	2900      	cmp	r1, #0
 800ce8e:	d041      	beq.n	800cf14 <_free_r+0x8c>
 800ce90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce94:	1f0c      	subs	r4, r1, #4
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	bfb8      	it	lt
 800ce9a:	18e4      	addlt	r4, r4, r3
 800ce9c:	f7fe faa0 	bl	800b3e0 <__malloc_lock>
 800cea0:	4a1d      	ldr	r2, [pc, #116]	@ (800cf18 <_free_r+0x90>)
 800cea2:	6813      	ldr	r3, [r2, #0]
 800cea4:	b933      	cbnz	r3, 800ceb4 <_free_r+0x2c>
 800cea6:	6063      	str	r3, [r4, #4]
 800cea8:	6014      	str	r4, [r2, #0]
 800ceaa:	4628      	mov	r0, r5
 800ceac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ceb0:	f7fe ba9c 	b.w	800b3ec <__malloc_unlock>
 800ceb4:	42a3      	cmp	r3, r4
 800ceb6:	d908      	bls.n	800ceca <_free_r+0x42>
 800ceb8:	6820      	ldr	r0, [r4, #0]
 800ceba:	1821      	adds	r1, r4, r0
 800cebc:	428b      	cmp	r3, r1
 800cebe:	bf01      	itttt	eq
 800cec0:	6819      	ldreq	r1, [r3, #0]
 800cec2:	685b      	ldreq	r3, [r3, #4]
 800cec4:	1809      	addeq	r1, r1, r0
 800cec6:	6021      	streq	r1, [r4, #0]
 800cec8:	e7ed      	b.n	800cea6 <_free_r+0x1e>
 800ceca:	461a      	mov	r2, r3
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	b10b      	cbz	r3, 800ced4 <_free_r+0x4c>
 800ced0:	42a3      	cmp	r3, r4
 800ced2:	d9fa      	bls.n	800ceca <_free_r+0x42>
 800ced4:	6811      	ldr	r1, [r2, #0]
 800ced6:	1850      	adds	r0, r2, r1
 800ced8:	42a0      	cmp	r0, r4
 800ceda:	d10b      	bne.n	800cef4 <_free_r+0x6c>
 800cedc:	6820      	ldr	r0, [r4, #0]
 800cede:	4401      	add	r1, r0
 800cee0:	1850      	adds	r0, r2, r1
 800cee2:	4283      	cmp	r3, r0
 800cee4:	6011      	str	r1, [r2, #0]
 800cee6:	d1e0      	bne.n	800ceaa <_free_r+0x22>
 800cee8:	6818      	ldr	r0, [r3, #0]
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	6053      	str	r3, [r2, #4]
 800ceee:	4408      	add	r0, r1
 800cef0:	6010      	str	r0, [r2, #0]
 800cef2:	e7da      	b.n	800ceaa <_free_r+0x22>
 800cef4:	d902      	bls.n	800cefc <_free_r+0x74>
 800cef6:	230c      	movs	r3, #12
 800cef8:	602b      	str	r3, [r5, #0]
 800cefa:	e7d6      	b.n	800ceaa <_free_r+0x22>
 800cefc:	6820      	ldr	r0, [r4, #0]
 800cefe:	1821      	adds	r1, r4, r0
 800cf00:	428b      	cmp	r3, r1
 800cf02:	bf04      	itt	eq
 800cf04:	6819      	ldreq	r1, [r3, #0]
 800cf06:	685b      	ldreq	r3, [r3, #4]
 800cf08:	6063      	str	r3, [r4, #4]
 800cf0a:	bf04      	itt	eq
 800cf0c:	1809      	addeq	r1, r1, r0
 800cf0e:	6021      	streq	r1, [r4, #0]
 800cf10:	6054      	str	r4, [r2, #4]
 800cf12:	e7ca      	b.n	800ceaa <_free_r+0x22>
 800cf14:	bd38      	pop	{r3, r4, r5, pc}
 800cf16:	bf00      	nop
 800cf18:	20000bcc 	.word	0x20000bcc

0800cf1c <_Balloc>:
 800cf1c:	b570      	push	{r4, r5, r6, lr}
 800cf1e:	69c6      	ldr	r6, [r0, #28]
 800cf20:	4604      	mov	r4, r0
 800cf22:	460d      	mov	r5, r1
 800cf24:	b976      	cbnz	r6, 800cf44 <_Balloc+0x28>
 800cf26:	2010      	movs	r0, #16
 800cf28:	f7fe f9a8 	bl	800b27c <malloc>
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	61e0      	str	r0, [r4, #28]
 800cf30:	b920      	cbnz	r0, 800cf3c <_Balloc+0x20>
 800cf32:	4b18      	ldr	r3, [pc, #96]	@ (800cf94 <_Balloc+0x78>)
 800cf34:	4818      	ldr	r0, [pc, #96]	@ (800cf98 <_Balloc+0x7c>)
 800cf36:	216b      	movs	r1, #107	@ 0x6b
 800cf38:	f000 fdea 	bl	800db10 <__assert_func>
 800cf3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf40:	6006      	str	r6, [r0, #0]
 800cf42:	60c6      	str	r6, [r0, #12]
 800cf44:	69e6      	ldr	r6, [r4, #28]
 800cf46:	68f3      	ldr	r3, [r6, #12]
 800cf48:	b183      	cbz	r3, 800cf6c <_Balloc+0x50>
 800cf4a:	69e3      	ldr	r3, [r4, #28]
 800cf4c:	68db      	ldr	r3, [r3, #12]
 800cf4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf52:	b9b8      	cbnz	r0, 800cf84 <_Balloc+0x68>
 800cf54:	2101      	movs	r1, #1
 800cf56:	fa01 f605 	lsl.w	r6, r1, r5
 800cf5a:	1d72      	adds	r2, r6, #5
 800cf5c:	0092      	lsls	r2, r2, #2
 800cf5e:	4620      	mov	r0, r4
 800cf60:	f000 fdf4 	bl	800db4c <_calloc_r>
 800cf64:	b160      	cbz	r0, 800cf80 <_Balloc+0x64>
 800cf66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf6a:	e00e      	b.n	800cf8a <_Balloc+0x6e>
 800cf6c:	2221      	movs	r2, #33	@ 0x21
 800cf6e:	2104      	movs	r1, #4
 800cf70:	4620      	mov	r0, r4
 800cf72:	f000 fdeb 	bl	800db4c <_calloc_r>
 800cf76:	69e3      	ldr	r3, [r4, #28]
 800cf78:	60f0      	str	r0, [r6, #12]
 800cf7a:	68db      	ldr	r3, [r3, #12]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d1e4      	bne.n	800cf4a <_Balloc+0x2e>
 800cf80:	2000      	movs	r0, #0
 800cf82:	bd70      	pop	{r4, r5, r6, pc}
 800cf84:	6802      	ldr	r2, [r0, #0]
 800cf86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf90:	e7f7      	b.n	800cf82 <_Balloc+0x66>
 800cf92:	bf00      	nop
 800cf94:	0800ddcd 	.word	0x0800ddcd
 800cf98:	0800de4d 	.word	0x0800de4d

0800cf9c <_Bfree>:
 800cf9c:	b570      	push	{r4, r5, r6, lr}
 800cf9e:	69c6      	ldr	r6, [r0, #28]
 800cfa0:	4605      	mov	r5, r0
 800cfa2:	460c      	mov	r4, r1
 800cfa4:	b976      	cbnz	r6, 800cfc4 <_Bfree+0x28>
 800cfa6:	2010      	movs	r0, #16
 800cfa8:	f7fe f968 	bl	800b27c <malloc>
 800cfac:	4602      	mov	r2, r0
 800cfae:	61e8      	str	r0, [r5, #28]
 800cfb0:	b920      	cbnz	r0, 800cfbc <_Bfree+0x20>
 800cfb2:	4b09      	ldr	r3, [pc, #36]	@ (800cfd8 <_Bfree+0x3c>)
 800cfb4:	4809      	ldr	r0, [pc, #36]	@ (800cfdc <_Bfree+0x40>)
 800cfb6:	218f      	movs	r1, #143	@ 0x8f
 800cfb8:	f000 fdaa 	bl	800db10 <__assert_func>
 800cfbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfc0:	6006      	str	r6, [r0, #0]
 800cfc2:	60c6      	str	r6, [r0, #12]
 800cfc4:	b13c      	cbz	r4, 800cfd6 <_Bfree+0x3a>
 800cfc6:	69eb      	ldr	r3, [r5, #28]
 800cfc8:	6862      	ldr	r2, [r4, #4]
 800cfca:	68db      	ldr	r3, [r3, #12]
 800cfcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cfd0:	6021      	str	r1, [r4, #0]
 800cfd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cfd6:	bd70      	pop	{r4, r5, r6, pc}
 800cfd8:	0800ddcd 	.word	0x0800ddcd
 800cfdc:	0800de4d 	.word	0x0800de4d

0800cfe0 <__multadd>:
 800cfe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfe4:	690d      	ldr	r5, [r1, #16]
 800cfe6:	4607      	mov	r7, r0
 800cfe8:	460c      	mov	r4, r1
 800cfea:	461e      	mov	r6, r3
 800cfec:	f101 0c14 	add.w	ip, r1, #20
 800cff0:	2000      	movs	r0, #0
 800cff2:	f8dc 3000 	ldr.w	r3, [ip]
 800cff6:	b299      	uxth	r1, r3
 800cff8:	fb02 6101 	mla	r1, r2, r1, r6
 800cffc:	0c1e      	lsrs	r6, r3, #16
 800cffe:	0c0b      	lsrs	r3, r1, #16
 800d000:	fb02 3306 	mla	r3, r2, r6, r3
 800d004:	b289      	uxth	r1, r1
 800d006:	3001      	adds	r0, #1
 800d008:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d00c:	4285      	cmp	r5, r0
 800d00e:	f84c 1b04 	str.w	r1, [ip], #4
 800d012:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d016:	dcec      	bgt.n	800cff2 <__multadd+0x12>
 800d018:	b30e      	cbz	r6, 800d05e <__multadd+0x7e>
 800d01a:	68a3      	ldr	r3, [r4, #8]
 800d01c:	42ab      	cmp	r3, r5
 800d01e:	dc19      	bgt.n	800d054 <__multadd+0x74>
 800d020:	6861      	ldr	r1, [r4, #4]
 800d022:	4638      	mov	r0, r7
 800d024:	3101      	adds	r1, #1
 800d026:	f7ff ff79 	bl	800cf1c <_Balloc>
 800d02a:	4680      	mov	r8, r0
 800d02c:	b928      	cbnz	r0, 800d03a <__multadd+0x5a>
 800d02e:	4602      	mov	r2, r0
 800d030:	4b0c      	ldr	r3, [pc, #48]	@ (800d064 <__multadd+0x84>)
 800d032:	480d      	ldr	r0, [pc, #52]	@ (800d068 <__multadd+0x88>)
 800d034:	21ba      	movs	r1, #186	@ 0xba
 800d036:	f000 fd6b 	bl	800db10 <__assert_func>
 800d03a:	6922      	ldr	r2, [r4, #16]
 800d03c:	3202      	adds	r2, #2
 800d03e:	f104 010c 	add.w	r1, r4, #12
 800d042:	0092      	lsls	r2, r2, #2
 800d044:	300c      	adds	r0, #12
 800d046:	f000 fd55 	bl	800daf4 <memcpy>
 800d04a:	4621      	mov	r1, r4
 800d04c:	4638      	mov	r0, r7
 800d04e:	f7ff ffa5 	bl	800cf9c <_Bfree>
 800d052:	4644      	mov	r4, r8
 800d054:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d058:	3501      	adds	r5, #1
 800d05a:	615e      	str	r6, [r3, #20]
 800d05c:	6125      	str	r5, [r4, #16]
 800d05e:	4620      	mov	r0, r4
 800d060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d064:	0800de3c 	.word	0x0800de3c
 800d068:	0800de4d 	.word	0x0800de4d

0800d06c <__hi0bits>:
 800d06c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d070:	4603      	mov	r3, r0
 800d072:	bf36      	itet	cc
 800d074:	0403      	lslcc	r3, r0, #16
 800d076:	2000      	movcs	r0, #0
 800d078:	2010      	movcc	r0, #16
 800d07a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d07e:	bf3c      	itt	cc
 800d080:	021b      	lslcc	r3, r3, #8
 800d082:	3008      	addcc	r0, #8
 800d084:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d088:	bf3c      	itt	cc
 800d08a:	011b      	lslcc	r3, r3, #4
 800d08c:	3004      	addcc	r0, #4
 800d08e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d092:	bf3c      	itt	cc
 800d094:	009b      	lslcc	r3, r3, #2
 800d096:	3002      	addcc	r0, #2
 800d098:	2b00      	cmp	r3, #0
 800d09a:	db05      	blt.n	800d0a8 <__hi0bits+0x3c>
 800d09c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d0a0:	f100 0001 	add.w	r0, r0, #1
 800d0a4:	bf08      	it	eq
 800d0a6:	2020      	moveq	r0, #32
 800d0a8:	4770      	bx	lr

0800d0aa <__lo0bits>:
 800d0aa:	6803      	ldr	r3, [r0, #0]
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	f013 0007 	ands.w	r0, r3, #7
 800d0b2:	d00b      	beq.n	800d0cc <__lo0bits+0x22>
 800d0b4:	07d9      	lsls	r1, r3, #31
 800d0b6:	d421      	bmi.n	800d0fc <__lo0bits+0x52>
 800d0b8:	0798      	lsls	r0, r3, #30
 800d0ba:	bf49      	itett	mi
 800d0bc:	085b      	lsrmi	r3, r3, #1
 800d0be:	089b      	lsrpl	r3, r3, #2
 800d0c0:	2001      	movmi	r0, #1
 800d0c2:	6013      	strmi	r3, [r2, #0]
 800d0c4:	bf5c      	itt	pl
 800d0c6:	6013      	strpl	r3, [r2, #0]
 800d0c8:	2002      	movpl	r0, #2
 800d0ca:	4770      	bx	lr
 800d0cc:	b299      	uxth	r1, r3
 800d0ce:	b909      	cbnz	r1, 800d0d4 <__lo0bits+0x2a>
 800d0d0:	0c1b      	lsrs	r3, r3, #16
 800d0d2:	2010      	movs	r0, #16
 800d0d4:	b2d9      	uxtb	r1, r3
 800d0d6:	b909      	cbnz	r1, 800d0dc <__lo0bits+0x32>
 800d0d8:	3008      	adds	r0, #8
 800d0da:	0a1b      	lsrs	r3, r3, #8
 800d0dc:	0719      	lsls	r1, r3, #28
 800d0de:	bf04      	itt	eq
 800d0e0:	091b      	lsreq	r3, r3, #4
 800d0e2:	3004      	addeq	r0, #4
 800d0e4:	0799      	lsls	r1, r3, #30
 800d0e6:	bf04      	itt	eq
 800d0e8:	089b      	lsreq	r3, r3, #2
 800d0ea:	3002      	addeq	r0, #2
 800d0ec:	07d9      	lsls	r1, r3, #31
 800d0ee:	d403      	bmi.n	800d0f8 <__lo0bits+0x4e>
 800d0f0:	085b      	lsrs	r3, r3, #1
 800d0f2:	f100 0001 	add.w	r0, r0, #1
 800d0f6:	d003      	beq.n	800d100 <__lo0bits+0x56>
 800d0f8:	6013      	str	r3, [r2, #0]
 800d0fa:	4770      	bx	lr
 800d0fc:	2000      	movs	r0, #0
 800d0fe:	4770      	bx	lr
 800d100:	2020      	movs	r0, #32
 800d102:	4770      	bx	lr

0800d104 <__i2b>:
 800d104:	b510      	push	{r4, lr}
 800d106:	460c      	mov	r4, r1
 800d108:	2101      	movs	r1, #1
 800d10a:	f7ff ff07 	bl	800cf1c <_Balloc>
 800d10e:	4602      	mov	r2, r0
 800d110:	b928      	cbnz	r0, 800d11e <__i2b+0x1a>
 800d112:	4b05      	ldr	r3, [pc, #20]	@ (800d128 <__i2b+0x24>)
 800d114:	4805      	ldr	r0, [pc, #20]	@ (800d12c <__i2b+0x28>)
 800d116:	f240 1145 	movw	r1, #325	@ 0x145
 800d11a:	f000 fcf9 	bl	800db10 <__assert_func>
 800d11e:	2301      	movs	r3, #1
 800d120:	6144      	str	r4, [r0, #20]
 800d122:	6103      	str	r3, [r0, #16]
 800d124:	bd10      	pop	{r4, pc}
 800d126:	bf00      	nop
 800d128:	0800de3c 	.word	0x0800de3c
 800d12c:	0800de4d 	.word	0x0800de4d

0800d130 <__multiply>:
 800d130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d134:	4617      	mov	r7, r2
 800d136:	690a      	ldr	r2, [r1, #16]
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	bfa8      	it	ge
 800d13e:	463b      	movge	r3, r7
 800d140:	4689      	mov	r9, r1
 800d142:	bfa4      	itt	ge
 800d144:	460f      	movge	r7, r1
 800d146:	4699      	movge	r9, r3
 800d148:	693d      	ldr	r5, [r7, #16]
 800d14a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	6879      	ldr	r1, [r7, #4]
 800d152:	eb05 060a 	add.w	r6, r5, sl
 800d156:	42b3      	cmp	r3, r6
 800d158:	b085      	sub	sp, #20
 800d15a:	bfb8      	it	lt
 800d15c:	3101      	addlt	r1, #1
 800d15e:	f7ff fedd 	bl	800cf1c <_Balloc>
 800d162:	b930      	cbnz	r0, 800d172 <__multiply+0x42>
 800d164:	4602      	mov	r2, r0
 800d166:	4b41      	ldr	r3, [pc, #260]	@ (800d26c <__multiply+0x13c>)
 800d168:	4841      	ldr	r0, [pc, #260]	@ (800d270 <__multiply+0x140>)
 800d16a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d16e:	f000 fccf 	bl	800db10 <__assert_func>
 800d172:	f100 0414 	add.w	r4, r0, #20
 800d176:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d17a:	4623      	mov	r3, r4
 800d17c:	2200      	movs	r2, #0
 800d17e:	4573      	cmp	r3, lr
 800d180:	d320      	bcc.n	800d1c4 <__multiply+0x94>
 800d182:	f107 0814 	add.w	r8, r7, #20
 800d186:	f109 0114 	add.w	r1, r9, #20
 800d18a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d18e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d192:	9302      	str	r3, [sp, #8]
 800d194:	1beb      	subs	r3, r5, r7
 800d196:	3b15      	subs	r3, #21
 800d198:	f023 0303 	bic.w	r3, r3, #3
 800d19c:	3304      	adds	r3, #4
 800d19e:	3715      	adds	r7, #21
 800d1a0:	42bd      	cmp	r5, r7
 800d1a2:	bf38      	it	cc
 800d1a4:	2304      	movcc	r3, #4
 800d1a6:	9301      	str	r3, [sp, #4]
 800d1a8:	9b02      	ldr	r3, [sp, #8]
 800d1aa:	9103      	str	r1, [sp, #12]
 800d1ac:	428b      	cmp	r3, r1
 800d1ae:	d80c      	bhi.n	800d1ca <__multiply+0x9a>
 800d1b0:	2e00      	cmp	r6, #0
 800d1b2:	dd03      	ble.n	800d1bc <__multiply+0x8c>
 800d1b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d055      	beq.n	800d268 <__multiply+0x138>
 800d1bc:	6106      	str	r6, [r0, #16]
 800d1be:	b005      	add	sp, #20
 800d1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1c4:	f843 2b04 	str.w	r2, [r3], #4
 800d1c8:	e7d9      	b.n	800d17e <__multiply+0x4e>
 800d1ca:	f8b1 a000 	ldrh.w	sl, [r1]
 800d1ce:	f1ba 0f00 	cmp.w	sl, #0
 800d1d2:	d01f      	beq.n	800d214 <__multiply+0xe4>
 800d1d4:	46c4      	mov	ip, r8
 800d1d6:	46a1      	mov	r9, r4
 800d1d8:	2700      	movs	r7, #0
 800d1da:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d1de:	f8d9 3000 	ldr.w	r3, [r9]
 800d1e2:	fa1f fb82 	uxth.w	fp, r2
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	fb0a 330b 	mla	r3, sl, fp, r3
 800d1ec:	443b      	add	r3, r7
 800d1ee:	f8d9 7000 	ldr.w	r7, [r9]
 800d1f2:	0c12      	lsrs	r2, r2, #16
 800d1f4:	0c3f      	lsrs	r7, r7, #16
 800d1f6:	fb0a 7202 	mla	r2, sl, r2, r7
 800d1fa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d1fe:	b29b      	uxth	r3, r3
 800d200:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d204:	4565      	cmp	r5, ip
 800d206:	f849 3b04 	str.w	r3, [r9], #4
 800d20a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d20e:	d8e4      	bhi.n	800d1da <__multiply+0xaa>
 800d210:	9b01      	ldr	r3, [sp, #4]
 800d212:	50e7      	str	r7, [r4, r3]
 800d214:	9b03      	ldr	r3, [sp, #12]
 800d216:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d21a:	3104      	adds	r1, #4
 800d21c:	f1b9 0f00 	cmp.w	r9, #0
 800d220:	d020      	beq.n	800d264 <__multiply+0x134>
 800d222:	6823      	ldr	r3, [r4, #0]
 800d224:	4647      	mov	r7, r8
 800d226:	46a4      	mov	ip, r4
 800d228:	f04f 0a00 	mov.w	sl, #0
 800d22c:	f8b7 b000 	ldrh.w	fp, [r7]
 800d230:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d234:	fb09 220b 	mla	r2, r9, fp, r2
 800d238:	4452      	add	r2, sl
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d240:	f84c 3b04 	str.w	r3, [ip], #4
 800d244:	f857 3b04 	ldr.w	r3, [r7], #4
 800d248:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d24c:	f8bc 3000 	ldrh.w	r3, [ip]
 800d250:	fb09 330a 	mla	r3, r9, sl, r3
 800d254:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d258:	42bd      	cmp	r5, r7
 800d25a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d25e:	d8e5      	bhi.n	800d22c <__multiply+0xfc>
 800d260:	9a01      	ldr	r2, [sp, #4]
 800d262:	50a3      	str	r3, [r4, r2]
 800d264:	3404      	adds	r4, #4
 800d266:	e79f      	b.n	800d1a8 <__multiply+0x78>
 800d268:	3e01      	subs	r6, #1
 800d26a:	e7a1      	b.n	800d1b0 <__multiply+0x80>
 800d26c:	0800de3c 	.word	0x0800de3c
 800d270:	0800de4d 	.word	0x0800de4d

0800d274 <__pow5mult>:
 800d274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d278:	4615      	mov	r5, r2
 800d27a:	f012 0203 	ands.w	r2, r2, #3
 800d27e:	4607      	mov	r7, r0
 800d280:	460e      	mov	r6, r1
 800d282:	d007      	beq.n	800d294 <__pow5mult+0x20>
 800d284:	4c25      	ldr	r4, [pc, #148]	@ (800d31c <__pow5mult+0xa8>)
 800d286:	3a01      	subs	r2, #1
 800d288:	2300      	movs	r3, #0
 800d28a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d28e:	f7ff fea7 	bl	800cfe0 <__multadd>
 800d292:	4606      	mov	r6, r0
 800d294:	10ad      	asrs	r5, r5, #2
 800d296:	d03d      	beq.n	800d314 <__pow5mult+0xa0>
 800d298:	69fc      	ldr	r4, [r7, #28]
 800d29a:	b97c      	cbnz	r4, 800d2bc <__pow5mult+0x48>
 800d29c:	2010      	movs	r0, #16
 800d29e:	f7fd ffed 	bl	800b27c <malloc>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	61f8      	str	r0, [r7, #28]
 800d2a6:	b928      	cbnz	r0, 800d2b4 <__pow5mult+0x40>
 800d2a8:	4b1d      	ldr	r3, [pc, #116]	@ (800d320 <__pow5mult+0xac>)
 800d2aa:	481e      	ldr	r0, [pc, #120]	@ (800d324 <__pow5mult+0xb0>)
 800d2ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d2b0:	f000 fc2e 	bl	800db10 <__assert_func>
 800d2b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d2b8:	6004      	str	r4, [r0, #0]
 800d2ba:	60c4      	str	r4, [r0, #12]
 800d2bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d2c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d2c4:	b94c      	cbnz	r4, 800d2da <__pow5mult+0x66>
 800d2c6:	f240 2171 	movw	r1, #625	@ 0x271
 800d2ca:	4638      	mov	r0, r7
 800d2cc:	f7ff ff1a 	bl	800d104 <__i2b>
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d2d6:	4604      	mov	r4, r0
 800d2d8:	6003      	str	r3, [r0, #0]
 800d2da:	f04f 0900 	mov.w	r9, #0
 800d2de:	07eb      	lsls	r3, r5, #31
 800d2e0:	d50a      	bpl.n	800d2f8 <__pow5mult+0x84>
 800d2e2:	4631      	mov	r1, r6
 800d2e4:	4622      	mov	r2, r4
 800d2e6:	4638      	mov	r0, r7
 800d2e8:	f7ff ff22 	bl	800d130 <__multiply>
 800d2ec:	4631      	mov	r1, r6
 800d2ee:	4680      	mov	r8, r0
 800d2f0:	4638      	mov	r0, r7
 800d2f2:	f7ff fe53 	bl	800cf9c <_Bfree>
 800d2f6:	4646      	mov	r6, r8
 800d2f8:	106d      	asrs	r5, r5, #1
 800d2fa:	d00b      	beq.n	800d314 <__pow5mult+0xa0>
 800d2fc:	6820      	ldr	r0, [r4, #0]
 800d2fe:	b938      	cbnz	r0, 800d310 <__pow5mult+0x9c>
 800d300:	4622      	mov	r2, r4
 800d302:	4621      	mov	r1, r4
 800d304:	4638      	mov	r0, r7
 800d306:	f7ff ff13 	bl	800d130 <__multiply>
 800d30a:	6020      	str	r0, [r4, #0]
 800d30c:	f8c0 9000 	str.w	r9, [r0]
 800d310:	4604      	mov	r4, r0
 800d312:	e7e4      	b.n	800d2de <__pow5mult+0x6a>
 800d314:	4630      	mov	r0, r6
 800d316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d31a:	bf00      	nop
 800d31c:	0800df00 	.word	0x0800df00
 800d320:	0800ddcd 	.word	0x0800ddcd
 800d324:	0800de4d 	.word	0x0800de4d

0800d328 <__lshift>:
 800d328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d32c:	460c      	mov	r4, r1
 800d32e:	6849      	ldr	r1, [r1, #4]
 800d330:	6923      	ldr	r3, [r4, #16]
 800d332:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d336:	68a3      	ldr	r3, [r4, #8]
 800d338:	4607      	mov	r7, r0
 800d33a:	4691      	mov	r9, r2
 800d33c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d340:	f108 0601 	add.w	r6, r8, #1
 800d344:	42b3      	cmp	r3, r6
 800d346:	db0b      	blt.n	800d360 <__lshift+0x38>
 800d348:	4638      	mov	r0, r7
 800d34a:	f7ff fde7 	bl	800cf1c <_Balloc>
 800d34e:	4605      	mov	r5, r0
 800d350:	b948      	cbnz	r0, 800d366 <__lshift+0x3e>
 800d352:	4602      	mov	r2, r0
 800d354:	4b28      	ldr	r3, [pc, #160]	@ (800d3f8 <__lshift+0xd0>)
 800d356:	4829      	ldr	r0, [pc, #164]	@ (800d3fc <__lshift+0xd4>)
 800d358:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d35c:	f000 fbd8 	bl	800db10 <__assert_func>
 800d360:	3101      	adds	r1, #1
 800d362:	005b      	lsls	r3, r3, #1
 800d364:	e7ee      	b.n	800d344 <__lshift+0x1c>
 800d366:	2300      	movs	r3, #0
 800d368:	f100 0114 	add.w	r1, r0, #20
 800d36c:	f100 0210 	add.w	r2, r0, #16
 800d370:	4618      	mov	r0, r3
 800d372:	4553      	cmp	r3, sl
 800d374:	db33      	blt.n	800d3de <__lshift+0xb6>
 800d376:	6920      	ldr	r0, [r4, #16]
 800d378:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d37c:	f104 0314 	add.w	r3, r4, #20
 800d380:	f019 091f 	ands.w	r9, r9, #31
 800d384:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d388:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d38c:	d02b      	beq.n	800d3e6 <__lshift+0xbe>
 800d38e:	f1c9 0e20 	rsb	lr, r9, #32
 800d392:	468a      	mov	sl, r1
 800d394:	2200      	movs	r2, #0
 800d396:	6818      	ldr	r0, [r3, #0]
 800d398:	fa00 f009 	lsl.w	r0, r0, r9
 800d39c:	4310      	orrs	r0, r2
 800d39e:	f84a 0b04 	str.w	r0, [sl], #4
 800d3a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3a6:	459c      	cmp	ip, r3
 800d3a8:	fa22 f20e 	lsr.w	r2, r2, lr
 800d3ac:	d8f3      	bhi.n	800d396 <__lshift+0x6e>
 800d3ae:	ebac 0304 	sub.w	r3, ip, r4
 800d3b2:	3b15      	subs	r3, #21
 800d3b4:	f023 0303 	bic.w	r3, r3, #3
 800d3b8:	3304      	adds	r3, #4
 800d3ba:	f104 0015 	add.w	r0, r4, #21
 800d3be:	4560      	cmp	r0, ip
 800d3c0:	bf88      	it	hi
 800d3c2:	2304      	movhi	r3, #4
 800d3c4:	50ca      	str	r2, [r1, r3]
 800d3c6:	b10a      	cbz	r2, 800d3cc <__lshift+0xa4>
 800d3c8:	f108 0602 	add.w	r6, r8, #2
 800d3cc:	3e01      	subs	r6, #1
 800d3ce:	4638      	mov	r0, r7
 800d3d0:	612e      	str	r6, [r5, #16]
 800d3d2:	4621      	mov	r1, r4
 800d3d4:	f7ff fde2 	bl	800cf9c <_Bfree>
 800d3d8:	4628      	mov	r0, r5
 800d3da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3de:	f842 0f04 	str.w	r0, [r2, #4]!
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	e7c5      	b.n	800d372 <__lshift+0x4a>
 800d3e6:	3904      	subs	r1, #4
 800d3e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800d3f0:	459c      	cmp	ip, r3
 800d3f2:	d8f9      	bhi.n	800d3e8 <__lshift+0xc0>
 800d3f4:	e7ea      	b.n	800d3cc <__lshift+0xa4>
 800d3f6:	bf00      	nop
 800d3f8:	0800de3c 	.word	0x0800de3c
 800d3fc:	0800de4d 	.word	0x0800de4d

0800d400 <__mcmp>:
 800d400:	690a      	ldr	r2, [r1, #16]
 800d402:	4603      	mov	r3, r0
 800d404:	6900      	ldr	r0, [r0, #16]
 800d406:	1a80      	subs	r0, r0, r2
 800d408:	b530      	push	{r4, r5, lr}
 800d40a:	d10e      	bne.n	800d42a <__mcmp+0x2a>
 800d40c:	3314      	adds	r3, #20
 800d40e:	3114      	adds	r1, #20
 800d410:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d414:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d418:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d41c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d420:	4295      	cmp	r5, r2
 800d422:	d003      	beq.n	800d42c <__mcmp+0x2c>
 800d424:	d205      	bcs.n	800d432 <__mcmp+0x32>
 800d426:	f04f 30ff 	mov.w	r0, #4294967295
 800d42a:	bd30      	pop	{r4, r5, pc}
 800d42c:	42a3      	cmp	r3, r4
 800d42e:	d3f3      	bcc.n	800d418 <__mcmp+0x18>
 800d430:	e7fb      	b.n	800d42a <__mcmp+0x2a>
 800d432:	2001      	movs	r0, #1
 800d434:	e7f9      	b.n	800d42a <__mcmp+0x2a>
	...

0800d438 <__mdiff>:
 800d438:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d43c:	4689      	mov	r9, r1
 800d43e:	4606      	mov	r6, r0
 800d440:	4611      	mov	r1, r2
 800d442:	4648      	mov	r0, r9
 800d444:	4614      	mov	r4, r2
 800d446:	f7ff ffdb 	bl	800d400 <__mcmp>
 800d44a:	1e05      	subs	r5, r0, #0
 800d44c:	d112      	bne.n	800d474 <__mdiff+0x3c>
 800d44e:	4629      	mov	r1, r5
 800d450:	4630      	mov	r0, r6
 800d452:	f7ff fd63 	bl	800cf1c <_Balloc>
 800d456:	4602      	mov	r2, r0
 800d458:	b928      	cbnz	r0, 800d466 <__mdiff+0x2e>
 800d45a:	4b3f      	ldr	r3, [pc, #252]	@ (800d558 <__mdiff+0x120>)
 800d45c:	f240 2137 	movw	r1, #567	@ 0x237
 800d460:	483e      	ldr	r0, [pc, #248]	@ (800d55c <__mdiff+0x124>)
 800d462:	f000 fb55 	bl	800db10 <__assert_func>
 800d466:	2301      	movs	r3, #1
 800d468:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d46c:	4610      	mov	r0, r2
 800d46e:	b003      	add	sp, #12
 800d470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d474:	bfbc      	itt	lt
 800d476:	464b      	movlt	r3, r9
 800d478:	46a1      	movlt	r9, r4
 800d47a:	4630      	mov	r0, r6
 800d47c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d480:	bfba      	itte	lt
 800d482:	461c      	movlt	r4, r3
 800d484:	2501      	movlt	r5, #1
 800d486:	2500      	movge	r5, #0
 800d488:	f7ff fd48 	bl	800cf1c <_Balloc>
 800d48c:	4602      	mov	r2, r0
 800d48e:	b918      	cbnz	r0, 800d498 <__mdiff+0x60>
 800d490:	4b31      	ldr	r3, [pc, #196]	@ (800d558 <__mdiff+0x120>)
 800d492:	f240 2145 	movw	r1, #581	@ 0x245
 800d496:	e7e3      	b.n	800d460 <__mdiff+0x28>
 800d498:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d49c:	6926      	ldr	r6, [r4, #16]
 800d49e:	60c5      	str	r5, [r0, #12]
 800d4a0:	f109 0310 	add.w	r3, r9, #16
 800d4a4:	f109 0514 	add.w	r5, r9, #20
 800d4a8:	f104 0e14 	add.w	lr, r4, #20
 800d4ac:	f100 0b14 	add.w	fp, r0, #20
 800d4b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d4b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d4b8:	9301      	str	r3, [sp, #4]
 800d4ba:	46d9      	mov	r9, fp
 800d4bc:	f04f 0c00 	mov.w	ip, #0
 800d4c0:	9b01      	ldr	r3, [sp, #4]
 800d4c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d4c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d4ca:	9301      	str	r3, [sp, #4]
 800d4cc:	fa1f f38a 	uxth.w	r3, sl
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	b283      	uxth	r3, r0
 800d4d4:	1acb      	subs	r3, r1, r3
 800d4d6:	0c00      	lsrs	r0, r0, #16
 800d4d8:	4463      	add	r3, ip
 800d4da:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d4de:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d4e2:	b29b      	uxth	r3, r3
 800d4e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d4e8:	4576      	cmp	r6, lr
 800d4ea:	f849 3b04 	str.w	r3, [r9], #4
 800d4ee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d4f2:	d8e5      	bhi.n	800d4c0 <__mdiff+0x88>
 800d4f4:	1b33      	subs	r3, r6, r4
 800d4f6:	3b15      	subs	r3, #21
 800d4f8:	f023 0303 	bic.w	r3, r3, #3
 800d4fc:	3415      	adds	r4, #21
 800d4fe:	3304      	adds	r3, #4
 800d500:	42a6      	cmp	r6, r4
 800d502:	bf38      	it	cc
 800d504:	2304      	movcc	r3, #4
 800d506:	441d      	add	r5, r3
 800d508:	445b      	add	r3, fp
 800d50a:	461e      	mov	r6, r3
 800d50c:	462c      	mov	r4, r5
 800d50e:	4544      	cmp	r4, r8
 800d510:	d30e      	bcc.n	800d530 <__mdiff+0xf8>
 800d512:	f108 0103 	add.w	r1, r8, #3
 800d516:	1b49      	subs	r1, r1, r5
 800d518:	f021 0103 	bic.w	r1, r1, #3
 800d51c:	3d03      	subs	r5, #3
 800d51e:	45a8      	cmp	r8, r5
 800d520:	bf38      	it	cc
 800d522:	2100      	movcc	r1, #0
 800d524:	440b      	add	r3, r1
 800d526:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d52a:	b191      	cbz	r1, 800d552 <__mdiff+0x11a>
 800d52c:	6117      	str	r7, [r2, #16]
 800d52e:	e79d      	b.n	800d46c <__mdiff+0x34>
 800d530:	f854 1b04 	ldr.w	r1, [r4], #4
 800d534:	46e6      	mov	lr, ip
 800d536:	0c08      	lsrs	r0, r1, #16
 800d538:	fa1c fc81 	uxtah	ip, ip, r1
 800d53c:	4471      	add	r1, lr
 800d53e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d542:	b289      	uxth	r1, r1
 800d544:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d548:	f846 1b04 	str.w	r1, [r6], #4
 800d54c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d550:	e7dd      	b.n	800d50e <__mdiff+0xd6>
 800d552:	3f01      	subs	r7, #1
 800d554:	e7e7      	b.n	800d526 <__mdiff+0xee>
 800d556:	bf00      	nop
 800d558:	0800de3c 	.word	0x0800de3c
 800d55c:	0800de4d 	.word	0x0800de4d

0800d560 <__d2b>:
 800d560:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d564:	460f      	mov	r7, r1
 800d566:	2101      	movs	r1, #1
 800d568:	ec59 8b10 	vmov	r8, r9, d0
 800d56c:	4616      	mov	r6, r2
 800d56e:	f7ff fcd5 	bl	800cf1c <_Balloc>
 800d572:	4604      	mov	r4, r0
 800d574:	b930      	cbnz	r0, 800d584 <__d2b+0x24>
 800d576:	4602      	mov	r2, r0
 800d578:	4b23      	ldr	r3, [pc, #140]	@ (800d608 <__d2b+0xa8>)
 800d57a:	4824      	ldr	r0, [pc, #144]	@ (800d60c <__d2b+0xac>)
 800d57c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d580:	f000 fac6 	bl	800db10 <__assert_func>
 800d584:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d588:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d58c:	b10d      	cbz	r5, 800d592 <__d2b+0x32>
 800d58e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d592:	9301      	str	r3, [sp, #4]
 800d594:	f1b8 0300 	subs.w	r3, r8, #0
 800d598:	d023      	beq.n	800d5e2 <__d2b+0x82>
 800d59a:	4668      	mov	r0, sp
 800d59c:	9300      	str	r3, [sp, #0]
 800d59e:	f7ff fd84 	bl	800d0aa <__lo0bits>
 800d5a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d5a6:	b1d0      	cbz	r0, 800d5de <__d2b+0x7e>
 800d5a8:	f1c0 0320 	rsb	r3, r0, #32
 800d5ac:	fa02 f303 	lsl.w	r3, r2, r3
 800d5b0:	430b      	orrs	r3, r1
 800d5b2:	40c2      	lsrs	r2, r0
 800d5b4:	6163      	str	r3, [r4, #20]
 800d5b6:	9201      	str	r2, [sp, #4]
 800d5b8:	9b01      	ldr	r3, [sp, #4]
 800d5ba:	61a3      	str	r3, [r4, #24]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	bf0c      	ite	eq
 800d5c0:	2201      	moveq	r2, #1
 800d5c2:	2202      	movne	r2, #2
 800d5c4:	6122      	str	r2, [r4, #16]
 800d5c6:	b1a5      	cbz	r5, 800d5f2 <__d2b+0x92>
 800d5c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d5cc:	4405      	add	r5, r0
 800d5ce:	603d      	str	r5, [r7, #0]
 800d5d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d5d4:	6030      	str	r0, [r6, #0]
 800d5d6:	4620      	mov	r0, r4
 800d5d8:	b003      	add	sp, #12
 800d5da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5de:	6161      	str	r1, [r4, #20]
 800d5e0:	e7ea      	b.n	800d5b8 <__d2b+0x58>
 800d5e2:	a801      	add	r0, sp, #4
 800d5e4:	f7ff fd61 	bl	800d0aa <__lo0bits>
 800d5e8:	9b01      	ldr	r3, [sp, #4]
 800d5ea:	6163      	str	r3, [r4, #20]
 800d5ec:	3020      	adds	r0, #32
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	e7e8      	b.n	800d5c4 <__d2b+0x64>
 800d5f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d5f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d5fa:	6038      	str	r0, [r7, #0]
 800d5fc:	6918      	ldr	r0, [r3, #16]
 800d5fe:	f7ff fd35 	bl	800d06c <__hi0bits>
 800d602:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d606:	e7e5      	b.n	800d5d4 <__d2b+0x74>
 800d608:	0800de3c 	.word	0x0800de3c
 800d60c:	0800de4d 	.word	0x0800de4d

0800d610 <__sfputc_r>:
 800d610:	6893      	ldr	r3, [r2, #8]
 800d612:	3b01      	subs	r3, #1
 800d614:	2b00      	cmp	r3, #0
 800d616:	b410      	push	{r4}
 800d618:	6093      	str	r3, [r2, #8]
 800d61a:	da08      	bge.n	800d62e <__sfputc_r+0x1e>
 800d61c:	6994      	ldr	r4, [r2, #24]
 800d61e:	42a3      	cmp	r3, r4
 800d620:	db01      	blt.n	800d626 <__sfputc_r+0x16>
 800d622:	290a      	cmp	r1, #10
 800d624:	d103      	bne.n	800d62e <__sfputc_r+0x1e>
 800d626:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d62a:	f7fe bcb0 	b.w	800bf8e <__swbuf_r>
 800d62e:	6813      	ldr	r3, [r2, #0]
 800d630:	1c58      	adds	r0, r3, #1
 800d632:	6010      	str	r0, [r2, #0]
 800d634:	7019      	strb	r1, [r3, #0]
 800d636:	4608      	mov	r0, r1
 800d638:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d63c:	4770      	bx	lr

0800d63e <__sfputs_r>:
 800d63e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d640:	4606      	mov	r6, r0
 800d642:	460f      	mov	r7, r1
 800d644:	4614      	mov	r4, r2
 800d646:	18d5      	adds	r5, r2, r3
 800d648:	42ac      	cmp	r4, r5
 800d64a:	d101      	bne.n	800d650 <__sfputs_r+0x12>
 800d64c:	2000      	movs	r0, #0
 800d64e:	e007      	b.n	800d660 <__sfputs_r+0x22>
 800d650:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d654:	463a      	mov	r2, r7
 800d656:	4630      	mov	r0, r6
 800d658:	f7ff ffda 	bl	800d610 <__sfputc_r>
 800d65c:	1c43      	adds	r3, r0, #1
 800d65e:	d1f3      	bne.n	800d648 <__sfputs_r+0xa>
 800d660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d664 <_vfiprintf_r>:
 800d664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d668:	460d      	mov	r5, r1
 800d66a:	b09d      	sub	sp, #116	@ 0x74
 800d66c:	4614      	mov	r4, r2
 800d66e:	4698      	mov	r8, r3
 800d670:	4606      	mov	r6, r0
 800d672:	b118      	cbz	r0, 800d67c <_vfiprintf_r+0x18>
 800d674:	6a03      	ldr	r3, [r0, #32]
 800d676:	b90b      	cbnz	r3, 800d67c <_vfiprintf_r+0x18>
 800d678:	f7fe fba0 	bl	800bdbc <__sinit>
 800d67c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d67e:	07d9      	lsls	r1, r3, #31
 800d680:	d405      	bmi.n	800d68e <_vfiprintf_r+0x2a>
 800d682:	89ab      	ldrh	r3, [r5, #12]
 800d684:	059a      	lsls	r2, r3, #22
 800d686:	d402      	bmi.n	800d68e <_vfiprintf_r+0x2a>
 800d688:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d68a:	f7fe fda2 	bl	800c1d2 <__retarget_lock_acquire_recursive>
 800d68e:	89ab      	ldrh	r3, [r5, #12]
 800d690:	071b      	lsls	r3, r3, #28
 800d692:	d501      	bpl.n	800d698 <_vfiprintf_r+0x34>
 800d694:	692b      	ldr	r3, [r5, #16]
 800d696:	b99b      	cbnz	r3, 800d6c0 <_vfiprintf_r+0x5c>
 800d698:	4629      	mov	r1, r5
 800d69a:	4630      	mov	r0, r6
 800d69c:	f7fe fcb6 	bl	800c00c <__swsetup_r>
 800d6a0:	b170      	cbz	r0, 800d6c0 <_vfiprintf_r+0x5c>
 800d6a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d6a4:	07dc      	lsls	r4, r3, #31
 800d6a6:	d504      	bpl.n	800d6b2 <_vfiprintf_r+0x4e>
 800d6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6ac:	b01d      	add	sp, #116	@ 0x74
 800d6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b2:	89ab      	ldrh	r3, [r5, #12]
 800d6b4:	0598      	lsls	r0, r3, #22
 800d6b6:	d4f7      	bmi.n	800d6a8 <_vfiprintf_r+0x44>
 800d6b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d6ba:	f7fe fd8b 	bl	800c1d4 <__retarget_lock_release_recursive>
 800d6be:	e7f3      	b.n	800d6a8 <_vfiprintf_r+0x44>
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6c4:	2320      	movs	r3, #32
 800d6c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d6ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6ce:	2330      	movs	r3, #48	@ 0x30
 800d6d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d880 <_vfiprintf_r+0x21c>
 800d6d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d6d8:	f04f 0901 	mov.w	r9, #1
 800d6dc:	4623      	mov	r3, r4
 800d6de:	469a      	mov	sl, r3
 800d6e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6e4:	b10a      	cbz	r2, 800d6ea <_vfiprintf_r+0x86>
 800d6e6:	2a25      	cmp	r2, #37	@ 0x25
 800d6e8:	d1f9      	bne.n	800d6de <_vfiprintf_r+0x7a>
 800d6ea:	ebba 0b04 	subs.w	fp, sl, r4
 800d6ee:	d00b      	beq.n	800d708 <_vfiprintf_r+0xa4>
 800d6f0:	465b      	mov	r3, fp
 800d6f2:	4622      	mov	r2, r4
 800d6f4:	4629      	mov	r1, r5
 800d6f6:	4630      	mov	r0, r6
 800d6f8:	f7ff ffa1 	bl	800d63e <__sfputs_r>
 800d6fc:	3001      	adds	r0, #1
 800d6fe:	f000 80a7 	beq.w	800d850 <_vfiprintf_r+0x1ec>
 800d702:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d704:	445a      	add	r2, fp
 800d706:	9209      	str	r2, [sp, #36]	@ 0x24
 800d708:	f89a 3000 	ldrb.w	r3, [sl]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	f000 809f 	beq.w	800d850 <_vfiprintf_r+0x1ec>
 800d712:	2300      	movs	r3, #0
 800d714:	f04f 32ff 	mov.w	r2, #4294967295
 800d718:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d71c:	f10a 0a01 	add.w	sl, sl, #1
 800d720:	9304      	str	r3, [sp, #16]
 800d722:	9307      	str	r3, [sp, #28]
 800d724:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d728:	931a      	str	r3, [sp, #104]	@ 0x68
 800d72a:	4654      	mov	r4, sl
 800d72c:	2205      	movs	r2, #5
 800d72e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d732:	4853      	ldr	r0, [pc, #332]	@ (800d880 <_vfiprintf_r+0x21c>)
 800d734:	f7f2 fd4c 	bl	80001d0 <memchr>
 800d738:	9a04      	ldr	r2, [sp, #16]
 800d73a:	b9d8      	cbnz	r0, 800d774 <_vfiprintf_r+0x110>
 800d73c:	06d1      	lsls	r1, r2, #27
 800d73e:	bf44      	itt	mi
 800d740:	2320      	movmi	r3, #32
 800d742:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d746:	0713      	lsls	r3, r2, #28
 800d748:	bf44      	itt	mi
 800d74a:	232b      	movmi	r3, #43	@ 0x2b
 800d74c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d750:	f89a 3000 	ldrb.w	r3, [sl]
 800d754:	2b2a      	cmp	r3, #42	@ 0x2a
 800d756:	d015      	beq.n	800d784 <_vfiprintf_r+0x120>
 800d758:	9a07      	ldr	r2, [sp, #28]
 800d75a:	4654      	mov	r4, sl
 800d75c:	2000      	movs	r0, #0
 800d75e:	f04f 0c0a 	mov.w	ip, #10
 800d762:	4621      	mov	r1, r4
 800d764:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d768:	3b30      	subs	r3, #48	@ 0x30
 800d76a:	2b09      	cmp	r3, #9
 800d76c:	d94b      	bls.n	800d806 <_vfiprintf_r+0x1a2>
 800d76e:	b1b0      	cbz	r0, 800d79e <_vfiprintf_r+0x13a>
 800d770:	9207      	str	r2, [sp, #28]
 800d772:	e014      	b.n	800d79e <_vfiprintf_r+0x13a>
 800d774:	eba0 0308 	sub.w	r3, r0, r8
 800d778:	fa09 f303 	lsl.w	r3, r9, r3
 800d77c:	4313      	orrs	r3, r2
 800d77e:	9304      	str	r3, [sp, #16]
 800d780:	46a2      	mov	sl, r4
 800d782:	e7d2      	b.n	800d72a <_vfiprintf_r+0xc6>
 800d784:	9b03      	ldr	r3, [sp, #12]
 800d786:	1d19      	adds	r1, r3, #4
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	9103      	str	r1, [sp, #12]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	bfbb      	ittet	lt
 800d790:	425b      	neglt	r3, r3
 800d792:	f042 0202 	orrlt.w	r2, r2, #2
 800d796:	9307      	strge	r3, [sp, #28]
 800d798:	9307      	strlt	r3, [sp, #28]
 800d79a:	bfb8      	it	lt
 800d79c:	9204      	strlt	r2, [sp, #16]
 800d79e:	7823      	ldrb	r3, [r4, #0]
 800d7a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7a2:	d10a      	bne.n	800d7ba <_vfiprintf_r+0x156>
 800d7a4:	7863      	ldrb	r3, [r4, #1]
 800d7a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7a8:	d132      	bne.n	800d810 <_vfiprintf_r+0x1ac>
 800d7aa:	9b03      	ldr	r3, [sp, #12]
 800d7ac:	1d1a      	adds	r2, r3, #4
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	9203      	str	r2, [sp, #12]
 800d7b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d7b6:	3402      	adds	r4, #2
 800d7b8:	9305      	str	r3, [sp, #20]
 800d7ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d890 <_vfiprintf_r+0x22c>
 800d7be:	7821      	ldrb	r1, [r4, #0]
 800d7c0:	2203      	movs	r2, #3
 800d7c2:	4650      	mov	r0, sl
 800d7c4:	f7f2 fd04 	bl	80001d0 <memchr>
 800d7c8:	b138      	cbz	r0, 800d7da <_vfiprintf_r+0x176>
 800d7ca:	9b04      	ldr	r3, [sp, #16]
 800d7cc:	eba0 000a 	sub.w	r0, r0, sl
 800d7d0:	2240      	movs	r2, #64	@ 0x40
 800d7d2:	4082      	lsls	r2, r0
 800d7d4:	4313      	orrs	r3, r2
 800d7d6:	3401      	adds	r4, #1
 800d7d8:	9304      	str	r3, [sp, #16]
 800d7da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7de:	4829      	ldr	r0, [pc, #164]	@ (800d884 <_vfiprintf_r+0x220>)
 800d7e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d7e4:	2206      	movs	r2, #6
 800d7e6:	f7f2 fcf3 	bl	80001d0 <memchr>
 800d7ea:	2800      	cmp	r0, #0
 800d7ec:	d03f      	beq.n	800d86e <_vfiprintf_r+0x20a>
 800d7ee:	4b26      	ldr	r3, [pc, #152]	@ (800d888 <_vfiprintf_r+0x224>)
 800d7f0:	bb1b      	cbnz	r3, 800d83a <_vfiprintf_r+0x1d6>
 800d7f2:	9b03      	ldr	r3, [sp, #12]
 800d7f4:	3307      	adds	r3, #7
 800d7f6:	f023 0307 	bic.w	r3, r3, #7
 800d7fa:	3308      	adds	r3, #8
 800d7fc:	9303      	str	r3, [sp, #12]
 800d7fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d800:	443b      	add	r3, r7
 800d802:	9309      	str	r3, [sp, #36]	@ 0x24
 800d804:	e76a      	b.n	800d6dc <_vfiprintf_r+0x78>
 800d806:	fb0c 3202 	mla	r2, ip, r2, r3
 800d80a:	460c      	mov	r4, r1
 800d80c:	2001      	movs	r0, #1
 800d80e:	e7a8      	b.n	800d762 <_vfiprintf_r+0xfe>
 800d810:	2300      	movs	r3, #0
 800d812:	3401      	adds	r4, #1
 800d814:	9305      	str	r3, [sp, #20]
 800d816:	4619      	mov	r1, r3
 800d818:	f04f 0c0a 	mov.w	ip, #10
 800d81c:	4620      	mov	r0, r4
 800d81e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d822:	3a30      	subs	r2, #48	@ 0x30
 800d824:	2a09      	cmp	r2, #9
 800d826:	d903      	bls.n	800d830 <_vfiprintf_r+0x1cc>
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d0c6      	beq.n	800d7ba <_vfiprintf_r+0x156>
 800d82c:	9105      	str	r1, [sp, #20]
 800d82e:	e7c4      	b.n	800d7ba <_vfiprintf_r+0x156>
 800d830:	fb0c 2101 	mla	r1, ip, r1, r2
 800d834:	4604      	mov	r4, r0
 800d836:	2301      	movs	r3, #1
 800d838:	e7f0      	b.n	800d81c <_vfiprintf_r+0x1b8>
 800d83a:	ab03      	add	r3, sp, #12
 800d83c:	9300      	str	r3, [sp, #0]
 800d83e:	462a      	mov	r2, r5
 800d840:	4b12      	ldr	r3, [pc, #72]	@ (800d88c <_vfiprintf_r+0x228>)
 800d842:	a904      	add	r1, sp, #16
 800d844:	4630      	mov	r0, r6
 800d846:	f7fd fe77 	bl	800b538 <_printf_float>
 800d84a:	4607      	mov	r7, r0
 800d84c:	1c78      	adds	r0, r7, #1
 800d84e:	d1d6      	bne.n	800d7fe <_vfiprintf_r+0x19a>
 800d850:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d852:	07d9      	lsls	r1, r3, #31
 800d854:	d405      	bmi.n	800d862 <_vfiprintf_r+0x1fe>
 800d856:	89ab      	ldrh	r3, [r5, #12]
 800d858:	059a      	lsls	r2, r3, #22
 800d85a:	d402      	bmi.n	800d862 <_vfiprintf_r+0x1fe>
 800d85c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d85e:	f7fe fcb9 	bl	800c1d4 <__retarget_lock_release_recursive>
 800d862:	89ab      	ldrh	r3, [r5, #12]
 800d864:	065b      	lsls	r3, r3, #25
 800d866:	f53f af1f 	bmi.w	800d6a8 <_vfiprintf_r+0x44>
 800d86a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d86c:	e71e      	b.n	800d6ac <_vfiprintf_r+0x48>
 800d86e:	ab03      	add	r3, sp, #12
 800d870:	9300      	str	r3, [sp, #0]
 800d872:	462a      	mov	r2, r5
 800d874:	4b05      	ldr	r3, [pc, #20]	@ (800d88c <_vfiprintf_r+0x228>)
 800d876:	a904      	add	r1, sp, #16
 800d878:	4630      	mov	r0, r6
 800d87a:	f7fe f8f5 	bl	800ba68 <_printf_i>
 800d87e:	e7e4      	b.n	800d84a <_vfiprintf_r+0x1e6>
 800d880:	0800dea6 	.word	0x0800dea6
 800d884:	0800deb0 	.word	0x0800deb0
 800d888:	0800b539 	.word	0x0800b539
 800d88c:	0800d63f 	.word	0x0800d63f
 800d890:	0800deac 	.word	0x0800deac

0800d894 <__sflush_r>:
 800d894:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d89c:	0716      	lsls	r6, r2, #28
 800d89e:	4605      	mov	r5, r0
 800d8a0:	460c      	mov	r4, r1
 800d8a2:	d454      	bmi.n	800d94e <__sflush_r+0xba>
 800d8a4:	684b      	ldr	r3, [r1, #4]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	dc02      	bgt.n	800d8b0 <__sflush_r+0x1c>
 800d8aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	dd48      	ble.n	800d942 <__sflush_r+0xae>
 800d8b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d8b2:	2e00      	cmp	r6, #0
 800d8b4:	d045      	beq.n	800d942 <__sflush_r+0xae>
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d8bc:	682f      	ldr	r7, [r5, #0]
 800d8be:	6a21      	ldr	r1, [r4, #32]
 800d8c0:	602b      	str	r3, [r5, #0]
 800d8c2:	d030      	beq.n	800d926 <__sflush_r+0x92>
 800d8c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d8c6:	89a3      	ldrh	r3, [r4, #12]
 800d8c8:	0759      	lsls	r1, r3, #29
 800d8ca:	d505      	bpl.n	800d8d8 <__sflush_r+0x44>
 800d8cc:	6863      	ldr	r3, [r4, #4]
 800d8ce:	1ad2      	subs	r2, r2, r3
 800d8d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d8d2:	b10b      	cbz	r3, 800d8d8 <__sflush_r+0x44>
 800d8d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d8d6:	1ad2      	subs	r2, r2, r3
 800d8d8:	2300      	movs	r3, #0
 800d8da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d8dc:	6a21      	ldr	r1, [r4, #32]
 800d8de:	4628      	mov	r0, r5
 800d8e0:	47b0      	blx	r6
 800d8e2:	1c43      	adds	r3, r0, #1
 800d8e4:	89a3      	ldrh	r3, [r4, #12]
 800d8e6:	d106      	bne.n	800d8f6 <__sflush_r+0x62>
 800d8e8:	6829      	ldr	r1, [r5, #0]
 800d8ea:	291d      	cmp	r1, #29
 800d8ec:	d82b      	bhi.n	800d946 <__sflush_r+0xb2>
 800d8ee:	4a2a      	ldr	r2, [pc, #168]	@ (800d998 <__sflush_r+0x104>)
 800d8f0:	40ca      	lsrs	r2, r1
 800d8f2:	07d6      	lsls	r6, r2, #31
 800d8f4:	d527      	bpl.n	800d946 <__sflush_r+0xb2>
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	6062      	str	r2, [r4, #4]
 800d8fa:	04d9      	lsls	r1, r3, #19
 800d8fc:	6922      	ldr	r2, [r4, #16]
 800d8fe:	6022      	str	r2, [r4, #0]
 800d900:	d504      	bpl.n	800d90c <__sflush_r+0x78>
 800d902:	1c42      	adds	r2, r0, #1
 800d904:	d101      	bne.n	800d90a <__sflush_r+0x76>
 800d906:	682b      	ldr	r3, [r5, #0]
 800d908:	b903      	cbnz	r3, 800d90c <__sflush_r+0x78>
 800d90a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d90c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d90e:	602f      	str	r7, [r5, #0]
 800d910:	b1b9      	cbz	r1, 800d942 <__sflush_r+0xae>
 800d912:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d916:	4299      	cmp	r1, r3
 800d918:	d002      	beq.n	800d920 <__sflush_r+0x8c>
 800d91a:	4628      	mov	r0, r5
 800d91c:	f7ff fab4 	bl	800ce88 <_free_r>
 800d920:	2300      	movs	r3, #0
 800d922:	6363      	str	r3, [r4, #52]	@ 0x34
 800d924:	e00d      	b.n	800d942 <__sflush_r+0xae>
 800d926:	2301      	movs	r3, #1
 800d928:	4628      	mov	r0, r5
 800d92a:	47b0      	blx	r6
 800d92c:	4602      	mov	r2, r0
 800d92e:	1c50      	adds	r0, r2, #1
 800d930:	d1c9      	bne.n	800d8c6 <__sflush_r+0x32>
 800d932:	682b      	ldr	r3, [r5, #0]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d0c6      	beq.n	800d8c6 <__sflush_r+0x32>
 800d938:	2b1d      	cmp	r3, #29
 800d93a:	d001      	beq.n	800d940 <__sflush_r+0xac>
 800d93c:	2b16      	cmp	r3, #22
 800d93e:	d11e      	bne.n	800d97e <__sflush_r+0xea>
 800d940:	602f      	str	r7, [r5, #0]
 800d942:	2000      	movs	r0, #0
 800d944:	e022      	b.n	800d98c <__sflush_r+0xf8>
 800d946:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d94a:	b21b      	sxth	r3, r3
 800d94c:	e01b      	b.n	800d986 <__sflush_r+0xf2>
 800d94e:	690f      	ldr	r7, [r1, #16]
 800d950:	2f00      	cmp	r7, #0
 800d952:	d0f6      	beq.n	800d942 <__sflush_r+0xae>
 800d954:	0793      	lsls	r3, r2, #30
 800d956:	680e      	ldr	r6, [r1, #0]
 800d958:	bf08      	it	eq
 800d95a:	694b      	ldreq	r3, [r1, #20]
 800d95c:	600f      	str	r7, [r1, #0]
 800d95e:	bf18      	it	ne
 800d960:	2300      	movne	r3, #0
 800d962:	eba6 0807 	sub.w	r8, r6, r7
 800d966:	608b      	str	r3, [r1, #8]
 800d968:	f1b8 0f00 	cmp.w	r8, #0
 800d96c:	dde9      	ble.n	800d942 <__sflush_r+0xae>
 800d96e:	6a21      	ldr	r1, [r4, #32]
 800d970:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d972:	4643      	mov	r3, r8
 800d974:	463a      	mov	r2, r7
 800d976:	4628      	mov	r0, r5
 800d978:	47b0      	blx	r6
 800d97a:	2800      	cmp	r0, #0
 800d97c:	dc08      	bgt.n	800d990 <__sflush_r+0xfc>
 800d97e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d986:	81a3      	strh	r3, [r4, #12]
 800d988:	f04f 30ff 	mov.w	r0, #4294967295
 800d98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d990:	4407      	add	r7, r0
 800d992:	eba8 0800 	sub.w	r8, r8, r0
 800d996:	e7e7      	b.n	800d968 <__sflush_r+0xd4>
 800d998:	20400001 	.word	0x20400001

0800d99c <_fflush_r>:
 800d99c:	b538      	push	{r3, r4, r5, lr}
 800d99e:	690b      	ldr	r3, [r1, #16]
 800d9a0:	4605      	mov	r5, r0
 800d9a2:	460c      	mov	r4, r1
 800d9a4:	b913      	cbnz	r3, 800d9ac <_fflush_r+0x10>
 800d9a6:	2500      	movs	r5, #0
 800d9a8:	4628      	mov	r0, r5
 800d9aa:	bd38      	pop	{r3, r4, r5, pc}
 800d9ac:	b118      	cbz	r0, 800d9b6 <_fflush_r+0x1a>
 800d9ae:	6a03      	ldr	r3, [r0, #32]
 800d9b0:	b90b      	cbnz	r3, 800d9b6 <_fflush_r+0x1a>
 800d9b2:	f7fe fa03 	bl	800bdbc <__sinit>
 800d9b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d0f3      	beq.n	800d9a6 <_fflush_r+0xa>
 800d9be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d9c0:	07d0      	lsls	r0, r2, #31
 800d9c2:	d404      	bmi.n	800d9ce <_fflush_r+0x32>
 800d9c4:	0599      	lsls	r1, r3, #22
 800d9c6:	d402      	bmi.n	800d9ce <_fflush_r+0x32>
 800d9c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9ca:	f7fe fc02 	bl	800c1d2 <__retarget_lock_acquire_recursive>
 800d9ce:	4628      	mov	r0, r5
 800d9d0:	4621      	mov	r1, r4
 800d9d2:	f7ff ff5f 	bl	800d894 <__sflush_r>
 800d9d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9d8:	07da      	lsls	r2, r3, #31
 800d9da:	4605      	mov	r5, r0
 800d9dc:	d4e4      	bmi.n	800d9a8 <_fflush_r+0xc>
 800d9de:	89a3      	ldrh	r3, [r4, #12]
 800d9e0:	059b      	lsls	r3, r3, #22
 800d9e2:	d4e1      	bmi.n	800d9a8 <_fflush_r+0xc>
 800d9e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9e6:	f7fe fbf5 	bl	800c1d4 <__retarget_lock_release_recursive>
 800d9ea:	e7dd      	b.n	800d9a8 <_fflush_r+0xc>

0800d9ec <__swhatbuf_r>:
 800d9ec:	b570      	push	{r4, r5, r6, lr}
 800d9ee:	460c      	mov	r4, r1
 800d9f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9f4:	2900      	cmp	r1, #0
 800d9f6:	b096      	sub	sp, #88	@ 0x58
 800d9f8:	4615      	mov	r5, r2
 800d9fa:	461e      	mov	r6, r3
 800d9fc:	da0d      	bge.n	800da1a <__swhatbuf_r+0x2e>
 800d9fe:	89a3      	ldrh	r3, [r4, #12]
 800da00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800da04:	f04f 0100 	mov.w	r1, #0
 800da08:	bf14      	ite	ne
 800da0a:	2340      	movne	r3, #64	@ 0x40
 800da0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800da10:	2000      	movs	r0, #0
 800da12:	6031      	str	r1, [r6, #0]
 800da14:	602b      	str	r3, [r5, #0]
 800da16:	b016      	add	sp, #88	@ 0x58
 800da18:	bd70      	pop	{r4, r5, r6, pc}
 800da1a:	466a      	mov	r2, sp
 800da1c:	f000 f848 	bl	800dab0 <_fstat_r>
 800da20:	2800      	cmp	r0, #0
 800da22:	dbec      	blt.n	800d9fe <__swhatbuf_r+0x12>
 800da24:	9901      	ldr	r1, [sp, #4]
 800da26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800da2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800da2e:	4259      	negs	r1, r3
 800da30:	4159      	adcs	r1, r3
 800da32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da36:	e7eb      	b.n	800da10 <__swhatbuf_r+0x24>

0800da38 <__smakebuf_r>:
 800da38:	898b      	ldrh	r3, [r1, #12]
 800da3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da3c:	079d      	lsls	r5, r3, #30
 800da3e:	4606      	mov	r6, r0
 800da40:	460c      	mov	r4, r1
 800da42:	d507      	bpl.n	800da54 <__smakebuf_r+0x1c>
 800da44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800da48:	6023      	str	r3, [r4, #0]
 800da4a:	6123      	str	r3, [r4, #16]
 800da4c:	2301      	movs	r3, #1
 800da4e:	6163      	str	r3, [r4, #20]
 800da50:	b003      	add	sp, #12
 800da52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da54:	ab01      	add	r3, sp, #4
 800da56:	466a      	mov	r2, sp
 800da58:	f7ff ffc8 	bl	800d9ec <__swhatbuf_r>
 800da5c:	9f00      	ldr	r7, [sp, #0]
 800da5e:	4605      	mov	r5, r0
 800da60:	4639      	mov	r1, r7
 800da62:	4630      	mov	r0, r6
 800da64:	f7fd fc3c 	bl	800b2e0 <_malloc_r>
 800da68:	b948      	cbnz	r0, 800da7e <__smakebuf_r+0x46>
 800da6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da6e:	059a      	lsls	r2, r3, #22
 800da70:	d4ee      	bmi.n	800da50 <__smakebuf_r+0x18>
 800da72:	f023 0303 	bic.w	r3, r3, #3
 800da76:	f043 0302 	orr.w	r3, r3, #2
 800da7a:	81a3      	strh	r3, [r4, #12]
 800da7c:	e7e2      	b.n	800da44 <__smakebuf_r+0xc>
 800da7e:	89a3      	ldrh	r3, [r4, #12]
 800da80:	6020      	str	r0, [r4, #0]
 800da82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da86:	81a3      	strh	r3, [r4, #12]
 800da88:	9b01      	ldr	r3, [sp, #4]
 800da8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800da8e:	b15b      	cbz	r3, 800daa8 <__smakebuf_r+0x70>
 800da90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da94:	4630      	mov	r0, r6
 800da96:	f000 f81d 	bl	800dad4 <_isatty_r>
 800da9a:	b128      	cbz	r0, 800daa8 <__smakebuf_r+0x70>
 800da9c:	89a3      	ldrh	r3, [r4, #12]
 800da9e:	f023 0303 	bic.w	r3, r3, #3
 800daa2:	f043 0301 	orr.w	r3, r3, #1
 800daa6:	81a3      	strh	r3, [r4, #12]
 800daa8:	89a3      	ldrh	r3, [r4, #12]
 800daaa:	431d      	orrs	r5, r3
 800daac:	81a5      	strh	r5, [r4, #12]
 800daae:	e7cf      	b.n	800da50 <__smakebuf_r+0x18>

0800dab0 <_fstat_r>:
 800dab0:	b538      	push	{r3, r4, r5, lr}
 800dab2:	4d07      	ldr	r5, [pc, #28]	@ (800dad0 <_fstat_r+0x20>)
 800dab4:	2300      	movs	r3, #0
 800dab6:	4604      	mov	r4, r0
 800dab8:	4608      	mov	r0, r1
 800daba:	4611      	mov	r1, r2
 800dabc:	602b      	str	r3, [r5, #0]
 800dabe:	f7f4 f93d 	bl	8001d3c <_fstat>
 800dac2:	1c43      	adds	r3, r0, #1
 800dac4:	d102      	bne.n	800dacc <_fstat_r+0x1c>
 800dac6:	682b      	ldr	r3, [r5, #0]
 800dac8:	b103      	cbz	r3, 800dacc <_fstat_r+0x1c>
 800daca:	6023      	str	r3, [r4, #0]
 800dacc:	bd38      	pop	{r3, r4, r5, pc}
 800dace:	bf00      	nop
 800dad0:	20000d0c 	.word	0x20000d0c

0800dad4 <_isatty_r>:
 800dad4:	b538      	push	{r3, r4, r5, lr}
 800dad6:	4d06      	ldr	r5, [pc, #24]	@ (800daf0 <_isatty_r+0x1c>)
 800dad8:	2300      	movs	r3, #0
 800dada:	4604      	mov	r4, r0
 800dadc:	4608      	mov	r0, r1
 800dade:	602b      	str	r3, [r5, #0]
 800dae0:	f7f4 f93c 	bl	8001d5c <_isatty>
 800dae4:	1c43      	adds	r3, r0, #1
 800dae6:	d102      	bne.n	800daee <_isatty_r+0x1a>
 800dae8:	682b      	ldr	r3, [r5, #0]
 800daea:	b103      	cbz	r3, 800daee <_isatty_r+0x1a>
 800daec:	6023      	str	r3, [r4, #0]
 800daee:	bd38      	pop	{r3, r4, r5, pc}
 800daf0:	20000d0c 	.word	0x20000d0c

0800daf4 <memcpy>:
 800daf4:	440a      	add	r2, r1
 800daf6:	4291      	cmp	r1, r2
 800daf8:	f100 33ff 	add.w	r3, r0, #4294967295
 800dafc:	d100      	bne.n	800db00 <memcpy+0xc>
 800dafe:	4770      	bx	lr
 800db00:	b510      	push	{r4, lr}
 800db02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db0a:	4291      	cmp	r1, r2
 800db0c:	d1f9      	bne.n	800db02 <memcpy+0xe>
 800db0e:	bd10      	pop	{r4, pc}

0800db10 <__assert_func>:
 800db10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db12:	4614      	mov	r4, r2
 800db14:	461a      	mov	r2, r3
 800db16:	4b09      	ldr	r3, [pc, #36]	@ (800db3c <__assert_func+0x2c>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	4605      	mov	r5, r0
 800db1c:	68d8      	ldr	r0, [r3, #12]
 800db1e:	b14c      	cbz	r4, 800db34 <__assert_func+0x24>
 800db20:	4b07      	ldr	r3, [pc, #28]	@ (800db40 <__assert_func+0x30>)
 800db22:	9100      	str	r1, [sp, #0]
 800db24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db28:	4906      	ldr	r1, [pc, #24]	@ (800db44 <__assert_func+0x34>)
 800db2a:	462b      	mov	r3, r5
 800db2c:	f000 f842 	bl	800dbb4 <fiprintf>
 800db30:	f000 f852 	bl	800dbd8 <abort>
 800db34:	4b04      	ldr	r3, [pc, #16]	@ (800db48 <__assert_func+0x38>)
 800db36:	461c      	mov	r4, r3
 800db38:	e7f3      	b.n	800db22 <__assert_func+0x12>
 800db3a:	bf00      	nop
 800db3c:	20000038 	.word	0x20000038
 800db40:	0800dec1 	.word	0x0800dec1
 800db44:	0800dece 	.word	0x0800dece
 800db48:	0800defc 	.word	0x0800defc

0800db4c <_calloc_r>:
 800db4c:	b570      	push	{r4, r5, r6, lr}
 800db4e:	fba1 5402 	umull	r5, r4, r1, r2
 800db52:	b934      	cbnz	r4, 800db62 <_calloc_r+0x16>
 800db54:	4629      	mov	r1, r5
 800db56:	f7fd fbc3 	bl	800b2e0 <_malloc_r>
 800db5a:	4606      	mov	r6, r0
 800db5c:	b928      	cbnz	r0, 800db6a <_calloc_r+0x1e>
 800db5e:	4630      	mov	r0, r6
 800db60:	bd70      	pop	{r4, r5, r6, pc}
 800db62:	220c      	movs	r2, #12
 800db64:	6002      	str	r2, [r0, #0]
 800db66:	2600      	movs	r6, #0
 800db68:	e7f9      	b.n	800db5e <_calloc_r+0x12>
 800db6a:	462a      	mov	r2, r5
 800db6c:	4621      	mov	r1, r4
 800db6e:	f7fe faa3 	bl	800c0b8 <memset>
 800db72:	e7f4      	b.n	800db5e <_calloc_r+0x12>

0800db74 <__ascii_mbtowc>:
 800db74:	b082      	sub	sp, #8
 800db76:	b901      	cbnz	r1, 800db7a <__ascii_mbtowc+0x6>
 800db78:	a901      	add	r1, sp, #4
 800db7a:	b142      	cbz	r2, 800db8e <__ascii_mbtowc+0x1a>
 800db7c:	b14b      	cbz	r3, 800db92 <__ascii_mbtowc+0x1e>
 800db7e:	7813      	ldrb	r3, [r2, #0]
 800db80:	600b      	str	r3, [r1, #0]
 800db82:	7812      	ldrb	r2, [r2, #0]
 800db84:	1e10      	subs	r0, r2, #0
 800db86:	bf18      	it	ne
 800db88:	2001      	movne	r0, #1
 800db8a:	b002      	add	sp, #8
 800db8c:	4770      	bx	lr
 800db8e:	4610      	mov	r0, r2
 800db90:	e7fb      	b.n	800db8a <__ascii_mbtowc+0x16>
 800db92:	f06f 0001 	mvn.w	r0, #1
 800db96:	e7f8      	b.n	800db8a <__ascii_mbtowc+0x16>

0800db98 <__ascii_wctomb>:
 800db98:	4603      	mov	r3, r0
 800db9a:	4608      	mov	r0, r1
 800db9c:	b141      	cbz	r1, 800dbb0 <__ascii_wctomb+0x18>
 800db9e:	2aff      	cmp	r2, #255	@ 0xff
 800dba0:	d904      	bls.n	800dbac <__ascii_wctomb+0x14>
 800dba2:	228a      	movs	r2, #138	@ 0x8a
 800dba4:	601a      	str	r2, [r3, #0]
 800dba6:	f04f 30ff 	mov.w	r0, #4294967295
 800dbaa:	4770      	bx	lr
 800dbac:	700a      	strb	r2, [r1, #0]
 800dbae:	2001      	movs	r0, #1
 800dbb0:	4770      	bx	lr
	...

0800dbb4 <fiprintf>:
 800dbb4:	b40e      	push	{r1, r2, r3}
 800dbb6:	b503      	push	{r0, r1, lr}
 800dbb8:	4601      	mov	r1, r0
 800dbba:	ab03      	add	r3, sp, #12
 800dbbc:	4805      	ldr	r0, [pc, #20]	@ (800dbd4 <fiprintf+0x20>)
 800dbbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbc2:	6800      	ldr	r0, [r0, #0]
 800dbc4:	9301      	str	r3, [sp, #4]
 800dbc6:	f7ff fd4d 	bl	800d664 <_vfiprintf_r>
 800dbca:	b002      	add	sp, #8
 800dbcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800dbd0:	b003      	add	sp, #12
 800dbd2:	4770      	bx	lr
 800dbd4:	20000038 	.word	0x20000038

0800dbd8 <abort>:
 800dbd8:	b508      	push	{r3, lr}
 800dbda:	2006      	movs	r0, #6
 800dbdc:	f000 f82c 	bl	800dc38 <raise>
 800dbe0:	2001      	movs	r0, #1
 800dbe2:	f7f4 f85b 	bl	8001c9c <_exit>

0800dbe6 <_raise_r>:
 800dbe6:	291f      	cmp	r1, #31
 800dbe8:	b538      	push	{r3, r4, r5, lr}
 800dbea:	4605      	mov	r5, r0
 800dbec:	460c      	mov	r4, r1
 800dbee:	d904      	bls.n	800dbfa <_raise_r+0x14>
 800dbf0:	2316      	movs	r3, #22
 800dbf2:	6003      	str	r3, [r0, #0]
 800dbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf8:	bd38      	pop	{r3, r4, r5, pc}
 800dbfa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dbfc:	b112      	cbz	r2, 800dc04 <_raise_r+0x1e>
 800dbfe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc02:	b94b      	cbnz	r3, 800dc18 <_raise_r+0x32>
 800dc04:	4628      	mov	r0, r5
 800dc06:	f000 f831 	bl	800dc6c <_getpid_r>
 800dc0a:	4622      	mov	r2, r4
 800dc0c:	4601      	mov	r1, r0
 800dc0e:	4628      	mov	r0, r5
 800dc10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc14:	f000 b818 	b.w	800dc48 <_kill_r>
 800dc18:	2b01      	cmp	r3, #1
 800dc1a:	d00a      	beq.n	800dc32 <_raise_r+0x4c>
 800dc1c:	1c59      	adds	r1, r3, #1
 800dc1e:	d103      	bne.n	800dc28 <_raise_r+0x42>
 800dc20:	2316      	movs	r3, #22
 800dc22:	6003      	str	r3, [r0, #0]
 800dc24:	2001      	movs	r0, #1
 800dc26:	e7e7      	b.n	800dbf8 <_raise_r+0x12>
 800dc28:	2100      	movs	r1, #0
 800dc2a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dc2e:	4620      	mov	r0, r4
 800dc30:	4798      	blx	r3
 800dc32:	2000      	movs	r0, #0
 800dc34:	e7e0      	b.n	800dbf8 <_raise_r+0x12>
	...

0800dc38 <raise>:
 800dc38:	4b02      	ldr	r3, [pc, #8]	@ (800dc44 <raise+0xc>)
 800dc3a:	4601      	mov	r1, r0
 800dc3c:	6818      	ldr	r0, [r3, #0]
 800dc3e:	f7ff bfd2 	b.w	800dbe6 <_raise_r>
 800dc42:	bf00      	nop
 800dc44:	20000038 	.word	0x20000038

0800dc48 <_kill_r>:
 800dc48:	b538      	push	{r3, r4, r5, lr}
 800dc4a:	4d07      	ldr	r5, [pc, #28]	@ (800dc68 <_kill_r+0x20>)
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	4604      	mov	r4, r0
 800dc50:	4608      	mov	r0, r1
 800dc52:	4611      	mov	r1, r2
 800dc54:	602b      	str	r3, [r5, #0]
 800dc56:	f7f4 f811 	bl	8001c7c <_kill>
 800dc5a:	1c43      	adds	r3, r0, #1
 800dc5c:	d102      	bne.n	800dc64 <_kill_r+0x1c>
 800dc5e:	682b      	ldr	r3, [r5, #0]
 800dc60:	b103      	cbz	r3, 800dc64 <_kill_r+0x1c>
 800dc62:	6023      	str	r3, [r4, #0]
 800dc64:	bd38      	pop	{r3, r4, r5, pc}
 800dc66:	bf00      	nop
 800dc68:	20000d0c 	.word	0x20000d0c

0800dc6c <_getpid_r>:
 800dc6c:	f7f3 bffe 	b.w	8001c6c <_getpid>

0800dc70 <_init>:
 800dc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc72:	bf00      	nop
 800dc74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc76:	bc08      	pop	{r3}
 800dc78:	469e      	mov	lr, r3
 800dc7a:	4770      	bx	lr

0800dc7c <_fini>:
 800dc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc7e:	bf00      	nop
 800dc80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc82:	bc08      	pop	{r3}
 800dc84:	469e      	mov	lr, r3
 800dc86:	4770      	bx	lr
